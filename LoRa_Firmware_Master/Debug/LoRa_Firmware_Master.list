
LoRa_Firmware_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08004f84  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e0  20000010  08004f90  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200004f0  08004f90  000204f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012f26  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002806  00000000  00000000  00032f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001528  00000000  00000000  00035770  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013f0  00000000  00000000  00036c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002293f  00000000  00000000  00038088  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d8d2  00000000  00000000  0005a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d8037  00000000  00000000  00068299  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001402d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005774  00000000  00000000  0014034c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08004e48 	.word	0x08004e48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08004e48 	.word	0x08004e48

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b972 	b.w	800047c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	4688      	mov	r8, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14b      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4615      	mov	r5, r2
 80001c2:	d967      	bls.n	8000294 <__udivmoddi4+0xe4>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0720 	rsb	r7, r2, #32
 80001ce:	fa01 f302 	lsl.w	r3, r1, r2
 80001d2:	fa20 f707 	lsr.w	r7, r0, r7
 80001d6:	4095      	lsls	r5, r2
 80001d8:	ea47 0803 	orr.w	r8, r7, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001e2:	0c23      	lsrs	r3, r4, #16
 80001e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e8:	fa1f fc85 	uxth.w	ip, r5
 80001ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80001f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f4:	fb07 f10c 	mul.w	r1, r7, ip
 80001f8:	4299      	cmp	r1, r3
 80001fa:	d909      	bls.n	8000210 <__udivmoddi4+0x60>
 80001fc:	18eb      	adds	r3, r5, r3
 80001fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000202:	f080 811b 	bcs.w	800043c <__udivmoddi4+0x28c>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 8118 	bls.w	800043c <__udivmoddi4+0x28c>
 800020c:	3f02      	subs	r7, #2
 800020e:	442b      	add	r3, r5
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0fe 	udiv	r0, r3, lr
 8000218:	fb0e 3310 	mls	r3, lr, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 fc0c 	mul.w	ip, r0, ip
 8000224:	45a4      	cmp	ip, r4
 8000226:	d909      	bls.n	800023c <__udivmoddi4+0x8c>
 8000228:	192c      	adds	r4, r5, r4
 800022a:	f100 33ff 	add.w	r3, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000232:	45a4      	cmp	ip, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x290>
 8000238:	3802      	subs	r0, #2
 800023a:	442c      	add	r4, r5
 800023c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000240:	eba4 040c 	sub.w	r4, r4, ip
 8000244:	2700      	movs	r7, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa0>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	4639      	mov	r1, r7
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xbe>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80eb 	beq.w	8000436 <__udivmoddi4+0x286>
 8000260:	2700      	movs	r7, #0
 8000262:	e9c6 0100 	strd	r0, r1, [r6]
 8000266:	4638      	mov	r0, r7
 8000268:	4639      	mov	r1, r7
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f783 	clz	r7, r3
 8000272:	2f00      	cmp	r7, #0
 8000274:	d147      	bne.n	8000306 <__udivmoddi4+0x156>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd0>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fa 	bhi.w	8000474 <__udivmoddi4+0x2c4>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa0>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa0>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xe8>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 808f 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a2:	1b49      	subs	r1, r1, r5
 80002a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a8:	fa1f f885 	uxth.w	r8, r5
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb08 f10c 	mul.w	r1, r8, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4299      	cmp	r1, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2bc>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80002e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x14c>
 80002ec:	192c      	adds	r4, r5, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80b6 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e79f      	b.n	8000246 <__udivmoddi4+0x96>
 8000306:	f1c7 0c20 	rsb	ip, r7, #32
 800030a:	40bb      	lsls	r3, r7
 800030c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000310:	ea4e 0e03 	orr.w	lr, lr, r3
 8000314:	fa01 f407 	lsl.w	r4, r1, r7
 8000318:	fa20 f50c 	lsr.w	r5, r0, ip
 800031c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000320:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000324:	4325      	orrs	r5, r4
 8000326:	fbb3 f9f8 	udiv	r9, r3, r8
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	fb08 3319 	mls	r3, r8, r9, r3
 8000330:	fa1f fa8e 	uxth.w	sl, lr
 8000334:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000338:	fb09 f40a 	mul.w	r4, r9, sl
 800033c:	429c      	cmp	r4, r3
 800033e:	fa02 f207 	lsl.w	r2, r2, r7
 8000342:	fa00 f107 	lsl.w	r1, r0, r7
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1e 0303 	adds.w	r3, lr, r3
 800034c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	429c      	cmp	r4, r3
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a9 0902 	sub.w	r9, r9, #2
 800035e:	4473      	add	r3, lr
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	b2ad      	uxth	r5, r5
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000370:	fb00 fa0a 	mul.w	sl, r0, sl
 8000374:	45a2      	cmp	sl, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1e 0404 	adds.w	r4, lr, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a2      	cmp	sl, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3802      	subs	r0, #2
 8000388:	4474      	add	r4, lr
 800038a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038e:	fba0 8902 	umull	r8, r9, r0, r2
 8000392:	eba4 040a 	sub.w	r4, r4, sl
 8000396:	454c      	cmp	r4, r9
 8000398:	46c2      	mov	sl, r8
 800039a:	464b      	mov	r3, r9
 800039c:	d354      	bcc.n	8000448 <__udivmoddi4+0x298>
 800039e:	d051      	beq.n	8000444 <__udivmoddi4+0x294>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d069      	beq.n	8000478 <__udivmoddi4+0x2c8>
 80003a4:	ebb1 050a 	subs.w	r5, r1, sl
 80003a8:	eb64 0403 	sbc.w	r4, r4, r3
 80003ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003b0:	40fd      	lsrs	r5, r7
 80003b2:	40fc      	lsrs	r4, r7
 80003b4:	ea4c 0505 	orr.w	r5, ip, r5
 80003b8:	e9c6 5400 	strd	r5, r4, [r6]
 80003bc:	2700      	movs	r7, #0
 80003be:	e747      	b.n	8000250 <__udivmoddi4+0xa0>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f703 	lsr.w	r7, r0, r3
 80003c8:	4095      	lsls	r5, r2
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	fa21 f303 	lsr.w	r3, r1, r3
 80003d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d6:	4338      	orrs	r0, r7
 80003d8:	0c01      	lsrs	r1, r0, #16
 80003da:	fbb3 f7fe 	udiv	r7, r3, lr
 80003de:	fa1f f885 	uxth.w	r8, r5
 80003e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ea:	fb07 f308 	mul.w	r3, r7, r8
 80003ee:	428b      	cmp	r3, r1
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f6:	1869      	adds	r1, r5, r1
 80003f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3f02      	subs	r7, #2
 8000404:	4429      	add	r1, r5
 8000406:	1acb      	subs	r3, r1, r3
 8000408:	b281      	uxth	r1, r0
 800040a:	fbb3 f0fe 	udiv	r0, r3, lr
 800040e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb00 f308 	mul.w	r3, r0, r8
 800041a:	428b      	cmp	r3, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x27e>
 800041e:	1869      	adds	r1, r5, r1
 8000420:	f100 3cff 	add.w	ip, r0, #4294967295
 8000424:	d217      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000426:	428b      	cmp	r3, r1
 8000428:	d915      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042a:	3802      	subs	r0, #2
 800042c:	4429      	add	r1, r5
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xfe>
 8000436:	4637      	mov	r7, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e709      	b.n	8000250 <__udivmoddi4+0xa0>
 800043c:	4607      	mov	r7, r0
 800043e:	e6e7      	b.n	8000210 <__udivmoddi4+0x60>
 8000440:	4618      	mov	r0, r3
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x8c>
 8000444:	4541      	cmp	r1, r8
 8000446:	d2ab      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 8000448:	ebb8 0a02 	subs.w	sl, r8, r2
 800044c:	eb69 020e 	sbc.w	r2, r9, lr
 8000450:	3801      	subs	r0, #1
 8000452:	4613      	mov	r3, r2
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4660      	mov	r0, ip
 8000458:	e7e9      	b.n	800042e <__udivmoddi4+0x27e>
 800045a:	4618      	mov	r0, r3
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4667      	mov	r7, ip
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	4681      	mov	r9, r0
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3802      	subs	r0, #2
 8000468:	442c      	add	r4, r5
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0x14c>
 800046c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000470:	442b      	add	r3, r5
 8000472:	e72f      	b.n	80002d4 <__udivmoddi4+0x124>
 8000474:	4638      	mov	r0, r7
 8000476:	e708      	b.n	800028a <__udivmoddi4+0xda>
 8000478:	4637      	mov	r7, r6
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0xa0>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	78fa      	ldrb	r2, [r7, #3]
 8000492:	4611      	mov	r1, r2
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fcc0 	bl	8000e1a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fcda 	bl	8000e58 <SX1278_hw_SPIReadByte>
 80004a4:	4603      	mov	r3, r0
 80004a6:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2101      	movs	r1, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fc78 	bl	8000da4 <SX1278_hw_SetNSS>
	return tmp;
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	70fb      	strb	r3, [r7, #3]
 80004ca:	4613      	mov	r3, r2
 80004cc:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fc65 	bl	8000da4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	78fb      	ldrb	r3, [r7, #3]
 80004e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4619      	mov	r1, r3
 80004e8:	4610      	mov	r0, r2
 80004ea:	f000 fc96 	bl	8000e1a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	78ba      	ldrb	r2, [r7, #2]
 80004f4:	4611      	mov	r1, r2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fc8f 	bl	8000e1a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fc4e 	bl	8000da4 <SX1278_hw_SetNSS>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	607a      	str	r2, [r7, #4]
 800051a:	461a      	mov	r2, r3
 800051c:	460b      	mov	r3, r1
 800051e:	72fb      	strb	r3, [r7, #11]
 8000520:	4613      	mov	r3, r2
 8000522:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000524:	7abb      	ldrb	r3, [r7, #10]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d927      	bls.n	800057a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fc37 	bl	8000da4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	7afa      	ldrb	r2, [r7, #11]
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fc6b 	bl	8000e1a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	75fb      	strb	r3, [r7, #23]
 8000548:	e00c      	b.n	8000564 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6819      	ldr	r1, [r3, #0]
 800054e:	7dfb      	ldrb	r3, [r7, #23]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	18d4      	adds	r4, r2, r3
 8000554:	4608      	mov	r0, r1
 8000556:	f000 fc7f 	bl	8000e58 <SX1278_hw_SPIReadByte>
 800055a:	4603      	mov	r3, r0
 800055c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800055e:	7dfb      	ldrb	r3, [r7, #23]
 8000560:	3301      	adds	r3, #1
 8000562:	75fb      	strb	r3, [r7, #23]
 8000564:	7dfa      	ldrb	r2, [r7, #23]
 8000566:	7abb      	ldrb	r3, [r7, #10]
 8000568:	429a      	cmp	r2, r3
 800056a:	d3ee      	bcc.n	800054a <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2101      	movs	r1, #1
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fc16 	bl	8000da4 <SX1278_hw_SetNSS>
 8000578:	e000      	b.n	800057c <SX1278_SPIBurstRead+0x6c>
		return;
 800057a:	bf00      	nop
	}
}
 800057c:	371c      	adds	r7, #28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd90      	pop	{r4, r7, pc}

08000582 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	461a      	mov	r2, r3
 800058e:	460b      	mov	r3, r1
 8000590:	72fb      	strb	r3, [r7, #11]
 8000592:	4613      	mov	r3, r2
 8000594:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000596:	7abb      	ldrb	r3, [r7, #10]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d929      	bls.n	80005f0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fbfe 	bl	8000da4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	7afb      	ldrb	r3, [r7, #11]
 80005ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	4610      	mov	r0, r2
 80005b8:	f000 fc2f 	bl	8000e1a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	75fb      	strb	r3, [r7, #23]
 80005c0:	e00b      	b.n	80005da <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 fc23 	bl	8000e1a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	3301      	adds	r3, #1
 80005d8:	75fb      	strb	r3, [r7, #23]
 80005da:	7dfa      	ldrb	r2, [r7, #23]
 80005dc:	7abb      	ldrb	r3, [r7, #10]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d3ef      	bcc.n	80005c2 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2101      	movs	r1, #1
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fbdb 	bl	8000da4 <SX1278_hw_SetNSS>
 80005ee:	e000      	b.n	80005f2 <SX1278_SPIBurstWrite+0x70>
		return;
 80005f0:	bf00      	nop
	}
}
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f913 	bl	800082c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000606:	200f      	movs	r0, #15
 8000608:	f000 fc4c 	bl	8000ea4 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f92d 	bl	800086c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note
	SX1278_setNodeAddress(module, module->node_addr);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7ddb      	ldrb	r3, [r3, #23]
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 fb5c 	bl	8000cd6 <SX1278_setNodeAddress>
	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f04f 0100 	mov.w	r1, #0
 800062c:	04e1      	lsls	r1, r4, #19
 800062e:	ea41 3153 	orr.w	r1, r1, r3, lsr #13
 8000632:	04d8      	lsls	r0, r3, #19
 8000634:	4a6f      	ldr	r2, [pc, #444]	; (80007f4 <SX1278_config+0x1fc>)
 8000636:	f04f 0300 	mov.w	r3, #0
 800063a:	f7ff fda1 	bl	8000180 <__aeabi_uldivmod>
 800063e:	4603      	mov	r3, r0
 8000640:	460c      	mov	r4, r1
 8000642:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000646:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	f04f 0400 	mov.w	r4, #0
 8000652:	0c0b      	lsrs	r3, r1, #16
 8000654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000658:	0c14      	lsrs	r4, r2, #16
 800065a:	b2db      	uxtb	r3, r3
 800065c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800065e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000662:	f04f 0300 	mov.w	r3, #0
 8000666:	f04f 0400 	mov.w	r4, #0
 800066a:	0a0b      	lsrs	r3, r1, #8
 800066c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000670:	0a14      	lsrs	r4, r2, #8
 8000672:	b2db      	uxtb	r3, r3
 8000674:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000676:	7c3b      	ldrb	r3, [r7, #16]
 8000678:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800067a:	f107 020c 	add.w	r2, r7, #12
 800067e:	2303      	movs	r3, #3
 8000680:	2106      	movs	r1, #6
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff7d 	bl	8000582 <SX1278_SPIBurstWrite>

//	SX1278_SPIWrite(module, RegSyncConfig, 0x53); /* changed 22/03/2021 Controls the automatic restart of the receiver after the reception of
//	a valid packet (PayloadReady or CrcOk):*/
	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000688:	2234      	movs	r2, #52	; 0x34
 800068a:	2139      	movs	r1, #57	; 0x39
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff16 	bl	80004be <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7c1b      	ldrb	r3, [r3, #16]
 8000696:	461a      	mov	r2, r3
 8000698:	4b57      	ldr	r3, [pc, #348]	; (80007f8 <SX1278_config+0x200>)
 800069a:	5c9b      	ldrb	r3, [r3, r2]
 800069c:	461a      	mov	r2, r3
 800069e:	2109      	movs	r1, #9
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff0c 	bl	80004be <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80006a6:	220b      	movs	r2, #11
 80006a8:	210b      	movs	r1, #11
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff07 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80006b0:	2223      	movs	r2, #35	; 0x23
 80006b2:	210c      	movs	r1, #12
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ff02 	bl	80004be <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7c5b      	ldrb	r3, [r3, #17]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b4e      	ldr	r3, [pc, #312]	; (80007fc <SX1278_config+0x204>)
 80006c2:	5c9b      	ldrb	r3, [r3, r2]
 80006c4:	2b06      	cmp	r3, #6
 80006c6:	d147      	bne.n	8000758 <SX1278_config+0x160>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7c9b      	ldrb	r3, [r3, #18]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b4c      	ldr	r3, [pc, #304]	; (8000800 <SX1278_config+0x208>)
 80006d0:	5c9b      	ldrb	r3, [r3, r2]
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7cdb      	ldrb	r3, [r3, #19]
 80006da:	4619      	mov	r1, r3
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <SX1278_config+0x20c>)
 80006de:	5c5b      	ldrb	r3, [r3, r1]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4413      	add	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	211d      	movs	r1, #29
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff fee4 	bl	80004be <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7c5b      	ldrb	r3, [r3, #17]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <SX1278_config+0x204>)
 80006fe:	5c9b      	ldrb	r3, [r3, r2]
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7d1b      	ldrb	r3, [r3, #20]
 8000708:	4619      	mov	r1, r3
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <SX1278_config+0x210>)
 800070c:	5c5b      	ldrb	r3, [r3, r1]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4413      	add	r3, r2
 8000714:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000716:	3303      	adds	r3, #3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	211e      	movs	r1, #30
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff fecd 	bl	80004be <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000724:	2131      	movs	r1, #49	; 0x31
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff feaa 	bl	8000480 <SX1278_SPIRead>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	f023 0307 	bic.w	r3, r3, #7
 8000736:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	f043 0305 	orr.w	r3, r3, #5
 800073e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	461a      	mov	r2, r3
 8000744:	2131      	movs	r1, #49	; 0x31
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff feb9 	bl	80004be <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800074c:	220c      	movs	r2, #12
 800074e:	2137      	movs	r1, #55	; 0x37
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff feb4 	bl	80004be <SX1278_SPIWrite>
 8000756:	e029      	b.n	80007ac <SX1278_config+0x1b4>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7c9b      	ldrb	r3, [r3, #18]
 800075c:	461a      	mov	r2, r3
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SX1278_config+0x208>)
 8000760:	5c9b      	ldrb	r3, [r3, r2]
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7cdb      	ldrb	r3, [r3, #19]
 800076a:	4619      	mov	r1, r3
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SX1278_config+0x20c>)
 800076e:	5c5b      	ldrb	r3, [r3, r1]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000774:	4413      	add	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	211d      	movs	r1, #29
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fe9e 	bl	80004be <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7c5b      	ldrb	r3, [r3, #17]
 8000786:	461a      	mov	r2, r3
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <SX1278_config+0x204>)
 800078a:	5c9b      	ldrb	r3, [r3, r2]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7d1b      	ldrb	r3, [r3, #20]
 8000794:	4619      	mov	r1, r3
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <SX1278_config+0x210>)
 8000798:	5c5b      	ldrb	r3, [r3, r1]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800079e:	4413      	add	r3, r2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	211e      	movs	r1, #30
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fe89 	bl	80004be <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80007ac:	2204      	movs	r2, #4
 80007ae:	2126      	movs	r1, #38	; 0x26
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe84 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80007b6:	2208      	movs	r2, #8
 80007b8:	211f      	movs	r1, #31
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff fe7f 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80007c0:	2200      	movs	r2, #0
 80007c2:	2120      	movs	r1, #32
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff fe7a 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80007ca:	2208      	movs	r2, #8
 80007cc:	2121      	movs	r1, #33	; 0x21
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff fe75 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80007d4:	2201      	movs	r2, #1
 80007d6:	2141      	movs	r1, #65	; 0x41
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fe70 	bl	80004be <SX1278_SPIWrite>
	module->readBytes = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
//	SX1278_setOCP(module, module->maximum_Current);
	//SX1278_standby(module); //Entry standby mode
	SX1278_cad(module); //Entry cad mode
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 f830 	bl	800084c <SX1278_cad>
}
 80007ec:	bf00      	nop
 80007ee:	371c      	adds	r7, #28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	01e84800 	.word	0x01e84800
 80007f8:	08004e9c 	.word	0x08004e9c
 80007fc:	08004ea0 	.word	0x08004ea0
 8000800:	08004ea8 	.word	0x08004ea8
 8000804:	08004eb4 	.word	0x08004eb4
 8000808:	08004eb8 	.word	0x08004eb8

0800080c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000814:	2209      	movs	r2, #9
 8000816:	2101      	movs	r1, #1
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fe50 	bl	80004be <SX1278_SPIWrite>
	module->status = STANDBY;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	761a      	strb	r2, [r3, #24]
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000834:	2208      	movs	r2, #8
 8000836:	2101      	movs	r1, #1
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff fe40 	bl	80004be <SX1278_SPIWrite>
	module->status = SLEEP;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SX1278_cad>:

void SX1278_cad(SX1278_t *module)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x0F);
 8000854:	220f      	movs	r2, #15
 8000856:	2101      	movs	r1, #1
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff fe30 	bl	80004be <SX1278_SPIWrite>
	module->status = CAD;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2204      	movs	r2, #4
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000874:	2288      	movs	r2, #136	; 0x88
 8000876:	2101      	movs	r1, #1
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fe20 	bl	80004be <SX1278_SPIWrite>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000886:	b580      	push	{r7, lr}
 8000888:	b084      	sub	sp, #16
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	uint8_t st0;
	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status
 800088e:	2101      	movs	r1, #1
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fdf5 	bl	8000480 <SX1278_SPIRead>
 8000896:	4603      	mov	r3, r0
 8000898:	73fb      	strb	r3, [r7, #15]
	SX1278_standby(module);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb6 	bl	800080c <SX1278_standby>
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	2112      	movs	r1, #18
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fe0a 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, st0);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	461a      	mov	r2, r3
 80008ae:	2101      	movs	r1, #1
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fe04 	bl	80004be <SX1278_SPIWrite>

}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	460b      	mov	r3, r1
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	7afa      	ldrb	r2, [r7, #11]
 80008d0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff fe90 	bl	80005f8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80008d8:	2284      	movs	r2, #132	; 0x84
 80008da:	214d      	movs	r1, #77	; 0x4d
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff fdee 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80008e2:	22ff      	movs	r2, #255	; 0xff
 80008e4:	2124      	movs	r1, #36	; 0x24
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff fde9 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80008ec:	2201      	movs	r2, #1
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f7ff fde4 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80008f6:	223f      	movs	r2, #63	; 0x3f
 80008f8:	2111      	movs	r1, #17
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff fddf 	bl	80004be <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f7ff ffc0 	bl	8000886 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must define when the data long of one byte in SF is 6)
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	461a      	mov	r2, r3
 800090a:	2122      	movs	r1, #34	; 0x22
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff fdd6 	bl	80004be <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000912:	210f      	movs	r1, #15
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f7ff fdb3 	bl	8000480 <SX1278_SPIRead>
 800091a:	4603      	mov	r3, r0
 800091c:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	461a      	mov	r2, r3
 8000922:	210d      	movs	r1, #13
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f7ff fdca 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800092a:	228d      	movs	r2, #141	; 0x8d
 800092c:	2101      	movs	r1, #1
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff fdc5 	bl	80004be <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800093c:	2118      	movs	r1, #24
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff fd9e 	bl	8000480 <SX1278_SPIRead>
 8000944:	4603      	mov	r3, r0
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	2b04      	cmp	r3, #4
 800094c:	d104      	bne.n	8000958 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2203      	movs	r2, #3
 8000952:	761a      	strb	r2, [r3, #24]
			return 1;
 8000954:	2301      	movs	r3, #1
 8000956:	e013      	b.n	8000980 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d109      	bne.n	8000978 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fa32 	bl	8000dd2 <SX1278_hw_Reset>
			SX1278_config(module);
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff fe42 	bl	80005f8 <SX1278_config>
			return 0;
 8000974:	2300      	movs	r3, #0
 8000976:	e003      	b.n	8000980 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f000 fa93 	bl	8000ea4 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800097e:	e7dd      	b.n	800093c <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module,SX1278_pack_t *packet,SX1278_pack_t *ack ) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;


	if (SX1278_hw_GetDIO0(module->hw)) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fa8e 	bl	8000eba <SX1278_hw_GetDIO0>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d02d      	beq.n	8000a00 <SX1278_LoRaRxPacket+0x78>
		memset(packet->data, 0x00, SX1278_MAX_PAYLOAD);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	3309      	adds	r3, #9
 80009a8:	22fb      	movs	r2, #251	; 0xfb
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 fa43 	bl	8004e38 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80009b2:	2110      	movs	r1, #16
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fd63 	bl	8000480 <SX1278_SPIRead>
 80009ba:	4603      	mov	r3, r0
 80009bc:	75bb      	strb	r3, [r7, #22]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80009be:	7dbb      	ldrb	r3, [r7, #22]
 80009c0:	461a      	mov	r2, r3
 80009c2:	210d      	movs	r1, #13
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fd7a 	bl	80004be <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	7c5b      	ldrb	r3, [r3, #17]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d103      	bne.n	80009da <SX1278_LoRaRxPacket+0x52>
			packet_size = module->packetLength;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	7d5b      	ldrb	r3, [r3, #21]
 80009d6:	75fb      	strb	r3, [r7, #23]
 80009d8:	e005      	b.n	80009e6 <SX1278_LoRaRxPacket+0x5e>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80009da:	2113      	movs	r1, #19
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fd4f 	bl	8000480 <SX1278_SPIRead>
 80009e2:	4603      	mov	r3, r0
 80009e4:	75fb      	strb	r3, [r7, #23]
		}
//		SX1278_SPIBurstRead(module, 0x00, packet->data, packet_size);
		SX1278_getPacket(module, packet);
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f000 f8da 	bl	8000ba2 <SX1278_getPacket>
		module->readBytes = packet_size;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	7dfa      	ldrb	r2, [r7, #23]
 80009f2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
		SX1278_clearLoRaIrq(module);
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff ff45 	bl	8000886 <SX1278_clearLoRaIrq>
		return 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <SX1278_LoRaRxPacket+0x7a>
	}
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <SX1278_LoRaEntryTx>:


int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	460b      	mov	r3, r1
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	7afa      	ldrb	r2, [r7, #11]
 8000a1c:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fdea 	bl	80005f8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000a24:	2287      	movs	r2, #135	; 0x87
 8000a26:	214d      	movs	r1, #77	; 0x4d
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f7ff fd48 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2124      	movs	r1, #36	; 0x24
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff fd43 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000a38:	2241      	movs	r2, #65	; 0x41
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff fd3e 	bl	80004be <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff ff1f 	bl	8000886 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000a48:	22f7      	movs	r2, #247	; 0xf7
 8000a4a:	2111      	movs	r1, #17
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f7ff fd36 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	461a      	mov	r2, r3
 8000a56:	2122      	movs	r1, #34	; 0x22
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fd30 	bl	80004be <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000a5e:	210e      	movs	r1, #14
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f7ff fd0d 	bl	8000480 <SX1278_SPIRead>
 8000a66:	4603      	mov	r3, r0
 8000a68:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000a6a:	7dfb      	ldrb	r3, [r7, #23]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	210d      	movs	r1, #13
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fd24 	bl	80004be <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000a76:	2122      	movs	r1, #34	; 0x22
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff fd01 	bl	8000480 <SX1278_SPIRead>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a82:	7dba      	ldrb	r2, [r7, #22]
 8000a84:	7afb      	ldrb	r3, [r7, #11]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d104      	bne.n	8000a94 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	761a      	strb	r2, [r3, #24]
			return 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e00e      	b.n	8000ab2 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1ea      	bne.n	8000a76 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f994 	bl	8000dd2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff fda4 	bl	80005f8 <SX1278_config>
			return 0;
 8000ab0:	2300      	movs	r3, #0
		}
	}
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <SX1278_LoRaTxPacketACK>:
		SX1278_hw_DelayMs(1);
	}
}

int SX1278_LoRaTxPacketACK(SX1278_t *module, SX1278_pack_t *packet_sent, SX1278_pack_t *ack,
		uint32_t timeout) {
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	603b      	str	r3, [r7, #0]
//	SX1278_setPacket(module, dest, (uint8_t*)txBuffer, packet_sent);
	SX1278_setACK(module, packet_sent, ack);
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	68b9      	ldr	r1, [r7, #8]
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f000 f8ad 	bl	8000c2c <SX1278_setACK>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000ad2:	228b      	movs	r2, #139	; 0x8b
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff fcf1 	bl	80004be <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f9ea 	bl	8000eba <SX1278_hw_GetDIO0>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00b      	beq.n	8000b04 <SX1278_LoRaTxPacketACK+0x4a>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000aec:	2112      	movs	r1, #18
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff fcc6 	bl	8000480 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fec6 	bl	8000886 <SX1278_clearLoRaIrq>
			SX1278_cad(module); //Entry cad mode //edited
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff fea6 	bl	800084c <SX1278_cad>
			return 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e013      	b.n	8000b2c <SX1278_LoRaTxPacketACK+0x72>
		}

		if (--timeout == 0) {
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d109      	bne.n	8000b24 <SX1278_LoRaTxPacketACK+0x6a>
			SX1278_hw_Reset(module->hw);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f95c 	bl	8000dd2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fd6c 	bl	80005f8 <SX1278_config>
			return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e003      	b.n	8000b2c <SX1278_LoRaTxPacketACK+0x72>
		}
		SX1278_hw_DelayMs(1);
 8000b24:	2001      	movs	r0, #1
 8000b26:	f000 f9bd 	bl	8000ea4 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000b2a:	e7d7      	b.n	8000adc <SX1278_LoRaTxPacketACK+0x22>
	}
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power, uint8_t current,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR, uint8_t node_addr,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f918 	bl	8000d7a <SX1278_hw_init>
	module->frequency = frequency;
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b50:	e9c2 3402 	strd	r3, r4, [r2, #8]
	module->power = power;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b5a:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b62:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b6a:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b72:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b7a:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000b82:	755a      	strb	r2, [r3, #21]
	module->maximum_Current = current;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b8a:	759a      	strb	r2, [r3, #22]
	module->node_addr = node_addr;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000b92:	75da      	strb	r2, [r3, #23]
	SX1278_config(module);
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f7ff fd2f 	bl	80005f8 <SX1278_config>
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}

08000ba2 <SX1278_getPacket>:
	SX1278_SPIWrite(module, LR_RegOcp, OcpTrim);
	SX1278_hw_DelayMs(10);
}

void SX1278_getPacket(SX1278_t *module, SX1278_pack_t *packet_received)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
	memset(packet_received->data, 0x00, SX1278_MAX_PAYLOAD);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	3309      	adds	r3, #9
 8000bb0:	22fb      	movs	r2, #251	; 0xfb
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 f93f 	bl	8004e38 <memset>
	uint32_t payload_length;
	packet_received->dst = SX1278_SPIRead(module, 0x00); // Storing first byte of the received packet
 8000bba:	2100      	movs	r1, #0
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fc5f 	bl	8000480 <SX1278_SPIRead>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	701a      	strb	r2, [r3, #0]
	packet_received->src =SX1278_SPIRead(module, 0x00);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fc57 	bl	8000480 <SX1278_SPIRead>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	705a      	strb	r2, [r3, #1]
	packet_received->packnum = SX1278_SPIRead(module, 0x00);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fc4f 	bl	8000480 <SX1278_SPIRead>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	605a      	str	r2, [r3, #4]
	packet_received->length = SX1278_SPIRead(module, 0x00);
 8000bea:	2100      	movs	r1, #0
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff fc47 	bl	8000480 <SX1278_SPIRead>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	721a      	strb	r2, [r3, #8]
	packet_received->retry = SX1278_SPIRead(module,0x00);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fc3f 	bl	8000480 <SX1278_SPIRead>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	payload_length = packet_received->length;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	7a1b      	ldrb	r3, [r3, #8]
 8000c10:	60fb      	str	r3, [r7, #12]

	SX1278_SPIBurstRead(module, 0x00, packet_received->data, payload_length);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	f103 0209 	add.w	r2, r3, #9
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fc76 	bl	8000510 <SX1278_SPIBurstRead>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SX1278_setACK>:
		}
		return _payloadlength;
	}

void SX1278_setACK(SX1278_t *module, SX1278_pack_t *packet_rec, SX1278_pack_t *ack)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]

	//uint8_t st0;
//	SX1278_clearLoRaIrq(module);	// Initializing flags

//	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status
		SX1278_clearLoRaIrq(module);	// Initializing flags
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff fe24 	bl	8000886 <SX1278_clearLoRaIrq>

	//	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status

		memset(ack->data, 0x00, SX1278_MAX_PAYLOAD);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3309      	adds	r3, #9
 8000c42:	22fb      	movs	r2, #251	; 0xfb
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 f8f6 	bl	8004e38 <memset>
		 // LoRa mode
		SX1278_standby(module);	// Stdby LoRa mode to write in FIFO
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff fddd 	bl	800080c <SX1278_standby>

	 // LoRa mode
//	SX1278_standby(module);	// Stdby LoRa mode to write in FIFO

	ack->dst = packet_rec->src;	// Setting destination in packet structure
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	785a      	ldrb	r2, [r3, #1]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	701a      	strb	r2, [r3, #0]
	ack->src = SX1278_getNodeAddress(module);
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f000 f86b 	bl	8000d36 <SX1278_getNodeAddress>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	705a      	strb	r2, [r3, #1]
	ack->packnum = packet_rec->packnum;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	605a      	str	r2, [r3, #4]
	ack->length = 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	721a      	strb	r2, [r3, #8]
	ack->data[0] = 1;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	725a      	strb	r2, [r3, #9]


	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, 0x80);  // Setting address pointer in FIFO data buffer
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	210d      	movs	r1, #13
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fc1c 	bl	80004be <SX1278_SPIWrite>
	// Writing packet to send in FIFO
	SX1278_SPIWrite(module, 0x00, ack->dst); 		// Writing the destination in FIFO
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fc15 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, ack->src);		// Writing the source in FIFO
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f7ff fc0e 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, ack->packnum);	// Writing the packet number in FIFO
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff fc06 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, ack->length);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7a1b      	ldrb	r3, [r3, #8]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f7ff fbff 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, ack->data[0]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7a5b      	ldrb	r3, [r3, #9]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fbf8 	bl	80004be <SX1278_SPIWrite>

//	SX1278_SPIWrite(module, LR_RegOpMode, st0);
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <SX1278_setNodeAddress>:
		return 0;
	}
}

void SX1278_setNodeAddress(SX1278_t *module, uint8_t addr)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	70fb      	strb	r3, [r7, #3]
	uint8_t _nodeAddress;
	_nodeAddress = addr;
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	73fb      	strb	r3, [r7, #15]
	uint8_t st0 = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73bb      	strb	r3, [r7, #14]
	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status
 8000cea:	2101      	movs	r1, #1
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fbc7 	bl	8000480 <SX1278_SPIRead>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73bb      	strb	r3, [r7, #14]
		// Allowing access to FSK registers while in LoRa standby mode
	SX1278_SPIWrite(module,LR_RegOpMode, 0xCA);
 8000cf6:	22ca      	movs	r2, #202	; 0xca
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fbdf 	bl	80004be <SX1278_SPIWrite>
	// Saving node address
	SX1278_SPIWrite(module, RegNodeAdrs, _nodeAddress);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	461a      	mov	r2, r3
 8000d04:	2133      	movs	r1, #51	; 0x33
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fbd9 	bl	80004be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegBroadcastAdrs, 0x00);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2134      	movs	r1, #52	; 0x34
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fbd4 	bl	80004be <SX1278_SPIWrite>
	_nodeAddress = SX1278_SPIRead(module, RegNodeAdrs);
 8000d16:	2133      	movs	r1, #51	; 0x33
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fbb1 	bl	8000480 <SX1278_SPIRead>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	73fb      	strb	r3, [r7, #15]
	SX1278_SPIWrite(module, LR_RegOpMode, st0);	// Getting back to previous status
 8000d22:	7bbb      	ldrb	r3, [r7, #14]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2101      	movs	r1, #1
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fbc8 	bl	80004be <SX1278_SPIWrite>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <SX1278_getNodeAddress>:

uint8_t SX1278_getNodeAddress(SX1278_t *module)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	uint8_t _nodeAddress;
	uint8_t st0 = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status
 8000d42:	2101      	movs	r1, #1
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fb9b 	bl	8000480 <SX1278_SPIRead>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
		// Allowing access to FSK registers while in LoRa standby mode
	SX1278_SPIWrite(module,LR_RegOpMode, 0xCA);
 8000d4e:	22ca      	movs	r2, #202	; 0xca
 8000d50:	2101      	movs	r1, #1
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fbb3 	bl	80004be <SX1278_SPIWrite>
	// Saving node address
	_nodeAddress = SX1278_SPIRead(module, RegNodeAdrs);
 8000d58:	2133      	movs	r1, #51	; 0x33
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fb90 	bl	8000480 <SX1278_SPIRead>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIWrite(module, LR_RegOpMode, st0);	// Getting back to previous status
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2101      	movs	r1, #1
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fba7 	bl	80004be <SX1278_SPIWrite>
	return _nodeAddress;
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000d82:	2101      	movs	r1, #1
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f80d 	bl	8000da4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6858      	ldr	r0, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2201      	movs	r2, #1
 8000d96:	4619      	mov	r1, r3
 8000d98:	f000 ff7c 	bl	8001c94 <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6958      	ldr	r0, [r3, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	b299      	uxth	r1, r3
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	bf0c      	ite	eq
 8000dbe:	2301      	moveq	r3, #1
 8000dc0:	2300      	movne	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f000 ff65 	bl	8001c94 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffe1 	bl	8000da4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6858      	ldr	r0, [r3, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	f000 ff50 	bl	8001c94 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 f855 	bl	8000ea4 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6858      	ldr	r0, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	4619      	mov	r1, r3
 8000e08:	f000 ff44 	bl	8001c94 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000e0c:	2064      	movs	r0, #100	; 0x64
 8000e0e:	f000 f849 	bl	8000ea4 <SX1278_hw_DelayMs>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000e26:	2100      	movs	r1, #0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ffbb 	bl	8000da4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6998      	ldr	r0, [r3, #24]
 8000e32:	1cf9      	adds	r1, r7, #3
 8000e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f002 fde7 	bl	8003a0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000e3e:	bf00      	nop
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 f962 	bl	800410e <HAL_SPI_GetState>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d1f7      	bne.n	8000e40 <SX1278_hw_SPICommand+0x26>
		;
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff9a 	bl	8000da4 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6998      	ldr	r0, [r3, #24]
 8000e74:	f107 020e 	add.w	r2, r7, #14
 8000e78:	f107 010f 	add.w	r1, r7, #15
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	f002 ff30 	bl	8003ce8 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000e88:	bf00      	nop
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 f93d 	bl	800410e <HAL_SPI_GetState>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d1f7      	bne.n	8000e8a <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fc63 	bl	8001778 <HAL_Delay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4610      	mov	r0, r2
 8000ed0:	f000 fec8 	bl	8001c64 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	bf0c      	ite	eq
 8000eda:	2301      	moveq	r3, #1
 8000edc:	2300      	movne	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff ffd9 	bl	8000ee8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2002      	movs	r0, #2
 8000f38:	f7ff ffd6 	bl	8000ee8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 fea5 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	4817      	ldr	r0, [pc, #92]	; (8000fac <MX_GPIO_Init+0x90>)
 8000f50:	f000 fea0 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO0_Pin */
    GPIO_InitStruct.Pin = DIO0_Pin;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f000 fd0c 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 8000f6c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 fcfd 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED_Pin;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <MX_GPIO_Init+0x90>)
 8000fa0:	f000 fcf0 	bl	8001984 <HAL_GPIO_Init>

}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	48000400 	.word	0x48000400

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb6:	f000 fb59 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fba:	f000 f8cd 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbe:	f7ff ffad 	bl	8000f1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fc2:	f000 fa9f 	bl	8001504 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000fc6:	f000 f975 	bl	80012b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000fca:	4b59      	ldr	r3, [pc, #356]	; (8001130 <main+0x180>)
 8000fcc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fd0:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <main+0x180>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8000fd8:	4b55      	ldr	r3, [pc, #340]	; (8001130 <main+0x180>)
 8000fda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fde:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <main+0x180>)
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8000fe6:	4b52      	ldr	r3, [pc, #328]	; (8001130 <main+0x180>)
 8000fe8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fec:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <main+0x180>)
 8000ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff4:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <main+0x180>)
 8000ff8:	4a4e      	ldr	r2, [pc, #312]	; (8001134 <main+0x184>)
 8000ffa:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <main+0x188>)
 8000ffe:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <main+0x180>)
 8001000:	601a      	str	r2, [r3, #0]
//  printf("Configuring LoRa module\r\n");

//overCurrentProtection = 120; 		node addr 2					// default = 100 mA
  SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM,120, SX1278_LORA_SF_7,
 8001002:	230a      	movs	r3, #10
 8001004:	9307      	str	r3, [sp, #28]
 8001006:	2301      	movs	r3, #1
 8001008:	9306      	str	r3, [sp, #24]
 800100a:	2302      	movs	r3, #2
 800100c:	9305      	str	r3, [sp, #20]
 800100e:	2300      	movs	r3, #0
 8001010:	9304      	str	r3, [sp, #16]
 8001012:	2308      	movs	r3, #8
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	2301      	movs	r3, #1
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2378      	movs	r3, #120	; 0x78
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	2301      	movs	r3, #1
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	a341      	add	r3, pc, #260	; (adr r3, 8001128 <main+0x178>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	4843      	ldr	r0, [pc, #268]	; (8001138 <main+0x188>)
 800102a:	f7ff fd83 	bl	8000b34 <SX1278_init>
	  			SX1278_LORA_BW_250KHZ, SX1278_LORA_CR_4_5,2, SX1278_LORA_CRC_DIS, 10);
//  printf("Done configuring LoRaModule\r\n");

  //Entry to Rx mode
  ret = SX1278_LoRaEntryRx(&SX1278, 225, 2000);
 800102e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001032:	21e1      	movs	r1, #225	; 0xe1
 8001034:	4840      	ldr	r0, [pc, #256]	; (8001138 <main+0x188>)
 8001036:	f7ff fc42 	bl	80008be <SX1278_LoRaEntryRx>
 800103a:	4602      	mov	r2, r0
 800103c:	4b3f      	ldr	r3, [pc, #252]	; (800113c <main+0x18c>)
 800103e:	601a      	str	r2, [r3, #0]
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	483e      	ldr	r0, [pc, #248]	; (8001140 <main+0x190>)
 8001046:	f000 fe25 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2101      	movs	r1, #1
 800104e:	483c      	ldr	r0, [pc, #240]	; (8001140 <main+0x190>)
 8001050:	f000 fe20 	bl	8001c94 <HAL_GPIO_WritePin>
		switch(state){
 8001054:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <main+0x194>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d022      	beq.n	80010a2 <main+0xf2>
 800105c:	2b02      	cmp	r3, #2
 800105e:	d043      	beq.n	80010e8 <main+0x138>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d15d      	bne.n	8001120 <main+0x170>
			case 0:
				ret = SX1278_LoRaRxPacket(&SX1278, &rxpacket, &ack);
 8001064:	4a38      	ldr	r2, [pc, #224]	; (8001148 <main+0x198>)
 8001066:	4939      	ldr	r1, [pc, #228]	; (800114c <main+0x19c>)
 8001068:	4833      	ldr	r0, [pc, #204]	; (8001138 <main+0x188>)
 800106a:	f7ff fc8d 	bl	8000988 <SX1278_LoRaRxPacket>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b32      	ldr	r3, [pc, #200]	; (800113c <main+0x18c>)
 8001074:	601a      	str	r2, [r3, #0]
				retry = rxpacket.retry;
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <main+0x19c>)
 8001078:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800107c:	461a      	mov	r2, r3
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <main+0x1a0>)
 8001080:	601a      	str	r2, [r3, #0]
				if (ret> 0)
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <main+0x18c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	dd07      	ble.n	800109a <main+0xea>
					{state = 1;
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <main+0x194>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001090:	2102      	movs	r1, #2
 8001092:	482b      	ldr	r0, [pc, #172]	; (8001140 <main+0x190>)
 8001094:	f000 fe16 	bl	8001cc4 <HAL_GPIO_TogglePin>
					}
				else state = 2;
				break;
 8001098:	e042      	b.n	8001120 <main+0x170>
				else state = 2;
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <main+0x194>)
 800109c:	2202      	movs	r2, #2
 800109e:	601a      	str	r2, [r3, #0]
				break;
 80010a0:	e03e      	b.n	8001120 <main+0x170>
			case 1:
				retack = SX1278_LoRaEntryTx(&SX1278, 255, 2000);
 80010a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010a6:	21ff      	movs	r1, #255	; 0xff
 80010a8:	4823      	ldr	r0, [pc, #140]	; (8001138 <main+0x188>)
 80010aa:	f7ff fcae 	bl	8000a0a <SX1278_LoRaEntryTx>
 80010ae:	4602      	mov	r2, r0
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <main+0x1a4>)
 80010b2:	601a      	str	r2, [r3, #0]
				retack = SX1278_LoRaTxPacketACK(&SX1278, &rxpacket, &ack, 2000);
 80010b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010b8:	4a23      	ldr	r2, [pc, #140]	; (8001148 <main+0x198>)
 80010ba:	4924      	ldr	r1, [pc, #144]	; (800114c <main+0x19c>)
 80010bc:	481e      	ldr	r0, [pc, #120]	; (8001138 <main+0x188>)
 80010be:	f7ff fcfc 	bl	8000aba <SX1278_LoRaTxPacketACK>
 80010c2:	4602      	mov	r2, r0
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <main+0x1a4>)
 80010c6:	601a      	str	r2, [r3, #0]
				if (retack == 1) {
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <main+0x1a4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d107      	bne.n	80010e0 <main+0x130>
					state = 2;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <main+0x194>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80010d6:	2101      	movs	r1, #1
 80010d8:	4819      	ldr	r0, [pc, #100]	; (8001140 <main+0x190>)
 80010da:	f000 fdf3 	bl	8001cc4 <HAL_GPIO_TogglePin>
				}
				else state = 1;
				break;
 80010de:	e01f      	b.n	8001120 <main+0x170>
				else state = 1;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <main+0x194>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
				break;
 80010e6:	e01b      	b.n	8001120 <main+0x170>
			case 2:
				HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f000 fb45 	bl	8001778 <HAL_Delay>
				ret = SX1278_LoRaEntryRx(&SX1278, 255, 2000);
 80010ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010f2:	21ff      	movs	r1, #255	; 0xff
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <main+0x188>)
 80010f6:	f7ff fbe2 	bl	80008be <SX1278_LoRaEntryRx>
 80010fa:	4602      	mov	r2, r0
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <main+0x18c>)
 80010fe:	601a      	str	r2, [r3, #0]
				HAL_Delay(400);
 8001100:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001104:	f000 fb38 	bl	8001778 <HAL_Delay>
				if (ret == 1) state = 0;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <main+0x18c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d103      	bne.n	8001118 <main+0x168>
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <main+0x194>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
				else state = 2;
				break;
 8001116:	e002      	b.n	800111e <main+0x16e>
				else state = 2;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <main+0x194>)
 800111a:	2202      	movs	r2, #2
 800111c:	601a      	str	r2, [r3, #0]
				break;
 800111e:	bf00      	nop
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001120:	e78e      	b.n	8001040 <main+0x90>
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	19cf0e40 	.word	0x19cf0e40
 800112c:	00000000 	.word	0x00000000
 8001130:	200003dc 	.word	0x200003dc
 8001134:	200003fc 	.word	0x200003fc
 8001138:	200002b8 	.word	0x200002b8
 800113c:	200003d8 	.word	0x200003d8
 8001140:	48000400 	.word	0x48000400
 8001144:	2000002c 	.word	0x2000002c
 8001148:	20000034 	.word	0x20000034
 800114c:	200001ac 	.word	0x200001ac
 8001150:	20000144 	.word	0x20000144
 8001154:	20000140 	.word	0x20000140

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ae      	sub	sp, #184	; 0xb8
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001162:	2248      	movs	r2, #72	; 0x48
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fe66 	bl	8004e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2250      	movs	r2, #80	; 0x50
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fe56 	bl	8004e38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <SystemClock_Config+0xec>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001194:	4a2b      	ldr	r2, [pc, #172]	; (8001244 <SystemClock_Config+0xec>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <SystemClock_Config+0xec>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80011a8:	2322      	movs	r3, #34	; 0x22
 80011aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011c4:	2360      	movs	r3, #96	; 0x60
 80011c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 f923 	bl	8002420 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011e0:	f000 f832 	bl	8001248 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80011e4:	236f      	movs	r3, #111	; 0x6f
 80011e6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011e8:	2300      	movs	r3, #0
 80011ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fc96 	bl	8002b38 <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001212:	f000 f819 	bl	8001248 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 8001216:	f242 0301 	movw	r3, #8193	; 0x2001
 800121a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001224:	2310      	movs	r3, #16
 8001226:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f8c5 	bl	80033ba <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001236:	f000 f807 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800123a:	bf00      	nop
 800123c:	37b8      	adds	r7, #184	; 0xb8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	58000400 	.word	0x58000400

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124e:	e7fe      	b.n	800124e <Error_Handler+0x6>

08001250 <LL_AHB2_GRP1_EnableClock>:
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800125e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001274:	68fb      	ldr	r3, [r7, #12]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800128a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4313      	orrs	r3, r2
 8001298:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4013      	ands	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_SPI1_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <MX_SPI1_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_SPI1_Init+0x74>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_SPI1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_SPI1_Init+0x74>)
 80012ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_SPI1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_SPI1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_SPI1_Init+0x74>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI1_Init+0x74>)
 80012ea:	2218      	movs	r2, #24
 80012ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_SPI1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_SPI1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI1_Init+0x74>)
 8001302:	2207      	movs	r2, #7
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_SPI1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI1_Init+0x74>)
 800130e:	2208      	movs	r2, #8
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_SPI1_Init+0x74>)
 8001314:	f002 fad7 	bl	80038c6 <HAL_SPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800131e:	f7ff ff93 	bl	8001248 <Error_Handler>
  }

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200003fc 	.word	0x200003fc
 800132c:	40013000 	.word	0x40013000

08001330 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_SPI_MspInit+0x5c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d117      	bne.n	8001382 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001356:	f7ff ff94 	bl	8001282 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff ff78 	bl	8001250 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001360:	23c2      	movs	r3, #194	; 0xc2
 8001362:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001370:	2305      	movs	r3, #5
 8001372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f000 fb01 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40013000 	.word	0x40013000

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <NMI_Handler+0x4>

080013a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <HardFault_Handler+0x4>

080013aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <MemManage_Handler+0x4>

080013b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <BusFault_Handler+0x4>

080013b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f999 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <SystemInit+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <SystemInit+0xa0>)
 8001400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <SystemInit+0xa0>)
 8001406:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001422:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001426:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <SystemInit+0xa4>)
 8001434:	4013      	ands	r3, r2
 8001436:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001444:	f023 0305 	bic.w	r3, r3, #5
 8001448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <SystemInit+0xa8>)
 8001466:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <SystemInit+0xa8>)
 800146e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	faf6fefb 	.word	0xfaf6fefb
 800149c:	22041000 	.word	0x22041000

080014a0 <LL_AHB2_GRP1_EnableClock>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c4:	68fb      	ldr	r3, [r7, #12]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_APB2_GRP1_EnableClock>:
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_USART1_UART_Init+0x90>)
 800150a:	4a23      	ldr	r2, [pc, #140]	; (8001598 <MX_USART1_UART_Init+0x94>)
 800150c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_USART1_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_USART1_UART_Init+0x90>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_USART1_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154c:	4811      	ldr	r0, [pc, #68]	; (8001594 <MX_USART1_UART_Init+0x90>)
 800154e:	f002 ff69 	bl	8004424 <HAL_UART_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001558:	f7ff fe76 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800155c:	2100      	movs	r1, #0
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001560:	f003 fb61 	bl	8004c26 <HAL_UARTEx_SetTxFifoThreshold>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800156a:	f7ff fe6d 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001572:	f003 fb96 	bl	8004ca2 <HAL_UARTEx_SetRxFifoThreshold>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800157c:	f7ff fe64 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_USART1_UART_Init+0x90>)
 8001582:	f003 fb17 	bl	8004bb4 <HAL_UARTEx_DisableFifoMode>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800158c:	f7ff fe5c 	bl	8001248 <Error_Handler>
  }

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000460 	.word	0x20000460
 8001598:	40013800 	.word	0x40013800

0800159c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_UART_MspInit+0x5c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d118      	bne.n	80015f0 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015c2:	f7ff ff86 	bl	80014d2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff ff6a 	bl	80014a0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015de:	2307      	movs	r3, #7
 80015e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f000 f9ca 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40013800 	.word	0x40013800

080015fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001600:	3304      	adds	r3, #4

08001602 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001602:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001604:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001606:	d3f9      	bcc.n	80015fc <CopyDataInit>
  bx lr
 8001608:	4770      	bx	lr

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800160a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800160c:	3004      	adds	r0, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800160e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>
  bx lr
 8001612:	4770      	bx	lr

08001614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001616:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001618:	f7ff feec 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <LoopForever+0x8>)
 800161e:	490c      	ldr	r1, [pc, #48]	; (8001650 <LoopForever+0xc>)
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <LoopForever+0x10>)
 8001622:	2300      	movs	r3, #0
 8001624:	f7ff ffed 	bl	8001602 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <LoopForever+0x14>)
 800162a:	490c      	ldr	r1, [pc, #48]	; (800165c <LoopForever+0x18>)
 800162c:	2300      	movs	r3, #0
 800162e:	f7ff ffee 	bl	800160e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001632:	480b      	ldr	r0, [pc, #44]	; (8001660 <LoopForever+0x1c>)
 8001634:	490b      	ldr	r1, [pc, #44]	; (8001664 <LoopForever+0x20>)
 8001636:	2300      	movs	r3, #0
 8001638:	f7ff ffe9 	bl	800160e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800163c:	f003 fbd8 	bl	8004df0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001640:	f7ff fcb6 	bl	8000fb0 <main>

08001644 <LoopForever>:

LoopForever:
  b LoopForever
 8001644:	e7fe      	b.n	8001644 <LoopForever>
 8001646:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001648:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800164c:	20000004 	.word	0x20000004
 8001650:	20000010 	.word	0x20000010
 8001654:	08004f84 	.word	0x08004f84
  INIT_BSS _sbss, _ebss
 8001658:	20000010 	.word	0x20000010
 800165c:	200004f0 	.word	0x200004f0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001660:	20030000 	.word	0x20030000
 8001664:	20030000 	.word	0x20030000

08001668 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_Init+0x3c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_Init+0x3c>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 f94c 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f80f 	bl	80016ac <HAL_InitTick>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	e001      	b.n	800169e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800169a:	f7ff fe79 	bl	8001390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800169e:	79fb      	ldrb	r3, [r7, #7]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	58004000 	.word	0x58004000

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_InitTick+0x6c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d024      	beq.n	800170a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016c0:	f001 fbe6 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_InitTick+0x6c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f946 	bl	800196a <HAL_SYSTICK_Config>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10f      	bne.n	8001704 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	d809      	bhi.n	80016fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ea:	2200      	movs	r2, #0
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	f04f 30ff 	mov.w	r0, #4294967295
 80016f2:	f000 f920 	bl	8001936 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_InitTick+0x70>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e007      	b.n	800170e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e004      	b.n	800170e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e001      	b.n	800170e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000000c 	.word	0x2000000c
 800171c:	20000008 	.word	0x20000008

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c
 8001744:	200004ec 	.word	0x200004ec

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200004ec 	.word	0x200004ec

08001760 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetTickPrio+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff ffe2 	bl	8001748 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_Delay+0x40>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffd2 	bl	8001748 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
    {
    }
  }
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000000c 	.word	0x2000000c

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff47 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff5e 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff90 	bl	8001874 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5f 	bl	8001820 <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffb2 	bl	80018dc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e14c      	b.n	8001c2e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 813e 	beq.w	8001c28 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d00b      	beq.n	80019cc <HAL_GPIO_Init+0x48>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d007      	beq.n	80019cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	2b11      	cmp	r3, #17
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b12      	cmp	r3, #18
 80019ca:	d130      	bne.n	8001a2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a02:	2201      	movs	r2, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 0201 	and.w	r2, r3, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0xea>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d123      	bne.n	8001ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	220f      	movs	r2, #15
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	6939      	ldr	r1, [r7, #16]
 8001ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0203 	and.w	r2, r3, #3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8098 	beq.w	8001c28 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001af8:	4a54      	ldr	r2, [pc, #336]	; (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b22:	d019      	beq.n	8001b58 <HAL_GPIO_Init+0x1d4>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <HAL_GPIO_Init+0x1d0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <HAL_GPIO_Init+0x1cc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2d4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_GPIO_Init+0x1c8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_GPIO_Init+0x2d8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_GPIO_Init+0x1c4>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e008      	b.n	8001b5a <HAL_GPIO_Init+0x1d6>
 8001b48:	2307      	movs	r3, #7
 8001b4a:	e006      	b.n	8001b5a <HAL_GPIO_Init+0x1d6>
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e004      	b.n	8001b5a <HAL_GPIO_Init+0x1d6>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x1d6>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_GPIO_Init+0x1d6>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	f002 0203 	and.w	r2, r2, #3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4093      	lsls	r3, r2
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6a:	4938      	ldr	r1, [pc, #224]	; (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b9e:	4a30      	ldr	r2, [pc, #192]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f47f aeab 	bne.w	8001994 <HAL_GPIO_Init+0x10>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	58000800 	.word	0x58000800

08001c64 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca4:	787b      	ldrb	r3, [r7, #1]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43d9      	mvns	r1, r3
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	58000400 	.word	0x58000400

08001d18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	58000400 	.word	0x58000400

08001d34 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d46:	d101      	bne.n	8001d4c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001da6:	d101      	bne.n	8001dac <LL_RCC_HSE_IsReady+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_RCC_HSE_IsReady+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d101      	bne.n	8001e0c <LL_RCC_HSI_IsReady+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_RCC_HSI_IsReady+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d101      	bne.n	8001e9e <LL_RCC_HSI48_IsReady+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_RCC_HSI48_IsReady+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d101      	bne.n	8001f4a <LL_RCC_LSE_IsReady+0x18>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_RCC_LSE_IsReady+0x1a>
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d101      	bne.n	8001fb2 <LL_RCC_LSI1_IsReady+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_RCC_LSI1_IsReady+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d101      	bne.n	800201a <LL_RCC_LSI2_IsReady+0x18>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_RCC_LSI2_IsReady+0x1a>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002036:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d101      	bne.n	80020a6 <LL_RCC_MSI_IsReady+0x16>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_RCC_MSI_IsReady+0x18>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2bb0      	cmp	r3, #176	; 0xb0
 80020f0:	d901      	bls.n	80020f6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80020f2:	23b0      	movs	r3, #176	; 0xb0
 80020f4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80020f6:	687b      	ldr	r3, [r7, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 0203 	bic.w	r2, r3, #3
 8002140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002260:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022f2:	d101      	bne.n	80022f8 <LL_RCC_PLL_IsReady+0x18>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <LL_RCC_PLL_IsReady+0x1a>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0303 	and.w	r3, r3, #3
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d101      	bne.n	800237e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800239e:	d101      	bne.n	80023a4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d101      	bne.n	80023ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80023da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e8:	d101      	bne.n	80023ee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800240c:	d101      	bne.n	8002412 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b08d      	sub	sp, #52	; 0x34
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e37e      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8092 	beq.w	8002564 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002440:	f7ff fe89 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002444:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002446:	f7ff ff82 	bl	800234e <LL_RCC_PLL_GetMainSource>
 800244a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x3e>
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d14c      	bne.n	80024f2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	2b01      	cmp	r3, #1
 800245c:	d149      	bne.n	80024f2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245e:	f7ff fe17 	bl	8002090 <LL_RCC_MSI_IsReady>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_OscConfig+0x54>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e35d      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002478:	f7ff fe2f 	bl	80020da <LL_RCC_MSI_GetRange>
 800247c:	4603      	mov	r3, r0
 800247e:	429c      	cmp	r4, r3
 8002480:	d914      	bls.n	80024ac <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fd42 	bl	8002f10 <RCC_SetFlashLatencyFromMSIRange>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e34c      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fe09 	bl	80020b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fe2d 	bl	8002104 <LL_RCC_MSI_SetCalibTrimming>
 80024aa:	e013      	b.n	80024d4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fdfe 	bl	80020b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe22 	bl	8002104 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fd23 	bl	8002f10 <RCC_SetFlashLatencyFromMSIRange>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e32d      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024d4:	f000 fcdc 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4bb3      	ldr	r3, [pc, #716]	; (80027a8 <HAL_RCC_OscConfig+0x388>)
 80024dc:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024de:	4bb3      	ldr	r3, [pc, #716]	; (80027ac <HAL_RCC_OscConfig+0x38c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f8e2 	bl	80016ac <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d039      	beq.n	8002562 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e31e      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01e      	beq.n	8002538 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024fa:	f7ff fdab 	bl	8002054 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024fe:	f7ff f923 	bl	8001748 <HAL_GetTick>
 8002502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002506:	f7ff f91f 	bl	8001748 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e30b      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002518:	f7ff fdba 	bl	8002090 <LL_RCC_MSI_IsReady>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f1      	beq.n	8002506 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fdc3 	bl	80020b2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fde7 	bl	8002104 <LL_RCC_MSI_SetCalibTrimming>
 8002536:	e015      	b.n	8002564 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002538:	f7ff fd9b 	bl	8002072 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800253c:	f7ff f904 	bl	8001748 <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002544:	f7ff f900 	bl	8001748 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e2ec      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002556:	f7ff fd9b 	bl	8002090 <LL_RCC_MSI_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f1      	bne.n	8002544 <HAL_RCC_OscConfig+0x124>
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d04e      	beq.n	800260e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002570:	f7ff fdf1 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002574:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002576:	f7ff feea 	bl	800234e <LL_RCC_PLL_GetMainSource>
 800257a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x16e>
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	2b0c      	cmp	r3, #12
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d10a      	bne.n	80025a4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	f7ff fc01 	bl	8001d94 <LL_RCC_HSE_IsReady>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d039      	beq.n	800260c <HAL_RCC_OscConfig+0x1ec>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d135      	bne.n	800260c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e2c5      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_OscConfig+0x194>
 80025ae:	f7ff fbd3 	bl	8001d58 <LL_RCC_HSE_Enable>
 80025b2:	e001      	b.n	80025b8 <HAL_RCC_OscConfig+0x198>
 80025b4:	f7ff fbdf 	bl	8001d76 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d012      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff f8c2 	bl	8001748 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff f8be 	bl	8001748 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e2aa      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80025da:	f7ff fbdb 	bl	8001d94 <LL_RCC_HSE_IsReady>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f1      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1a8>
 80025e4:	e013      	b.n	800260e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff f8af 	bl	8001748 <HAL_GetTick>
 80025ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ee:	f7ff f8ab 	bl	8001748 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e297      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002600:	f7ff fbc8 	bl	8001d94 <LL_RCC_HSE_IsReady>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f1      	bne.n	80025ee <HAL_RCC_OscConfig+0x1ce>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d051      	beq.n	80026be <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261a:	f7ff fd9c 	bl	8002156 <LL_RCC_GetSysClkSource>
 800261e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002620:	f7ff fe95 	bl	800234e <LL_RCC_PLL_GetMainSource>
 8002624:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x218>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d113      	bne.n	800265a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d110      	bne.n	800265a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002638:	f7ff fbdc 	bl	8001df4 <LL_RCC_HSI_IsReady>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x22e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e270      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fbe0 	bl	8001e18 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002658:	e031      	b.n	80026be <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d019      	beq.n	8002696 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002662:	f7ff fba9 	bl	8001db8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7ff f86f 	bl	8001748 <HAL_GetTick>
 800266a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266e:	f7ff f86b 	bl	8001748 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e257      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002680:	f7ff fbb8 	bl	8001df4 <LL_RCC_HSI_IsReady>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f1      	beq.n	800266e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fbc2 	bl	8001e18 <LL_RCC_HSI_SetCalibTrimming>
 8002694:	e013      	b.n	80026be <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002696:	f7ff fb9e 	bl	8001dd6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff f855 	bl	8001748 <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff f851 	bl	8001748 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e23d      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80026b4:	f7ff fb9e 	bl	8001df4 <LL_RCC_HSI_IsReady>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f1      	bne.n	80026a2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80a3 	beq.w	800281e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d076      	beq.n	80027ce <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d046      	beq.n	800277a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80026ec:	f7ff fc55 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d113      	bne.n	800271e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80026f6:	f7ff fc2e 	bl	8001f56 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026fa:	f7ff f825 	bl	8001748 <HAL_GetTick>
 80026fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002702:	f7ff f821 	bl	8001748 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e20d      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002714:	f7ff fc41 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f1      	beq.n	8002702 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800271e:	f7ff fc4e 	bl	8001fbe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7ff f811 	bl	8001748 <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800272a:	f7ff f80d 	bl	8001748 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1f9      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800273c:	f7ff fc61 	bl	8002002 <LL_RCC_LSI2_IsReady>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f1      	beq.n	800272a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fc6b 	bl	8002026 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002750:	f7ff fc12 	bl	8001f78 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fff8 	bl	8001748 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800275c:	f7fe fff4 	bl	8001748 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e1e0      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800276e:	f7ff fc14 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f1      	bne.n	800275c <HAL_RCC_OscConfig+0x33c>
 8002778:	e051      	b.n	800281e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800277a:	f7ff fbec 	bl	8001f56 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe ffe3 	bl	8001748 <HAL_GetTick>
 8002782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002786:	f7fe ffdf 	bl	8001748 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1cb      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002798:	f7ff fbff 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f1      	beq.n	8002786 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80027a2:	f7ff fc1d 	bl	8001fe0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80027a6:	e00c      	b.n	80027c2 <HAL_RCC_OscConfig+0x3a2>
 80027a8:	20000004 	.word	0x20000004
 80027ac:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027b0:	f7fe ffca 	bl	8001748 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1b6      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80027c2:	f7ff fc1e 	bl	8002002 <LL_RCC_LSI2_IsReady>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f1      	bne.n	80027b0 <HAL_RCC_OscConfig+0x390>
 80027cc:	e027      	b.n	800281e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80027ce:	f7ff fc07 	bl	8001fe0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe ffb9 	bl	8001748 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027da:	f7fe ffb5 	bl	8001748 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1a1      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80027ec:	f7ff fc09 	bl	8002002 <LL_RCC_LSI2_IsReady>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f1      	bne.n	80027da <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80027f6:	f7ff fbbf 	bl	8001f78 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe ffa5 	bl	8001748 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002802:	f7fe ffa1 	bl	8001748 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e18d      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002814:	f7ff fbc1 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f1      	bne.n	8002802 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d05b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282a:	4bb5      	ldr	r3, [pc, #724]	; (8002b00 <HAL_RCC_OscConfig+0x6e0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d114      	bne.n	8002860 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002836:	f7ff fa5f 	bl	8001cf8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe ff85 	bl	8001748 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe ff81 	bl	8001748 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e16d      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002854:	4baa      	ldr	r3, [pc, #680]	; (8002b00 <HAL_RCC_OscConfig+0x6e0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d102      	bne.n	800286e <HAL_RCC_OscConfig+0x44e>
 8002868:	f7ff fb1f 	bl	8001eaa <LL_RCC_LSE_Enable>
 800286c:	e00c      	b.n	8002888 <HAL_RCC_OscConfig+0x468>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d104      	bne.n	8002880 <HAL_RCC_OscConfig+0x460>
 8002876:	f7ff fb3a 	bl	8001eee <LL_RCC_LSE_EnableBypass>
 800287a:	f7ff fb16 	bl	8001eaa <LL_RCC_LSE_Enable>
 800287e:	e003      	b.n	8002888 <HAL_RCC_OscConfig+0x468>
 8002880:	f7ff fb24 	bl	8001ecc <LL_RCC_LSE_Disable>
 8002884:	f7ff fb44 	bl	8001f10 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d014      	beq.n	80028ba <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe ff5a 	bl	8001748 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe ff56 	bl	8001748 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e140      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80028ae:	f7ff fb40 	bl	8001f32 <LL_RCC_LSE_IsReady>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCC_OscConfig+0x478>
 80028b8:	e013      	b.n	80028e2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe ff45 	bl	8001748 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe ff41 	bl	8001748 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e12b      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80028d8:	f7ff fb2b 	bl	8001f32 <LL_RCC_LSE_IsReady>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ef      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d02c      	beq.n	8002948 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d014      	beq.n	8002920 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028f6:	f7ff faa4 	bl	8001e42 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe ff25 	bl	8001748 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002902:	f7fe ff21 	bl	8001748 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e10d      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002914:	f7ff fab7 	bl	8001e86 <LL_RCC_HSI48_IsReady>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f1      	beq.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 800291e:	e013      	b.n	8002948 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002920:	f7ff faa0 	bl	8001e64 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe ff10 	bl	8001748 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292c:	f7fe ff0c 	bl	8001748 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0f8      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800293e:	f7ff faa2 	bl	8001e86 <LL_RCC_HSI48_IsReady>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f1      	bne.n	800292c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80ee 	beq.w	8002b2e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	f7ff fc00 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002956:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	2b02      	cmp	r3, #2
 8002966:	f040 80af 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	429a      	cmp	r2, r3
 8002976:	d123      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d114      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10d      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d05d      	beq.n	8002a7c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d058      	beq.n	8002a78 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0ab      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d8:	f7ff fc73 	bl	80022c2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029dc:	f7fe feb4 	bl	8001748 <HAL_GetTick>
 80029e0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe feb0 	bl	8001748 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e09c      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ef      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <HAL_RCC_OscConfig+0x6e4>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a1c:	0212      	lsls	r2, r2, #8
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a30:	430a      	orrs	r2, r1
 8002a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a3a:	f7ff fc33 	bl	80022a4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a4e:	f7fe fe7b 	bl	8001748 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe fe77 	bl	8001748 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e063      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ef      	beq.n	8002a56 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a76:	e05a      	b.n	8002b2e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e059      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d151      	bne.n	8002b2e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a8a:	f7ff fc0b 	bl	80022a4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a9e:	f7fe fe53 	bl	8001748 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe fe4f 	bl	8001748 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e03b      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ef      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x686>
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d02d      	beq.n	8002b2a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	f7ff fbf8 	bl	80022c2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002adc:	f023 0303 	bic.w	r3, r3, #3
 8002ae0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aec:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fe fe27 	bl	8001748 <HAL_GetTick>
 8002afa:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	e00d      	b.n	8002b1a <HAL_RCC_OscConfig+0x6fa>
 8002afe:	bf00      	nop
 8002b00:	58000400 	.word	0x58000400
 8002b04:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fe1e 	bl	8001748 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ef      	bne.n	8002b08 <HAL_RCC_OscConfig+0x6e8>
 8002b28:	e001      	b.n	8002b2e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3734      	adds	r7, #52	; 0x34
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e12d      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b98      	ldr	r3, [pc, #608]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d91b      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b95      	ldr	r3, [pc, #596]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	4993      	ldr	r1, [pc, #588]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fded 	bl	8001748 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b72:	f7fe fde9 	bl	8001748 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e111      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b84:	4b8a      	ldr	r3, [pc, #552]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d1ef      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fae3 	bl	800216e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fdce 	bl	8001748 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bb0:	f7fe fdca 	bl	8001748 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0f2      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002bc2:	f7ff fbd0 	bl	8002366 <LL_RCC_IsActiveFlag_HPRE>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f1      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fada 	bl	8002196 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002be2:	f7fe fdb1 	bl	8001748 <HAL_GetTick>
 8002be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bea:	f7fe fdad 	bl	8001748 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e0d5      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002bfc:	f7ff fbc5 	bl	800238a <LL_RCC_IsActiveFlag_C2HPRE>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f1      	beq.n	8002bea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fad3 	bl	80021c2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fd94 	bl	8001748 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c24:	f7fe fd90 	bl	8001748 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0b8      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c36:	f7ff fbbb 	bl	80023b0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f1      	beq.n	8002c24 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d016      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff facd 	bl	80021f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c56:	f7fe fd77 	bl	8001748 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c5e:	f7fe fd73 	bl	8001748 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e09b      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c70:	f7ff fbb1 	bl	80023d6 <LL_RCC_IsActiveFlag_PPRE1>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f1      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fac3 	bl	8002218 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c92:	f7fe fd59 	bl	8001748 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c9a:	f7fe fd55 	bl	8001748 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e07d      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002cac:	f7ff fba5 	bl	80023fa <LL_RCC_IsActiveFlag_PPRE2>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f1      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d043      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d106      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002cca:	f7ff f863 	bl	8001d94 <LL_RCC_HSE_IsReady>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11e      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e067      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ce0:	f7ff fafe 	bl	80022e0 <LL_RCC_PLL_IsReady>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d113      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e05c      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002cf6:	f7ff f9cb 	bl	8002090 <LL_RCC_MSI_IsReady>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d108      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e051      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002d04:	f7ff f876 	bl	8001df4 <LL_RCC_HSI_IsReady>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e04a      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fa09 	bl	800212e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fd14 	bl	8001748 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fd10 	bl	8001748 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e036      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	f7ff fa0c 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d1ec      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d21b      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 0207 	bic.w	r2, r3, #7
 8002d60:	4913      	ldr	r1, [pc, #76]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe fcee 	bl	8001748 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d70:	f7fe fcea 	bl	8001748 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e012      	b.n	8002da8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_ClockConfig+0x278>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1ef      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d90:	f000 f87e 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_ClockConfig+0x27c>)
 8002d98:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002d9a:	f7fe fce1 	bl	8001760 <HAL_GetTickPrio>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fc83 	bl	80016ac <HAL_InitTick>
 8002da6:	4603      	mov	r3, r0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	58004000 	.word	0x58004000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbe:	f7ff f9ca 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002dc2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002dca:	f7ff f986 	bl	80020da <LL_RCC_MSI_GetRange>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e04a      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d102      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e044      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d10a      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002df2:	f7fe ff9f 	bl	8001d34 <LL_RCC_HSE_IsEnabledDiv2>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e039      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e036      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002e08:	f7ff faa1 	bl	800234e <LL_RCC_PLL_GetMainSource>
 8002e0c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d002      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x62>
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d003      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x68>
 8002e18:	e00d      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e1c:	60bb      	str	r3, [r7, #8]
        break;
 8002e1e:	e015      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e20:	f7fe ff88 	bl	8001d34 <LL_RCC_HSE_IsEnabledDiv2>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e2c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002e2e:	e00d      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e32:	60bb      	str	r3, [r7, #8]
        break;
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002e36:	f7ff f950 	bl	80020da <LL_RCC_MSI_GetRange>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	60bb      	str	r3, [r7, #8]
        break;
 8002e4a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002e4c:	f7ff fa5a 	bl	8002304 <LL_RCC_PLL_GetN>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	fb03 f402 	mul.w	r4, r3, r2
 8002e58:	f7ff fa6d 	bl	8002336 <LL_RCC_PLL_GetDivider>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	3301      	adds	r3, #1
 8002e62:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e66:	f7ff fa5a 	bl	800231e <LL_RCC_PLL_GetR>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	0f5b      	lsrs	r3, r3, #29
 8002e6e:	3301      	adds	r3, #1
 8002e70:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd90      	pop	{r4, r7, pc}
 8002e80:	08004f1c 	.word	0x08004f1c
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	003d0900 	.word	0x003d0900
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b598      	push	{r3, r4, r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e94:	f7ff ff90 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002e98:	4604      	mov	r4, r0
 8002e9a:	f7ff f9d1 	bl	8002240 <LL_RCC_GetAHBPrescaler>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd98      	pop	{r3, r4, r7, pc}
 8002eb4:	08004ebc 	.word	0x08004ebc

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b598      	push	{r3, r4, r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ebc:	f7ff ffe8 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	f7ff f9d7 	bl	8002274 <LL_RCC_GetAPB1Prescaler>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd98      	pop	{r3, r4, r7, pc}
 8002ee0:	08004efc 	.word	0x08004efc

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b598      	push	{r3, r4, r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ee8:	f7ff ffd2 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eec:	4604      	mov	r4, r0
 8002eee:	f7ff f9cd 	bl	800228c <LL_RCC_GetAPB2Prescaler>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	0adb      	lsrs	r3, r3, #11
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd98      	pop	{r3, r4, r7, pc}
 8002f0c:	08004efc 	.word	0x08004efc

08002f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2bb0      	cmp	r3, #176	; 0xb0
 8002f1c:	d903      	bls.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e007      	b.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002f36:	f7ff f98f 	bl	8002258 <LL_RCC_GetAHB4Prescaler>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	0c9c      	lsrs	r4, r3, #18
 8002f5a:	f7fe fedd 	bl	8001d18 <HAL_PWREx_GetVoltageRange>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4619      	mov	r1, r3
 8002f62:	4620      	mov	r0, r4
 8002f64:	f000 f80c 	bl	8002f80 <RCC_SetFlashLatency>
 8002f68:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}
 8002f72:	bf00      	nop
 8002f74:	08004f1c 	.word	0x08004f1c
 8002f78:	08004ebc 	.word	0x08004ebc
 8002f7c:	431bde83 	.word	0x431bde83

08002f80 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b093      	sub	sp, #76	; 0x4c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <RCC_SetFlashLatency+0xf0>)
 8002f8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002f96:	4a37      	ldr	r2, [pc, #220]	; (8003074 <RCC_SetFlashLatency+0xf4>)
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002fa2:	4b35      	ldr	r3, [pc, #212]	; (8003078 <RCC_SetFlashLatency+0xf8>)
 8002fa4:	f107 040c 	add.w	r4, r7, #12
 8002fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002faa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002fae:	2300      	movs	r3, #0
 8002fb0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb8:	d11c      	bne.n	8002ff4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fbe:	e015      	b.n	8002fec <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002fc8:	4413      	add	r3, r2
 8002fca:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d808      	bhi.n	8002fe6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002fdc:	4413      	add	r3, r2
 8002fde:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002fe4:	e022      	b.n	800302c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe8:	3301      	adds	r3, #1
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40
 8002fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d9e6      	bls.n	8002fc0 <RCC_SetFlashLatency+0x40>
 8002ff2:	e01b      	b.n	800302c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff8:	e015      	b.n	8003026 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003002:	4413      	add	r3, r2
 8003004:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d808      	bhi.n	8003020 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003016:	4413      	add	r3, r2
 8003018:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800301e:	e005      	b.n	800302c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003022:	3301      	adds	r3, #1
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003028:	2b02      	cmp	r3, #2
 800302a:	d9e6      	bls.n	8002ffa <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <RCC_SetFlashLatency+0xfc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 0207 	bic.w	r2, r3, #7
 8003034:	4911      	ldr	r1, [pc, #68]	; (800307c <RCC_SetFlashLatency+0xfc>)
 8003036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800303c:	f7fe fb84 	bl	8001748 <HAL_GetTick>
 8003040:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003042:	e008      	b.n	8003056 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003044:	f7fe fb80 	bl	8001748 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e007      	b.n	8003066 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <RCC_SetFlashLatency+0xfc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003060:	429a      	cmp	r2, r3
 8003062:	d1ef      	bne.n	8003044 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	374c      	adds	r7, #76	; 0x4c
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	08004e60 	.word	0x08004e60
 8003074:	08004e70 	.word	0x08004e70
 8003078:	08004e7c 	.word	0x08004e7c
 800307c:	58004000 	.word	0x58004000

08003080 <LL_RCC_LSE_IsEnabled>:
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <LL_RCC_LSE_IsEnabled+0x18>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <LL_RCC_LSE_IsEnabled+0x1a>
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_RCC_LSE_IsReady>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d101      	bne.n	80030bc <LL_RCC_LSE_IsReady+0x18>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <LL_RCC_LSE_IsReady+0x1a>
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_RCC_SetRFWKPClockSource>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_RCC_SetSMPSClockSource>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4313      	orrs	r3, r2
 800310e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_RCC_SetSMPSPrescaler>:
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800312e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4313      	orrs	r3, r2
 8003136:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_RCC_SetUSARTClockSource>:
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f023 0203 	bic.w	r2, r3, #3
 8003158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_RCC_SetLPUARTClockSource>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_RCC_SetI2CClockSource>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80031c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_RCC_SetLPTIMClockSource>:
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_RCC_SetSAIClockSource>:
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800321e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_RCC_SetRNGClockSource>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800324a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_RCC_SetCLK48ClockSource>:
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_SetUSBClockSource>:
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffe3 	bl	8003262 <LL_RCC_SetCLK48ClockSource>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <LL_RCC_SetADCClockSource>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_RCC_SetRTCClockSource>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80032d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_GetRTCClockSource>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_RCC_ForceBackupDomainReset>:
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800332e:	bf00      	nop
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_RCC_PLLSAI1_Enable>:
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800336c:	6013      	str	r3, [r2, #0]
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_RCC_PLLSAI1_Disable>:
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_RCC_PLLSAI1_IsReady>:
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a8:	d101      	bne.n	80033ae <LL_RCC_PLLSAI1_IsReady+0x18>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b088      	sub	sp, #32
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80033c2:	2300      	movs	r3, #0
 80033c4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033c6:	2300      	movs	r3, #0
 80033c8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d033      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033de:	d00c      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x40>
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e4:	d802      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033ea:	e017      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x62>
 80033ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f0:	d017      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80033f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033f6:	d016      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80033f8:	e010      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80033fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800340a:	e00d      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f947 	bl	80036a4 <RCCEx_PLLSAI1_ConfigNP>
 8003416:	4603      	mov	r3, r0
 8003418:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800341a:	e005      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	77fb      	strb	r3, [r7, #31]
        break;
 8003420:	e002      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	7ffb      	ldrb	r3, [r7, #31]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d105      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fee9 	bl	800320a <LL_RCC_SetSAIClockSource>
 8003438:	e001      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	7ffb      	ldrb	r3, [r7, #31]
 800343c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003446:	2b00      	cmp	r3, #0
 8003448:	d046      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800344a:	f7ff ff57 	bl	80032fc <LL_RCC_GetRTCClockSource>
 800344e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	429a      	cmp	r2, r3
 8003458:	d03c      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800345a:	f7fe fc4d 	bl	8001cf8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff31 	bl	80032d0 <LL_RCC_SetRTCClockSource>
 800346e:	e02e      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800347a:	f7ff ff4c 	bl	8003316 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800347e:	f7ff ff5b 	bl	8003338 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800349a:	f7ff fdf1 	bl	8003080 <LL_RCC_LSE_IsEnabled>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d114      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034a4:	f7fe f950 	bl	8001748 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80034aa:	e00b      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe f94c 	bl	8001748 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d902      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	77fb      	strb	r3, [r7, #31]
              break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80034c4:	f7ff fdee 	bl	80030a4 <LL_RCC_LSE_IsReady>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d1ee      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	77bb      	strb	r3, [r7, #30]
 80034d2:	e001      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7ffb      	ldrb	r3, [r7, #31]
 80034d6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fe2b 	bl	8003144 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fe36 	bl	8003170 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fe5e 	bl	80031d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fe53 	bl	80031d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe2b 	bl	800319c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe20 	bl	800319c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d022      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fe8e 	bl	800328e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357a:	d107      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003594:	d10b      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f8dd 	bl	800375a <RCCEx_PLLSAI1_ConfigNQ>
 80035a0:	4603      	mov	r3, r0
 80035a2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d02b      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c2:	d008      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035cc:	d003      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fe2b 	bl	8003236 <LL_RCC_SetRNGClockSource>
 80035e0:	e00a      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7ff fe22 	bl	8003236 <LL_RCC_SetRNGClockSource>
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff fe35 	bl	8003262 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003600:	d107      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800360c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003610:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361a:	2b00      	cmp	r3, #0
 800361c:	d022      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fe3e 	bl	80032a4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003630:	d107      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800364a:	d10b      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f8dd 	bl	8003810 <RCCEx_PLLSAI1_ConfigNR>
 8003656:	4603      	mov	r3, r0
 8003658:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800365a:	7ffb      	ldrb	r3, [r7, #31]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003660:	7ffb      	ldrb	r3, [r7, #31]
 8003662:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fd27 	bl	80030c8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fd46 	bl	800311c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fd2d 	bl	80030f4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800369a:	7fbb      	ldrb	r3, [r7, #30]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036b0:	f7ff fe62 	bl	8003378 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036b4:	f7fe f848 	bl	8001748 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036ba:	e009      	b.n	80036d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036bc:	f7fe f844 	bl	8001748 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	73fb      	strb	r3, [r7, #15]
      break;
 80036ce:	e004      	b.n	80036da <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036d0:	f7ff fe61 	bl	8003396 <LL_RCC_PLLSAI1_IsReady>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d137      	bne.n	8003750 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80036f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370a:	4313      	orrs	r3, r2
 800370c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800370e:	f7ff fe24 	bl	800335a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003712:	f7fe f819 	bl	8001748 <HAL_GetTick>
 8003716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003718:	e009      	b.n	800372e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800371a:	f7fe f815 	bl	8001748 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d902      	bls.n	800372e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	73fb      	strb	r3, [r7, #15]
        break;
 800372c:	e004      	b.n	8003738 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800372e:	f7ff fe32 	bl	8003396 <LL_RCC_PLLSAI1_IsReady>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d1f0      	bne.n	800371a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374c:	4313      	orrs	r3, r2
 800374e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003766:	f7ff fe07 	bl	8003378 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800376a:	f7fd ffed 	bl	8001748 <HAL_GetTick>
 800376e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003770:	e009      	b.n	8003786 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003772:	f7fd ffe9 	bl	8001748 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d902      	bls.n	8003786 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	73fb      	strb	r3, [r7, #15]
      break;
 8003784:	e004      	b.n	8003790 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003786:	f7ff fe06 	bl	8003396 <LL_RCC_PLLSAI1_IsReady>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d137      	bne.n	8003806 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037c0:	4313      	orrs	r3, r2
 80037c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037c4:	f7ff fdc9 	bl	800335a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd ffbe 	bl	8001748 <HAL_GetTick>
 80037cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ce:	e009      	b.n	80037e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d0:	f7fd ffba 	bl	8001748 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d902      	bls.n	80037e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	73fb      	strb	r3, [r7, #15]
        break;
 80037e2:	e004      	b.n	80037ee <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037e4:	f7ff fdd7 	bl	8003396 <LL_RCC_PLLSAI1_IsReady>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d1f0      	bne.n	80037d0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d108      	bne.n	8003806 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800381c:	f7ff fdac 	bl	8003378 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003820:	f7fd ff92 	bl	8001748 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003826:	e009      	b.n	800383c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003828:	f7fd ff8e 	bl	8001748 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	73fb      	strb	r3, [r7, #15]
      break;
 800383a:	e004      	b.n	8003846 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800383c:	f7ff fdab 	bl	8003396 <LL_RCC_PLLSAI1_IsReady>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d137      	bne.n	80038bc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003876:	4313      	orrs	r3, r2
 8003878:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800387a:	f7ff fd6e 	bl	800335a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387e:	f7fd ff63 	bl	8001748 <HAL_GetTick>
 8003882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003884:	e009      	b.n	800389a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003886:	f7fd ff5f 	bl	8001748 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d902      	bls.n	800389a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	73fb      	strb	r3, [r7, #15]
        break;
 8003898:	e004      	b.n	80038a4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800389a:	f7ff fd7c 	bl	8003396 <LL_RCC_PLLSAI1_IsReady>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d1f0      	bne.n	8003886 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b8:	4313      	orrs	r3, r2
 80038ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e095      	b.n	8003a04 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d108      	bne.n	80038f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e8:	d009      	beq.n	80038fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	61da      	str	r2, [r3, #28]
 80038f0:	e005      	b.n	80038fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fd fd09 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003934:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800393e:	d902      	bls.n	8003946 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e002      	b.n	800394c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003954:	d007      	beq.n	8003966 <HAL_SPI_Init+0xa0>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800395e:	d002      	beq.n	8003966 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	ea42 0103 	orr.w	r1, r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	f003 0204 	and.w	r2, r3, #4
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80039e2:	ea42 0103 	orr.w	r1, r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_Transmit+0x22>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e158      	b.n	8003ce0 <HAL_SPI_Transmit+0x2d4>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a36:	f7fd fe87 	bl	8001748 <HAL_GetTick>
 8003a3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a50:	e13d      	b.n	8003cce <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_SPI_Transmit+0x52>
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a62:	e134      	b.n	8003cce <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2203      	movs	r2, #3
 8003a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aae:	d10f      	bne.n	8003ad0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003abe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ace:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d007      	beq.n	8003aee <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af6:	d94b      	bls.n	8003b90 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0xfa>
 8003b00:	8afb      	ldrh	r3, [r7, #22]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d13e      	bne.n	8003b84 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	881a      	ldrh	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	1c9a      	adds	r2, r3, #2
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b2a:	e02b      	b.n	8003b84 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d112      	bne.n	8003b60 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b5e:	e011      	b.n	8003b84 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b60:	f7fd fdf2 	bl	8001748 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d803      	bhi.n	8003b78 <HAL_SPI_Transmit+0x16c>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d102      	bne.n	8003b7e <HAL_SPI_Transmit+0x172>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b82:	e0a4      	b.n	8003cce <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ce      	bne.n	8003b2c <HAL_SPI_Transmit+0x120>
 8003b8e:	e07c      	b.n	8003c8a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Transmit+0x192>
 8003b98:	8afb      	ldrh	r3, [r7, #22]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d170      	bne.n	8003c80 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d912      	bls.n	8003bce <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b02      	subs	r3, #2
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bcc:	e058      	b.n	8003c80 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bf4:	e044      	b.n	8003c80 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d12b      	bne.n	8003c5c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d912      	bls.n	8003c34 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	881a      	ldrh	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	1c9a      	adds	r2, r3, #2
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b02      	subs	r3, #2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c32:	e025      	b.n	8003c80 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c5a:	e011      	b.n	8003c80 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5c:	f7fd fd74 	bl	8001748 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d803      	bhi.n	8003c74 <HAL_SPI_Transmit+0x268>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Transmit+0x26e>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c7e:	e026      	b.n	8003cce <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1b5      	bne.n	8003bf6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fb62 	bl	8004358 <SPI_EndRxTxTransaction>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e000      	b.n	8003cce <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ccc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x26>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e1fb      	b.n	8004106 <HAL_SPI_TransmitReceive+0x41e>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d16:	f7fd fd17 	bl	8001748 <HAL_GetTick>
 8003d1a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d22:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d2e:	887b      	ldrh	r3, [r7, #2]
 8003d30:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d32:	7efb      	ldrb	r3, [r7, #27]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d00e      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x6e>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3e:	d106      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x66>
 8003d48:	7efb      	ldrb	r3, [r7, #27]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d003      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d54:	e1cd      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x80>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x80>
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d6e:	e1c0      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d003      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	887a      	ldrh	r2, [r7, #2]
 8003daa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dc6:	d802      	bhi.n	8003dce <HAL_SPI_TransmitReceive+0xe6>
 8003dc8:	8a3b      	ldrh	r3, [r7, #16]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d908      	bls.n	8003de0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	e007      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d007      	beq.n	8003e0e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e16:	d97c      	bls.n	8003f12 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x13e>
 8003e20:	8a7b      	ldrh	r3, [r7, #18]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d169      	bne.n	8003efa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	1c9a      	adds	r2, r3, #2
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e4a:	e056      	b.n	8003efa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d11b      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x1aa>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d016      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x1aa>
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d113      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	1c9a      	adds	r2, r3, #2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d11c      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x1f2>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eda:	f7fd fc35 	bl	8001748 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d807      	bhi.n	8003efa <HAL_SPI_TransmitReceive+0x212>
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d003      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ef8:	e0fb      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1a3      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x164>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d19d      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x164>
 8003f10:	e0df      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x23a>
 8003f1a:	8a7b      	ldrh	r3, [r7, #18]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 80cb 	bne.w	80040b8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d912      	bls.n	8003f52 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	881a      	ldrh	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	1c9a      	adds	r2, r3, #2
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b02      	subs	r3, #2
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f50:	e0b2      	b.n	80040b8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f78:	e09e      	b.n	80040b8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d134      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x30a>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02f      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x30a>
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d12c      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d912      	bls.n	8003fc8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b02      	subs	r3, #2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fc6:	e012      	b.n	8003fee <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d148      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x3aa>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d042      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d923      	bls.n	8004060 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	b292      	uxth	r2, r2
 8004024:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b02      	subs	r3, #2
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d81f      	bhi.n	800408e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	e016      	b.n	800408e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f103 020c 	add.w	r2, r3, #12
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800408e:	2301      	movs	r3, #1
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004092:	f7fd fb59 	bl	8001748 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409e:	429a      	cmp	r2, r3
 80040a0:	d803      	bhi.n	80040aa <HAL_SPI_TransmitReceive+0x3c2>
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d102      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x3c8>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040b6:	e01c      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f af5b 	bne.w	8003f7a <HAL_SPI_TransmitReceive+0x292>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f af54 	bne.w	8003f7a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f93e 	bl	8004358 <SPI_EndRxTxTransaction>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d006      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	661a      	str	r2, [r3, #96]	; 0x60
 80040ee:	e000      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80040f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004106:	4618      	mov	r0, r3
 8004108:	3728      	adds	r7, #40	; 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800411c:	b2db      	uxtb	r3, r3
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800413c:	f7fd fb04 	bl	8001748 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4413      	add	r3, r2
 800414a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800414c:	f7fd fafc 	bl	8001748 <HAL_GetTick>
 8004150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	0d1b      	lsrs	r3, r3, #20
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	e054      	b.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d050      	beq.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800416c:	f7fd faec 	bl	8001748 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	429a      	cmp	r2, r3
 800417a:	d902      	bls.n	8004182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d13d      	bne.n	80041fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419a:	d111      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	d004      	beq.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d107      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c8:	d10f      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e017      	b.n	800422e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3b01      	subs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d19b      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000004 	.word	0x20000004

0800423c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800424a:	f7fd fa7d 	bl	8001748 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	4413      	add	r3, r2
 8004258:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800425a:	f7fd fa75 	bl	8001748 <HAL_GetTick>
 800425e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004260:	4b3c      	ldr	r3, [pc, #240]	; (8004354 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	00da      	lsls	r2, r3, #3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	0d1b      	lsrs	r3, r3, #20
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004278:	e05f      	b.n	800433a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004280:	d106      	bne.n	8004290 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d103      	bne.n	8004290 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d050      	beq.n	800433a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004298:	f7fd fa56 	bl	8001748 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d902      	bls.n	80042ae <SPI_WaitFifoStateUntilTimeout+0x72>
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d13d      	bne.n	800432a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c6:	d111      	bne.n	80042ec <SPI_WaitFifoStateUntilTimeout+0xb0>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d0:	d004      	beq.n	80042dc <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d107      	bne.n	80042ec <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f4:	d10f      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e010      	b.n	800434c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3b01      	subs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d197      	bne.n	800427a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000004 	.word	0x20000004

08004358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff ff63 	bl	800423c <SPI_WaitFifoStateUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e027      	b.n	80043dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff fec8 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e014      	b.n	80043dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff ff3c 	bl	800423c <SPI_WaitFifoStateUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e000      	b.n	80043dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <LL_RCC_GetUSARTClockSource>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4013      	ands	r3, r2
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_RCC_GetLPUARTClockSource>:
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4013      	ands	r3, r2
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e042      	b.n	80044bc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd f8a7 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2224      	movs	r2, #36	; 0x24
 8004452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f82c 	bl	80044c4 <UART_SetConfig>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e022      	b.n	80044bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fa2e 	bl	80048e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fab5 	bl	8004a24 <UART_CheckIdleState>
 80044ba:	4603      	mov	r3, r0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80044c8:	b088      	sub	sp, #32
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4ba4      	ldr	r3, [pc, #656]	; (800478c <UART_SetConfig+0x2c8>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	69f9      	ldr	r1, [r7, #28]
 8004504:	430b      	orrs	r3, r1
 8004506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a99      	ldr	r2, [pc, #612]	; (8004790 <UART_SetConfig+0x2cc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004542:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	69f9      	ldr	r1, [r7, #28]
 800454c:	430b      	orrs	r3, r1
 800454e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	f023 010f 	bic.w	r1, r3, #15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a8a      	ldr	r2, [pc, #552]	; (8004794 <UART_SetConfig+0x2d0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d121      	bne.n	80045b4 <UART_SetConfig+0xf0>
 8004570:	2003      	movs	r0, #3
 8004572:	f7ff ff37 	bl	80043e4 <LL_RCC_GetUSARTClockSource>
 8004576:	4603      	mov	r3, r0
 8004578:	2b03      	cmp	r3, #3
 800457a:	d817      	bhi.n	80045ac <UART_SetConfig+0xe8>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <UART_SetConfig+0xc0>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	08004595 	.word	0x08004595
 8004588:	080045a1 	.word	0x080045a1
 800458c:	0800459b 	.word	0x0800459b
 8004590:	080045a7 	.word	0x080045a7
 8004594:	2301      	movs	r3, #1
 8004596:	76fb      	strb	r3, [r7, #27]
 8004598:	e038      	b.n	800460c <UART_SetConfig+0x148>
 800459a:	2302      	movs	r3, #2
 800459c:	76fb      	strb	r3, [r7, #27]
 800459e:	e035      	b.n	800460c <UART_SetConfig+0x148>
 80045a0:	2304      	movs	r3, #4
 80045a2:	76fb      	strb	r3, [r7, #27]
 80045a4:	e032      	b.n	800460c <UART_SetConfig+0x148>
 80045a6:	2308      	movs	r3, #8
 80045a8:	76fb      	strb	r3, [r7, #27]
 80045aa:	e02f      	b.n	800460c <UART_SetConfig+0x148>
 80045ac:	2310      	movs	r3, #16
 80045ae:	76fb      	strb	r3, [r7, #27]
 80045b0:	bf00      	nop
 80045b2:	e02b      	b.n	800460c <UART_SetConfig+0x148>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a75      	ldr	r2, [pc, #468]	; (8004790 <UART_SetConfig+0x2cc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d124      	bne.n	8004608 <UART_SetConfig+0x144>
 80045be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80045c2:	f7ff ff1f 	bl	8004404 <LL_RCC_GetLPUARTClockSource>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045cc:	d012      	beq.n	80045f4 <UART_SetConfig+0x130>
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d802      	bhi.n	80045da <UART_SetConfig+0x116>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <UART_SetConfig+0x124>
 80045d8:	e012      	b.n	8004600 <UART_SetConfig+0x13c>
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d006      	beq.n	80045ee <UART_SetConfig+0x12a>
 80045e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e4:	d009      	beq.n	80045fa <UART_SetConfig+0x136>
 80045e6:	e00b      	b.n	8004600 <UART_SetConfig+0x13c>
 80045e8:	2300      	movs	r3, #0
 80045ea:	76fb      	strb	r3, [r7, #27]
 80045ec:	e00e      	b.n	800460c <UART_SetConfig+0x148>
 80045ee:	2302      	movs	r3, #2
 80045f0:	76fb      	strb	r3, [r7, #27]
 80045f2:	e00b      	b.n	800460c <UART_SetConfig+0x148>
 80045f4:	2304      	movs	r3, #4
 80045f6:	76fb      	strb	r3, [r7, #27]
 80045f8:	e008      	b.n	800460c <UART_SetConfig+0x148>
 80045fa:	2308      	movs	r3, #8
 80045fc:	76fb      	strb	r3, [r7, #27]
 80045fe:	e005      	b.n	800460c <UART_SetConfig+0x148>
 8004600:	2310      	movs	r3, #16
 8004602:	76fb      	strb	r3, [r7, #27]
 8004604:	bf00      	nop
 8004606:	e001      	b.n	800460c <UART_SetConfig+0x148>
 8004608:	2310      	movs	r3, #16
 800460a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5f      	ldr	r2, [pc, #380]	; (8004790 <UART_SetConfig+0x2cc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	f040 808e 	bne.w	8004734 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004618:	7efb      	ldrb	r3, [r7, #27]
 800461a:	2b08      	cmp	r3, #8
 800461c:	d823      	bhi.n	8004666 <UART_SetConfig+0x1a2>
 800461e:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <UART_SetConfig+0x160>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	08004649 	.word	0x08004649
 8004628:	08004667 	.word	0x08004667
 800462c:	08004651 	.word	0x08004651
 8004630:	08004667 	.word	0x08004667
 8004634:	08004657 	.word	0x08004657
 8004638:	08004667 	.word	0x08004667
 800463c:	08004667 	.word	0x08004667
 8004640:	08004667 	.word	0x08004667
 8004644:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004648:	f7fe fc36 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 800464c:	6178      	str	r0, [r7, #20]
        break;
 800464e:	e00f      	b.n	8004670 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b51      	ldr	r3, [pc, #324]	; (8004798 <UART_SetConfig+0x2d4>)
 8004652:	617b      	str	r3, [r7, #20]
        break;
 8004654:	e00c      	b.n	8004670 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fbaf 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 800465a:	6178      	str	r0, [r7, #20]
        break;
 800465c:	e008      	b.n	8004670 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	617b      	str	r3, [r7, #20]
        break;
 8004664:	e004      	b.n	8004670 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	76bb      	strb	r3, [r7, #26]
        break;
 800466e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 811c 	beq.w	80048b0 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	4a47      	ldr	r2, [pc, #284]	; (800479c <UART_SetConfig+0x2d8>)
 800467e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004682:	461a      	mov	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fbb3 f3f2 	udiv	r3, r3, r2
 800468a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	d305      	bcc.n	80046a8 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d902      	bls.n	80046ae <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	76bb      	strb	r3, [r7, #26]
 80046ac:	e100      	b.n	80048b0 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	4a38      	ldr	r2, [pc, #224]	; (800479c <UART_SetConfig+0x2d8>)
 80046bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f04f 0400 	mov.w	r4, #0
 80046c6:	461a      	mov	r2, r3
 80046c8:	4623      	mov	r3, r4
 80046ca:	f7fb fd59 	bl	8000180 <__aeabi_uldivmod>
 80046ce:	4603      	mov	r3, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	4619      	mov	r1, r3
 80046d4:	4622      	mov	r2, r4
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	f04f 0400 	mov.w	r4, #0
 80046de:	0214      	lsls	r4, r2, #8
 80046e0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046e4:	020b      	lsls	r3, r1, #8
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6852      	ldr	r2, [r2, #4]
 80046ea:	0852      	lsrs	r2, r2, #1
 80046ec:	4611      	mov	r1, r2
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	eb13 0b01 	adds.w	fp, r3, r1
 80046f6:	eb44 0c02 	adc.w	ip, r4, r2
 80046fa:	4658      	mov	r0, fp
 80046fc:	4661      	mov	r1, ip
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f04f 0400 	mov.w	r4, #0
 8004706:	461a      	mov	r2, r3
 8004708:	4623      	mov	r3, r4
 800470a:	f7fb fd39 	bl	8000180 <__aeabi_uldivmod>
 800470e:	4603      	mov	r3, r0
 8004710:	460c      	mov	r4, r1
 8004712:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471a:	d308      	bcc.n	800472e <UART_SetConfig+0x26a>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004722:	d204      	bcs.n	800472e <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e0c0      	b.n	80048b0 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	76bb      	strb	r3, [r7, #26]
 8004732:	e0bd      	b.n	80048b0 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	d169      	bne.n	8004812 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800473e:	7efb      	ldrb	r3, [r7, #27]
 8004740:	3b01      	subs	r3, #1
 8004742:	2b07      	cmp	r3, #7
 8004744:	d82c      	bhi.n	80047a0 <UART_SetConfig+0x2dc>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x288>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	0800476d 	.word	0x0800476d
 8004750:	08004775 	.word	0x08004775
 8004754:	080047a1 	.word	0x080047a1
 8004758:	0800477b 	.word	0x0800477b
 800475c:	080047a1 	.word	0x080047a1
 8004760:	080047a1 	.word	0x080047a1
 8004764:	080047a1 	.word	0x080047a1
 8004768:	08004783 	.word	0x08004783
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800476c:	f7fe fbba 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 8004770:	6178      	str	r0, [r7, #20]
        break;
 8004772:	e01a      	b.n	80047aa <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <UART_SetConfig+0x2d4>)
 8004776:	617b      	str	r3, [r7, #20]
        break;
 8004778:	e017      	b.n	80047aa <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477a:	f7fe fb1d 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 800477e:	6178      	str	r0, [r7, #20]
        break;
 8004780:	e013      	b.n	80047aa <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004786:	617b      	str	r3, [r7, #20]
        break;
 8004788:	e00f      	b.n	80047aa <UART_SetConfig+0x2e6>
 800478a:	bf00      	nop
 800478c:	cfff69f3 	.word	0xcfff69f3
 8004790:	40008000 	.word	0x40008000
 8004794:	40013800 	.word	0x40013800
 8004798:	00f42400 	.word	0x00f42400
 800479c:	08004f5c 	.word	0x08004f5c
      default:
        pclk = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	76bb      	strb	r3, [r7, #26]
        break;
 80047a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d07f      	beq.n	80048b0 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	4a48      	ldr	r2, [pc, #288]	; (80048d8 <UART_SetConfig+0x414>)
 80047b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ba:	461a      	mov	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c2:	005a      	lsls	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	441a      	add	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d916      	bls.n	800480c <UART_SetConfig+0x348>
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d212      	bcs.n	800480c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f023 030f 	bic.w	r3, r3, #15
 80047ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	89fb      	ldrh	r3, [r7, #14]
 80047fe:	4313      	orrs	r3, r2
 8004800:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	89fa      	ldrh	r2, [r7, #14]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	e051      	b.n	80048b0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	76bb      	strb	r3, [r7, #26]
 8004810:	e04e      	b.n	80048b0 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004812:	7efb      	ldrb	r3, [r7, #27]
 8004814:	3b01      	subs	r3, #1
 8004816:	2b07      	cmp	r3, #7
 8004818:	d821      	bhi.n	800485e <UART_SetConfig+0x39a>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x35c>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004841 	.word	0x08004841
 8004824:	08004849 	.word	0x08004849
 8004828:	0800485f 	.word	0x0800485f
 800482c:	0800484f 	.word	0x0800484f
 8004830:	0800485f 	.word	0x0800485f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800485f 	.word	0x0800485f
 800483c:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe fb50 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 8004844:	6178      	str	r0, [r7, #20]
        break;
 8004846:	e00f      	b.n	8004868 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b24      	ldr	r3, [pc, #144]	; (80048dc <UART_SetConfig+0x418>)
 800484a:	617b      	str	r3, [r7, #20]
        break;
 800484c:	e00c      	b.n	8004868 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7fe fab3 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8004852:	6178      	str	r0, [r7, #20]
        break;
 8004854:	e008      	b.n	8004868 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	617b      	str	r3, [r7, #20]
        break;
 800485c:	e004      	b.n	8004868 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	76bb      	strb	r3, [r7, #26]
        break;
 8004866:	bf00      	nop
    }

    if (pclk != 0U)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d020      	beq.n	80048b0 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <UART_SetConfig+0x414>)
 8004874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004878:	461a      	mov	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	441a      	add	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	b29b      	uxth	r3, r3
 8004892:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b0f      	cmp	r3, #15
 8004898:	d908      	bls.n	80048ac <UART_SetConfig+0x3e8>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d204      	bcs.n	80048ac <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	e001      	b.n	80048b0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80048cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80048d8:	08004f5c 	.word	0x08004f5c
 80048dc:	00f42400 	.word	0x00f42400

080048e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049de:	d10a      	bne.n	80049f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a34:	f7fc fe88 	bl	8001748 <HAL_GetTick>
 8004a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d10e      	bne.n	8004a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f82c 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e022      	b.n	8004aac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d10e      	bne.n	8004a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f816 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00c      	b.n	8004aac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac4:	e062      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d05e      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fc fe3b 	bl	8001748 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11d      	bne.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004af2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e045      	b.n	8004bac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02e      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3c:	d126      	bne.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b46:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e00f      	b.n	8004bac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d08d      	beq.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_UARTEx_DisableFifoMode+0x16>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e027      	b.n	8004c1a <HAL_UARTEx_DisableFifoMode+0x66>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2224      	movs	r2, #36	; 0x24
 8004bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e02d      	b.n	8004c9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2224      	movs	r2, #36	; 0x24
 8004c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f850 	bl	8004d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e02d      	b.n	8004d16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2224      	movs	r2, #36	; 0x24
 8004cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f812 	bl	8004d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004d28:	4a2f      	ldr	r2, [pc, #188]	; (8004de8 <UARTEx_SetNbDataToProcess+0xc8>)
 8004d2a:	f107 0314 	add.w	r3, r7, #20
 8004d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004d36:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <UARTEx_SetNbDataToProcess+0xcc>)
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d108      	bne.n	8004d5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d5c:	e03d      	b.n	8004dda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d5e:	2308      	movs	r3, #8
 8004d60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d62:	2308      	movs	r3, #8
 8004d64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	0e5b      	lsrs	r3, r3, #25
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	0f5b      	lsrs	r3, r3, #29
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004d86:	7fbb      	ldrb	r3, [r7, #30]
 8004d88:	7f3a      	ldrb	r2, [r7, #28]
 8004d8a:	f107 0120 	add.w	r1, r7, #32
 8004d8e:	440a      	add	r2, r1
 8004d90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	7f3a      	ldrb	r2, [r7, #28]
 8004d9a:	f107 0120 	add.w	r1, r7, #32
 8004d9e:	440a      	add	r2, r1
 8004da0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004db0:	7ffb      	ldrb	r3, [r7, #31]
 8004db2:	7f7a      	ldrb	r2, [r7, #29]
 8004db4:	f107 0120 	add.w	r1, r7, #32
 8004db8:	440a      	add	r2, r1
 8004dba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	7f7a      	ldrb	r2, [r7, #29]
 8004dc4:	f107 0120 	add.w	r1, r7, #32
 8004dc8:	440a      	add	r2, r1
 8004dca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004dda:	bf00      	nop
 8004ddc:	3724      	adds	r7, #36	; 0x24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	08004e8c 	.word	0x08004e8c
 8004dec:	08004e94 	.word	0x08004e94

08004df0 <__libc_init_array>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4e0d      	ldr	r6, [pc, #52]	; (8004e28 <__libc_init_array+0x38>)
 8004df4:	4c0d      	ldr	r4, [pc, #52]	; (8004e2c <__libc_init_array+0x3c>)
 8004df6:	1ba4      	subs	r4, r4, r6
 8004df8:	10a4      	asrs	r4, r4, #2
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	42a5      	cmp	r5, r4
 8004dfe:	d109      	bne.n	8004e14 <__libc_init_array+0x24>
 8004e00:	4e0b      	ldr	r6, [pc, #44]	; (8004e30 <__libc_init_array+0x40>)
 8004e02:	4c0c      	ldr	r4, [pc, #48]	; (8004e34 <__libc_init_array+0x44>)
 8004e04:	f000 f820 	bl	8004e48 <_init>
 8004e08:	1ba4      	subs	r4, r4, r6
 8004e0a:	10a4      	asrs	r4, r4, #2
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	42a5      	cmp	r5, r4
 8004e10:	d105      	bne.n	8004e1e <__libc_init_array+0x2e>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e18:	4798      	blx	r3
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	e7ee      	b.n	8004dfc <__libc_init_array+0xc>
 8004e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e22:	4798      	blx	r3
 8004e24:	3501      	adds	r5, #1
 8004e26:	e7f2      	b.n	8004e0e <__libc_init_array+0x1e>
 8004e28:	08004f7c 	.word	0x08004f7c
 8004e2c:	08004f7c 	.word	0x08004f7c
 8004e30:	08004f7c 	.word	0x08004f7c
 8004e34:	08004f80 	.word	0x08004f80

08004e38 <memset>:
 8004e38:	4402      	add	r2, r0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d100      	bne.n	8004e42 <memset+0xa>
 8004e40:	4770      	bx	lr
 8004e42:	f803 1b01 	strb.w	r1, [r3], #1
 8004e46:	e7f9      	b.n	8004e3c <memset+0x4>

08004e48 <_init>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr

08004e54 <_fini>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr
