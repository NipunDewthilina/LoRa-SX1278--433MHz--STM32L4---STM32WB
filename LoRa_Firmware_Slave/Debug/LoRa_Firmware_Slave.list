
LoRa_Firmware_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006674  08006674  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800667c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  20000078  080066f0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  080066f0  00020ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198d3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c6  00000000  00000000  00039977  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003ca40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a4d2  00000000  00000000  0003f298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123d4  00000000  00000000  0006976a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe944  00000000  00000000  0007bb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017a482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  0017a500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006530 	.word	0x08006530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08006530 	.word	0x08006530

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	78fa      	ldrb	r2, [r7, #3]
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fda3 	bl	8001038 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fdbd 	bl	8001076 <SX1278_hw_SPIReadByte>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fd5b 	bl	8000fc2 <SX1278_hw_SetNSS>
	return tmp;
 800050c:	7bfb      	ldrb	r3, [r7, #15]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	70fb      	strb	r3, [r7, #3]
 8000522:	4613      	mov	r3, r2
 8000524:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fd48 	bl	8000fc2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	78fb      	ldrb	r3, [r7, #3]
 8000538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	4610      	mov	r0, r2
 8000542:	f000 fd79 	bl	8001038 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	78ba      	ldrb	r2, [r7, #2]
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fd72 	bl	8001038 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd31 	bl	8000fc2 <SX1278_hw_SetNSS>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	607a      	str	r2, [r7, #4]
 8000572:	461a      	mov	r2, r3
 8000574:	460b      	mov	r3, r1
 8000576:	72fb      	strb	r3, [r7, #11]
 8000578:	4613      	mov	r3, r2
 800057a:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800057c:	7abb      	ldrb	r3, [r7, #10]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d929      	bls.n	80005d6 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fd1a 	bl	8000fc2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	4610      	mov	r0, r2
 800059e:	f000 fd4b 	bl	8001038 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	75fb      	strb	r3, [r7, #23]
 80005a6:	e00b      	b.n	80005c0 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f000 fd3f 	bl	8001038 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	3301      	adds	r3, #1
 80005be:	75fb      	strb	r3, [r7, #23]
 80005c0:	7dfa      	ldrb	r2, [r7, #23]
 80005c2:	7abb      	ldrb	r3, [r7, #10]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d3ef      	bcc.n	80005a8 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2101      	movs	r1, #1
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fcf7 	bl	8000fc2 <SX1278_hw_SetNSS>
 80005d4:	e000      	b.n	80005d8 <SX1278_SPIBurstWrite+0x70>
		return;
 80005d6:	bf00      	nop
	}
}
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f913 	bl	8000814 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005ee:	200f      	movs	r0, #15
 80005f0:	f000 fd67 	bl	80010c2 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f92d 	bl	8000854 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note
	SX1278_setNodeAddress(module, module->node_addr);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7ddb      	ldrb	r3, [r3, #23]
 80005fe:	4619      	mov	r1, r3
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 fb8b 	bl	8000d1c <SX1278_setNodeAddress>
	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	04e1      	lsls	r1, r4, #19
 8000616:	ea41 3153 	orr.w	r1, r1, r3, lsr #13
 800061a:	04d8      	lsls	r0, r3, #19
 800061c:	4a6f      	ldr	r2, [pc, #444]	; (80007dc <SX1278_config+0x1fc>)
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	f7ff fdd9 	bl	80001d8 <__aeabi_uldivmod>
 8000626:	4603      	mov	r3, r0
 8000628:	460c      	mov	r4, r1
 800062a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800062e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	f04f 0400 	mov.w	r4, #0
 800063a:	0c0b      	lsrs	r3, r1, #16
 800063c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000640:	0c14      	lsrs	r4, r2, #16
 8000642:	b2db      	uxtb	r3, r3
 8000644:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000646:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	f04f 0400 	mov.w	r4, #0
 8000652:	0a0b      	lsrs	r3, r1, #8
 8000654:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000658:	0a14      	lsrs	r4, r2, #8
 800065a:	b2db      	uxtb	r3, r3
 800065c:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800065e:	7c3b      	ldrb	r3, [r7, #16]
 8000660:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000662:	f107 020c 	add.w	r2, r7, #12
 8000666:	2303      	movs	r3, #3
 8000668:	2106      	movs	r1, #6
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff ff7c 	bl	8000568 <SX1278_SPIBurstWrite>

//	SX1278_SPIWrite(module, RegSyncConfig, 0x53); /* changed 22/03/2021 Controls the automatic restart of the receiver after the reception of
//	a valid packet (PayloadReady or CrcOk):*/
	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000670:	2234      	movs	r2, #52	; 0x34
 8000672:	2139      	movs	r1, #57	; 0x39
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff4e 	bl	8000516 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	461a      	mov	r2, r3
 8000680:	4b57      	ldr	r3, [pc, #348]	; (80007e0 <SX1278_config+0x200>)
 8000682:	5c9b      	ldrb	r3, [r3, r2]
 8000684:	461a      	mov	r2, r3
 8000686:	2109      	movs	r1, #9
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff44 	bl	8000516 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800068e:	220b      	movs	r2, #11
 8000690:	210b      	movs	r1, #11
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff3f 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000698:	2223      	movs	r2, #35	; 0x23
 800069a:	210c      	movs	r1, #12
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff3a 	bl	8000516 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7c5b      	ldrb	r3, [r3, #17]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b4e      	ldr	r3, [pc, #312]	; (80007e4 <SX1278_config+0x204>)
 80006aa:	5c9b      	ldrb	r3, [r3, r2]
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d147      	bne.n	8000740 <SX1278_config+0x160>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7c9b      	ldrb	r3, [r3, #18]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b4c      	ldr	r3, [pc, #304]	; (80007e8 <SX1278_config+0x208>)
 80006b8:	5c9b      	ldrb	r3, [r3, r2]
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7cdb      	ldrb	r3, [r3, #19]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4b49      	ldr	r3, [pc, #292]	; (80007ec <SX1278_config+0x20c>)
 80006c6:	5c5b      	ldrb	r3, [r3, r1]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	211d      	movs	r1, #29
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff1c 	bl	8000516 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7c5b      	ldrb	r3, [r3, #17]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b3f      	ldr	r3, [pc, #252]	; (80007e4 <SX1278_config+0x204>)
 80006e6:	5c9b      	ldrb	r3, [r3, r2]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7d1b      	ldrb	r3, [r3, #20]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <SX1278_config+0x210>)
 80006f4:	5c5b      	ldrb	r3, [r3, r1]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006fe:	3303      	adds	r3, #3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	211e      	movs	r1, #30
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff05 	bl	8000516 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 800070c:	2131      	movs	r1, #49	; 0x31
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fee2 	bl	80004d8 <SX1278_SPIRead>
 8000714:	4603      	mov	r3, r0
 8000716:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f023 0307 	bic.w	r3, r3, #7
 800071e:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	f043 0305 	orr.w	r3, r3, #5
 8000726:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	461a      	mov	r2, r3
 800072c:	2131      	movs	r1, #49	; 0x31
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff fef1 	bl	8000516 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000734:	220c      	movs	r2, #12
 8000736:	2137      	movs	r1, #55	; 0x37
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff feec 	bl	8000516 <SX1278_SPIWrite>
 800073e:	e029      	b.n	8000794 <SX1278_config+0x1b4>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7c9b      	ldrb	r3, [r3, #18]
 8000744:	461a      	mov	r2, r3
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SX1278_config+0x208>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7cdb      	ldrb	r3, [r3, #19]
 8000752:	4619      	mov	r1, r3
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SX1278_config+0x20c>)
 8000756:	5c5b      	ldrb	r3, [r3, r1]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800075c:	4413      	add	r3, r2
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	211d      	movs	r1, #29
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fed6 	bl	8000516 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7c5b      	ldrb	r3, [r3, #17]
 800076e:	461a      	mov	r2, r3
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <SX1278_config+0x204>)
 8000772:	5c9b      	ldrb	r3, [r3, r2]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7d1b      	ldrb	r3, [r3, #20]
 800077c:	4619      	mov	r1, r3
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <SX1278_config+0x210>)
 8000780:	5c5b      	ldrb	r3, [r3, r1]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000786:	4413      	add	r3, r2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	461a      	mov	r2, r3
 800078c:	211e      	movs	r1, #30
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fec1 	bl	8000516 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000794:	2204      	movs	r2, #4
 8000796:	2126      	movs	r1, #38	; 0x26
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff febc 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800079e:	2208      	movs	r2, #8
 80007a0:	211f      	movs	r1, #31
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff feb7 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80007a8:	2200      	movs	r2, #0
 80007aa:	2120      	movs	r1, #32
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff feb2 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80007b2:	2208      	movs	r2, #8
 80007b4:	2121      	movs	r1, #33	; 0x21
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fead 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80007bc:	2201      	movs	r2, #1
 80007be:	2141      	movs	r1, #65	; 0x41
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fea8 	bl	8000516 <SX1278_SPIWrite>
	module->readBytes = 0;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
//	SX1278_setOCP(module, module->maximum_Current);
	//SX1278_standby(module); //Entry standby mode
	SX1278_cad(module); //Entry cad mode
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f830 	bl	8000834 <SX1278_cad>
}
 80007d4:	bf00      	nop
 80007d6:	371c      	adds	r7, #28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	01e84800 	.word	0x01e84800
 80007e0:	080065a0 	.word	0x080065a0
 80007e4:	080065a4 	.word	0x080065a4
 80007e8:	080065ac 	.word	0x080065ac
 80007ec:	080065b8 	.word	0x080065b8
 80007f0:	080065bc 	.word	0x080065bc

080007f4 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007fc:	2209      	movs	r2, #9
 80007fe:	2101      	movs	r1, #1
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fe88 	bl	8000516 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2201      	movs	r2, #1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800081c:	2208      	movs	r2, #8
 800081e:	2101      	movs	r1, #1
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fe78 	bl	8000516 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <SX1278_cad>:

void SX1278_cad(SX1278_t *module)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x0F);
 800083c:	220f      	movs	r2, #15
 800083e:	2101      	movs	r1, #1
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fe68 	bl	8000516 <SX1278_SPIWrite>
	module->status = CAD;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2204      	movs	r2, #4
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800085c:	2288      	movs	r2, #136	; 0x88
 800085e:	2101      	movs	r1, #1
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff fe58 	bl	8000516 <SX1278_SPIWrite>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	uint8_t st0;
	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status
 8000876:	2101      	movs	r1, #1
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fe2d 	bl	80004d8 <SX1278_SPIRead>
 800087e:	4603      	mov	r3, r0
 8000880:	73fb      	strb	r3, [r7, #15]
	SX1278_standby(module);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffb6 	bl	80007f4 <SX1278_standby>
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000888:	22ff      	movs	r2, #255	; 0xff
 800088a:	2112      	movs	r1, #18
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe42 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, st0);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	461a      	mov	r2, r3
 8000896:	2101      	movs	r1, #1
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fe3c 	bl	8000516 <SX1278_SPIWrite>

}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	460b      	mov	r3, r1
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	7afa      	ldrb	r2, [r7, #11]
 80008b8:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff fe90 	bl	80005e0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80008c0:	2284      	movs	r2, #132	; 0x84
 80008c2:	214d      	movs	r1, #77	; 0x4d
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fe26 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	2124      	movs	r1, #36	; 0x24
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f7ff fe21 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80008d4:	2201      	movs	r2, #1
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff fe1c 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80008de:	223f      	movs	r2, #63	; 0x3f
 80008e0:	2111      	movs	r1, #17
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f7ff fe17 	bl	8000516 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff ffc0 	bl	800086e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	461a      	mov	r2, r3
 80008f2:	2122      	movs	r1, #34	; 0x22
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe0e 	bl	8000516 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80008fa:	210f      	movs	r1, #15
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff fdeb 	bl	80004d8 <SX1278_SPIRead>
 8000902:	4603      	mov	r3, r0
 8000904:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	461a      	mov	r2, r3
 800090a:	210d      	movs	r1, #13
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff fe02 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000912:	228d      	movs	r2, #141	; 0x8d
 8000914:	2101      	movs	r1, #1
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f7ff fdfd 	bl	8000516 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000924:	2118      	movs	r1, #24
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fdd6 	bl	80004d8 <SX1278_SPIRead>
 800092c:	4603      	mov	r3, r0
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	2b04      	cmp	r3, #4
 8000934:	d104      	bne.n	8000940 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2203      	movs	r2, #3
 800093a:	761a      	strb	r2, [r3, #24]
			return 1;
 800093c:	2301      	movs	r3, #1
 800093e:	e013      	b.n	8000968 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d109      	bne.n	8000960 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fb4d 	bl	8000ff0 <SX1278_hw_Reset>
			SX1278_config(module);
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f7ff fe42 	bl	80005e0 <SX1278_config>
			return 0;
 800095c:	2300      	movs	r3, #0
 800095e:	e003      	b.n	8000968 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f000 fbae 	bl	80010c2 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000966:	e7dd      	b.n	8000924 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <SX1278_LoRaRxPacketACK>:
		return 1;
		}
	return 0;
}

uint8_t SX1278_LoRaRxPacketACK(SX1278_t *module,SX1278_pack_t *ack, SX1278_pack_t *packet_sent ) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	unsigned char addr;


	if (SX1278_hw_GetDIO0(module->hw)) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fba9 	bl	80010d8 <SX1278_hw_GetDIO0>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d016      	beq.n	80009ba <SX1278_LoRaRxPacketACK+0x4a>
//		memset(packet_sent->data, 0x00, SX1278_MAX_PAYLOAD);

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800098c:	2110      	movs	r1, #16
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff fda2 	bl	80004d8 <SX1278_SPIRead>
 8000994:	4603      	mov	r3, r0
 8000996:	75fb      	strb	r3, [r7, #23]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000998:	7dfb      	ldrb	r3, [r7, #23]
 800099a:	461a      	mov	r2, r3
 800099c:	210d      	movs	r1, #13
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff fdb9 	bl	8000516 <SX1278_SPIWrite>
//			packet_size = module->packetLength;
//		} else {
//			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
//		}
		//SX1278_SPIBurstRead(module, 0x00, packet->data, packet_size);
		SX1278_getACK(module, packet_sent, ack, 2);
 80009a4:	2302      	movs	r3, #2
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 f95e 	bl	8000c6c <SX1278_getACK>
//		module->readBytes = packet_size;
		SX1278_clearLoRaIrq(module);
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff ff5c 	bl	800086e <SX1278_clearLoRaIrq>
		return 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <SX1278_LoRaRxPacketACK+0x4c>
	}
	return 0;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	460b      	mov	r3, r1
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	7afa      	ldrb	r2, [r7, #11]
 80009d6:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fe01 	bl	80005e0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009de:	2287      	movs	r2, #135	; 0x87
 80009e0:	214d      	movs	r1, #77	; 0x4d
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff fd97 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009e8:	2200      	movs	r2, #0
 80009ea:	2124      	movs	r1, #36	; 0x24
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff fd92 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009f2:	2241      	movs	r2, #65	; 0x41
 80009f4:	2140      	movs	r1, #64	; 0x40
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fd8d 	bl	8000516 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff ff36 	bl	800086e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000a02:	22f7      	movs	r2, #247	; 0xf7
 8000a04:	2111      	movs	r1, #17
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff fd85 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000a0c:	7afb      	ldrb	r3, [r7, #11]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2122      	movs	r1, #34	; 0x22
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fd7f 	bl	8000516 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000a18:	210e      	movs	r1, #14
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff fd5c 	bl	80004d8 <SX1278_SPIRead>
 8000a20:	4603      	mov	r3, r0
 8000a22:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	461a      	mov	r2, r3
 8000a28:	210d      	movs	r1, #13
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f7ff fd73 	bl	8000516 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000a30:	2122      	movs	r1, #34	; 0x22
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff fd50 	bl	80004d8 <SX1278_SPIRead>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a3c:	7dba      	ldrb	r2, [r7, #22]
 8000a3e:	7afb      	ldrb	r3, [r7, #11]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d104      	bne.n	8000a4e <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2202      	movs	r2, #2
 8000a48:	761a      	strb	r2, [r3, #24]
			return 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1ea      	bne.n	8000a30 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fac6 	bl	8000ff0 <SX1278_hw_Reset>
			SX1278_config(module);
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fdbb 	bl	80005e0 <SX1278_config>
			return 0;
 8000a6a:	2300      	movs	r3, #0
		}
	}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, SX1278_pack_t *packet_sent, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout, uint8_t dest) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	70fb      	strb	r3, [r7, #3]
	SX1278_setPacket(module, dest, (uint8_t*)txBuffer, packet_sent);
 8000a82:	7f39      	ldrb	r1, [r7, #28]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f000 f868 	bl	8000b5e <SX1278_setPacket>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a8e:	228b      	movs	r2, #139	; 0x8b
 8000a90:	2101      	movs	r1, #1
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff fd3f 	bl	8000516 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fb1b 	bl	80010d8 <SX1278_hw_GetDIO0>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00b      	beq.n	8000ac0 <SX1278_LoRaTxPacket+0x4c>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000aa8:	2112      	movs	r1, #18
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff fd14 	bl	80004d8 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff fedc 	bl	800086e <SX1278_clearLoRaIrq>
			SX1278_cad(module); //Entry cad mode //edited
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff febc 	bl	8000834 <SX1278_cad>
			return 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e013      	b.n	8000ae8 <SX1278_LoRaTxPacket+0x74>
		}

		if (--timeout == 0) {
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d109      	bne.n	8000ae0 <SX1278_LoRaTxPacket+0x6c>
			SX1278_hw_Reset(module->hw);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fa8d 	bl	8000ff0 <SX1278_hw_Reset>
			SX1278_config(module);
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff fd82 	bl	80005e0 <SX1278_config>
			return 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e003      	b.n	8000ae8 <SX1278_LoRaTxPacket+0x74>
		}
		SX1278_hw_DelayMs(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 faee 	bl	80010c2 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ae6:	e7d7      	b.n	8000a98 <SX1278_LoRaTxPacket+0x24>
	}
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power, uint8_t current,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR, uint8_t node_addr,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fa49 	bl	8000f98 <SX1278_hw_init>
	module->frequency = frequency;
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b0c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	module->power = power;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b16:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b1e:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b26:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b2e:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b36:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000b3e:	755a      	strb	r2, [r3, #21]
	module->maximum_Current = current;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b46:	759a      	strb	r2, [r3, #22]
	module->node_addr = node_addr;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000b4e:	75da      	strb	r2, [r3, #23]
	SX1278_config(module);
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fd45 	bl	80005e0 <SX1278_config>
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}

08000b5e <SX1278_setPacket>:

	SX1278_SPIBurstRead(module, 0x00, packet_received->data, payload_length);
}

void SX1278_setPacket(SX1278_t *module, uint8_t dest, uint8_t *massage, SX1278_pack_t *packet_sent)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	72fb      	strb	r3, [r7, #11]
	//uint8_t st0;
	uint16_t payload_length;
	SX1278_clearLoRaIrq(module);	// Initializing flags
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff fe7d 	bl	800086e <SX1278_clearLoRaIrq>

//	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status

	memset(packet_sent->data, 0x00, SX1278_MAX_PAYLOAD);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	3309      	adds	r3, #9
 8000b78:	22fb      	movs	r2, #251	; 0xfb
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f005 f867 	bl	8005c50 <memset>
	 // LoRa mode
	SX1278_standby(module);	// Stdby LoRa mode to write in FIFO
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe36 	bl	80007f4 <SX1278_standby>

	packet_sent->dst = dest;	// Setting destination in packet structure
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	7afa      	ldrb	r2, [r7, #11]
 8000b8c:	701a      	strb	r2, [r3, #0]
	packet_sent->src = SX1278_getNodeAddress(module);
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f000 f8f2 	bl	8000d78 <SX1278_getNodeAddress>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	705a      	strb	r2, [r3, #1]
	payload_length = (uint16_t)strlen(massage);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fb13 	bl	80001c8 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	827b      	strh	r3, [r7, #18]
	payload_length = SX1278_truncPayload(payload_length);
 8000ba6:	8a7b      	ldrh	r3, [r7, #18]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f84a 	bl	8000c42 <SX1278_truncPayload>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	827b      	strh	r3, [r7, #18]
	packet_sent->length = payload_length;
 8000bb2:	8a7b      	ldrh	r3, [r7, #18]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	721a      	strb	r2, [r3, #8]
	for(unsigned int i = 0; i <payload_length; i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e00c      	b.n	8000bda <SX1278_setPacket+0x7c>
		{
			packet_sent->data[i] = massage[i];
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	7819      	ldrb	r1, [r3, #0]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	4413      	add	r3, r2
 8000bce:	3309      	adds	r3, #9
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i <payload_length; i++)
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	8a7b      	ldrh	r3, [r7, #18]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d3ee      	bcc.n	8000bc0 <SX1278_setPacket+0x62>
//	SX1278_hw_SPICommand(module->hw, 0x00);
//	SX1278_hw_SPICommand(module->hw, packet_sent->dst);
//	SX1278_hw_SPICommand(module->hw, packet_sent->src);
//	SX1278_hw_SPICommand(module->hw, packet_sent->packnum);
//	SX1278_hw_SPICommand(module->hw, packet_sent->length);
	SX1278_SPIWrite(module, 0x00, packet_sent->dst); 		// Writing the destination in FIFO
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fc93 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, packet_sent->src);		// Writing the source in FIFO
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	785b      	ldrb	r3, [r3, #1]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fc8c 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, packet_sent->packnum);	// Writing the packet number in FIFO
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff fc84 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, packet_sent->length);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	7a1b      	ldrb	r3, [r3, #8]
 8000c12:	461a      	mov	r2, r3
 8000c14:	2100      	movs	r1, #0
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff fc7d 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, packet_sent->retry);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000c22:	461a      	mov	r2, r3
 8000c24:	2100      	movs	r1, #0
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff fc75 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIBurstWrite(module, 0x00, massage, payload_length);
 8000c2c:	8a7b      	ldrh	r3, [r7, #18]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	2100      	movs	r1, #0
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fc97 	bl	8000568 <SX1278_SPIBurstWrite>
//		{
//			SX1278_SPIWrite(module, 0x00, packet_sent->data[i]);  // Writing the payload in FIFO
//		}
//	SX1278_SPIWrite(module, LR_RegOpMode, st0);

	}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <SX1278_truncPayload>:


uint16_t SX1278_truncPayload(uint16_t length16)
	{
 8000c42:	b480      	push	{r7}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	80fb      	strh	r3, [r7, #6]
		uint16_t _payloadlength;
		if( length16 > SX1278_MAX_PAYLOAD )
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	2bfb      	cmp	r3, #251	; 0xfb
 8000c50:	d902      	bls.n	8000c58 <SX1278_truncPayload+0x16>
		{
			_payloadlength = SX1278_MAX_PAYLOAD;
 8000c52:	23fb      	movs	r3, #251	; 0xfb
 8000c54:	81fb      	strh	r3, [r7, #14]
 8000c56:	e002      	b.n	8000c5e <SX1278_truncPayload+0x1c>
		}
		else
		{
			_payloadlength = (length16 & 0xFF);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	81fb      	strh	r3, [r7, #14]
		}
		return _payloadlength;
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
	}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SX1278_getACK>:

//	SX1278_SPIWrite(module, LR_RegOpMode, st0);
}

int SX1278_getACK(SX1278_t *module, SX1278_pack_t *packet_sent, SX1278_pack_t *ACK, uint8_t dest)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	70fb      	strb	r3, [r7, #3]
	ACK->dst = SX1278_SPIRead(module,0x00);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f7ff fc2b 	bl	80004d8 <SX1278_SPIRead>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	701a      	strb	r2, [r3, #0]
	ACK->src = SX1278_SPIRead(module, 0x00);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f7ff fc23 	bl	80004d8 <SX1278_SPIRead>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	705a      	strb	r2, [r3, #1]
	ACK->packnum = SX1278_SPIRead(module, 0x00);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f7ff fc1b 	bl	80004d8 <SX1278_SPIRead>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	605a      	str	r2, [r3, #4]
	ACK->length = SX1278_SPIRead(module, 0x00);
 8000caa:	2100      	movs	r1, #0
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff fc13 	bl	80004d8 <SX1278_SPIRead>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	721a      	strb	r2, [r3, #8]
	ACK->data[0] = SX1278_SPIRead(module, 0x00);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fc0b 	bl	80004d8 <SX1278_SPIRead>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	725a      	strb	r2, [r3, #9]
	// Checking the received ACK
	if( ACK->dst == packet_sent->src )
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d11d      	bne.n	8000d12 <SX1278_getACK+0xa6>
	{
		if( ACK->src == packet_sent->dst )
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	785a      	ldrb	r2, [r3, #1]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d115      	bne.n	8000d0e <SX1278_getACK+0xa2>
		{
			if( ACK->packnum == packet_sent->packnum )
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d10d      	bne.n	8000d0a <SX1278_getACK+0x9e>
			{
				if( ACK->length == 0 )
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7a1b      	ldrb	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d107      	bne.n	8000d06 <SX1278_getACK+0x9a>
				{
					if( ACK->data[0] == 1 )
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7a5b      	ldrb	r3, [r3, #9]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d101      	bne.n	8000d02 <SX1278_getACK+0x96>
					{
						return 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e008      	b.n	8000d14 <SX1278_getACK+0xa8>
					}
					else{
						return 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e006      	b.n	8000d14 <SX1278_getACK+0xa8>
					}
				}
				else{
					return 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e004      	b.n	8000d14 <SX1278_getACK+0xa8>
				}
			}
			else{
				return 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e002      	b.n	8000d14 <SX1278_getACK+0xa8>
			}
		}
		else{
			return 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <SX1278_getACK+0xa8>
		}
	}
	else
	{
		return 0;
 8000d12:	2300      	movs	r3, #0
	}
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SX1278_setNodeAddress>:
	}
}


void SX1278_setNodeAddress(SX1278_t *module, uint8_t addr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	uint8_t nodeAddress;
	uint8_t st0 = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fbd2 	bl	80004d8 <SX1278_SPIRead>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]
		// Allowing access to FSK registers while in LoRa standby mode
	SX1278_SPIWrite(module,LR_RegOpMode, 0xCA);
 8000d38:	22ca      	movs	r2, #202	; 0xca
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fbea 	bl	8000516 <SX1278_SPIWrite>
	// Saving node address
	SX1278_SPIWrite(module, RegNodeAdrs, addr);
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	461a      	mov	r2, r3
 8000d46:	2133      	movs	r1, #51	; 0x33
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fbe4 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegBroadcastAdrs, 0x00);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2134      	movs	r1, #52	; 0x34
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fbdf 	bl	8000516 <SX1278_SPIWrite>
	nodeAddress = SX1278_SPIRead(module, RegNodeAdrs);
 8000d58:	2133      	movs	r1, #51	; 0x33
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fbbc 	bl	80004d8 <SX1278_SPIRead>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIWrite(module, LR_RegOpMode, st0);	// Getting back to previous status
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2101      	movs	r1, #1
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fbd3 	bl	8000516 <SX1278_SPIWrite>
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SX1278_getNodeAddress>:

uint8_t SX1278_getNodeAddress(SX1278_t *module)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	uint8_t _nodeAddress;
	uint8_t st0 = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status
 8000d84:	2101      	movs	r1, #1
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fba6 	bl	80004d8 <SX1278_SPIRead>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73fb      	strb	r3, [r7, #15]
		// Allowing access to FSK registers while in LoRa standby mode
	SX1278_SPIWrite(module,LR_RegOpMode, 0xCA);
 8000d90:	22ca      	movs	r2, #202	; 0xca
 8000d92:	2101      	movs	r1, #1
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fbbe 	bl	8000516 <SX1278_SPIWrite>
	// Saving node address
	_nodeAddress = SX1278_SPIRead(module, RegNodeAdrs);
 8000d9a:	2133      	movs	r1, #51	; 0x33
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fb9b 	bl	80004d8 <SX1278_SPIRead>
 8000da2:	4603      	mov	r3, r0
 8000da4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIWrite(module, LR_RegOpMode, st0);	// Getting back to previous status
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	461a      	mov	r2, r3
 8000daa:	2101      	movs	r1, #1
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fbb2 	bl	8000516 <SX1278_SPIWrite>
	return _nodeAddress;
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <SX1278_Compare>:

uint8_t SX1278_Compare(SX1278_t *module, SX1278_pack_t *ACK, SX1278_pack_t *packet_sent)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	if( ACK->dst == packet_sent->src )
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d11d      	bne.n	8000e10 <SX1278_Compare+0x54>
		{
			if( ACK->src == packet_sent->dst )
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	785a      	ldrb	r2, [r3, #1]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d115      	bne.n	8000e0c <SX1278_Compare+0x50>
			{
				if( ACK->packnum == packet_sent->packnum )
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d10d      	bne.n	8000e08 <SX1278_Compare+0x4c>
				{
					if( ACK->length == 0 )
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	7a1b      	ldrb	r3, [r3, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d107      	bne.n	8000e04 <SX1278_Compare+0x48>
					{
						if( ACK->data[0] == 1 )
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	7a5b      	ldrb	r3, [r3, #9]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d101      	bne.n	8000e00 <SX1278_Compare+0x44>
						{
							return 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e008      	b.n	8000e12 <SX1278_Compare+0x56>
						}
						else{
							return 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e006      	b.n	8000e12 <SX1278_Compare+0x56>
						}
					}
					else{
						return 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e004      	b.n	8000e12 <SX1278_Compare+0x56>
					}
				}
				else{
					return 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e002      	b.n	8000e12 <SX1278_Compare+0x56>
				}
			}
			else{
				return 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e000      	b.n	8000e12 <SX1278_Compare+0x56>
			}
		}
		else
		{
			return 0;
 8000e10:	2300      	movs	r3, #0
		}
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <SX1278_copypacket>:

void SX1278_copypacket(SX1278_pack_t *pack1, SX1278_pack_t *pack2){
 8000e1e:	b480      	push	{r7}
 8000e20:	b085      	sub	sp, #20
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
	uint8_t payload_length;
	pack1->dst = pack2->dst;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	701a      	strb	r2, [r3, #0]
	pack1->src = pack2->src;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	785a      	ldrb	r2, [r3, #1]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	705a      	strb	r2, [r3, #1]
	pack1->packnum = pack2->packnum;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	605a      	str	r2, [r3, #4]
	pack1->length = pack2->length;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	7a1a      	ldrb	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	721a      	strb	r2, [r3, #8]
	pack1->retry = pack2->retry;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	payload_length = pack2->length;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	7a1b      	ldrb	r3, [r3, #8]
 8000e58:	72fb      	strb	r3, [r7, #11]

	for(unsigned int i = 0; i <payload_length; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	e00d      	b.n	8000e7c <SX1278_copypacket+0x5e>
			{
				pack1->data[i] = pack2->data[i];
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4413      	add	r3, r2
 8000e66:	3309      	adds	r3, #9
 8000e68:	7819      	ldrb	r1, [r3, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	3309      	adds	r3, #9
 8000e72:	460a      	mov	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i <payload_length; i++)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3ed      	bcc.n	8000e60 <SX1278_copypacket+0x42>
			}

}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SX1278_LoRaTxPacketRetry>:
int SX1278_LoRaTxPacketRetry(SX1278_t *module, SX1278_pack_t *packet, uint8_t dest, uint8_t timeout){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	71bb      	strb	r3, [r7, #6]
	SX1278_setPacketRetry(module, dest, packet);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f000 f831 	bl	8000f14 <SX1278_setPacketRetry>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000eb2:	228b      	movs	r2, #139	; 0x8b
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f7ff fb2d 	bl	8000516 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f909 	bl	80010d8 <SX1278_hw_GetDIO0>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00b      	beq.n	8000ee4 <SX1278_LoRaTxPacketRetry+0x54>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000ecc:	2112      	movs	r1, #18
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff fb02 	bl	80004d8 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff fcca 	bl	800086e <SX1278_clearLoRaIrq>
			SX1278_cad(module); //Entry cad mode //edited
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fcaa 	bl	8000834 <SX1278_cad>
			return 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e013      	b.n	8000f0c <SX1278_LoRaTxPacketRetry+0x7c>
		}

		if (--timeout == 0) {
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <SX1278_LoRaTxPacketRetry+0x74>
			SX1278_hw_Reset(module->hw);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f87b 	bl	8000ff0 <SX1278_hw_Reset>
			SX1278_config(module);
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff fb70 	bl	80005e0 <SX1278_config>
			return 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e003      	b.n	8000f0c <SX1278_LoRaTxPacketRetry+0x7c>
		}
		SX1278_hw_DelayMs(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 f8dc 	bl	80010c2 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000f0a:	e7d7      	b.n	8000ebc <SX1278_LoRaTxPacketRetry+0x2c>
	}
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <SX1278_setPacketRetry>:

void SX1278_setPacketRetry(SX1278_t *module, uint8_t dest, SX1278_pack_t *retry_packet)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	72fb      	strb	r3, [r7, #11]
	//uint8_t st0;
	uint16_t payload_length;
	SX1278_clearLoRaIrq(module);	// Initializing flags
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff fca3 	bl	800086e <SX1278_clearLoRaIrq>

//	st0 = SX1278_SPIRead(module, LR_RegOpMode);	// Save the previous status

//	memset(retry_packet->data, 0x00, SX1278_MAX_PAYLOAD);
	 // LoRa mode
	SX1278_standby(module);	// Stdby LoRa mode to write in FIFO
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fc63 	bl	80007f4 <SX1278_standby>
//	SX1278_hw_SPICommand(module->hw, 0x00);
//	SX1278_hw_SPICommand(module->hw, packet_sent->dst);
//	SX1278_hw_SPICommand(module->hw, packet_sent->src);
//	SX1278_hw_SPICommand(module->hw, packet_sent->packnum);
//	SX1278_hw_SPICommand(module->hw, packet_sent->length);
	SX1278_SPIWrite(module, 0x00, retry_packet->dst); 		// Writing the destination in FIFO
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f7ff faed 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, retry_packet->src);		// Writing the source in FIFO
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	785b      	ldrb	r3, [r3, #1]
 8000f40:	461a      	mov	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff fae6 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, retry_packet->packnum);	// Writing the packet number in FIFO
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff fade 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, retry_packet->length);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7a1b      	ldrb	r3, [r3, #8]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f7ff fad7 	bl	8000516 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x00, retry_packet->retry);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2100      	movs	r1, #0
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff facf 	bl	8000516 <SX1278_SPIWrite>
	payload_length = retry_packet->length;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7a1b      	ldrb	r3, [r3, #8]
 8000f7c:	82fb      	strh	r3, [r7, #22]
	SX1278_SPIBurstWrite(module, 0x00, retry_packet->data, payload_length);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f103 0209 	add.w	r2, r3, #9
 8000f84:	8afb      	ldrh	r3, [r7, #22]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff faec 	bl	8000568 <SX1278_SPIBurstWrite>
//		{
//			SX1278_SPIWrite(module, 0x00, packet_sent->data[i]);  // Writing the payload in FIFO
//		}
//	SX1278_SPIWrite(module, LR_RegOpMode, st0);

	}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SX1278_hw_init>:

#include "gpio.h"
#include "spi.h"
#include "usart.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f80d 	bl	8000fc2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6858      	ldr	r0, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f001 fa75 	bl	80024a4 <HAL_GPIO_WritePin>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	bf0c      	ite	eq
 8000fdc:	2301      	moveq	r3, #1
 8000fde:	2300      	movne	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f001 fa5e 	bl	80024a4 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffe1 	bl	8000fc2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6858      	ldr	r0, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	f001 fa49 	bl	80024a4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 f855 	bl	80010c2 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6858      	ldr	r0, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	2201      	movs	r2, #1
 8001024:	4619      	mov	r1, r3
 8001026:	f001 fa3d 	bl	80024a4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f000 f849 	bl	80010c2 <SX1278_hw_DelayMs>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001044:	2100      	movs	r1, #0
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffbb 	bl	8000fc2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001050:	1cf9      	adds	r1, r7, #3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	2201      	movs	r2, #1
 8001058:	f003 f929 	bl	80042ae <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800105c:	bf00      	nop
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fca4 	bl	80049b0 <HAL_SPI_GetState>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d1f7      	bne.n	800105e <SX1278_hw_SPICommand+0x26>
		;
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af02      	add	r7, sp, #8
 800107c:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001086:	2100      	movs	r1, #0
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff9a 	bl	8000fc2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001092:	f107 020e 	add.w	r2, r7, #14
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	f003 fa72 	bl	800458a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80010a6:	bf00      	nop
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fc7f 	bl	80049b0 <HAL_SPI_GetState>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d1f7      	bne.n	80010a8 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 fef6 	bl	8001ebc <HAL_Delay>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f001 f9c1 	bl	8002474 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <MX_GPIO_Init+0x114>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a3e      	ldr	r2, [pc, #248]	; (800121c <MX_GPIO_Init+0x114>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <MX_GPIO_Init+0x114>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <MX_GPIO_Init+0x114>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a38      	ldr	r2, [pc, #224]	; (800121c <MX_GPIO_Init+0x114>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <MX_GPIO_Init+0x114>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <MX_GPIO_Init+0x114>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a32      	ldr	r2, [pc, #200]	; (800121c <MX_GPIO_Init+0x114>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <MX_GPIO_Init+0x114>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2110      	movs	r1, #16
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f001 f999 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2120      	movs	r1, #32
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f001 f993 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2102      	movs	r1, #2
 8001182:	4827      	ldr	r0, [pc, #156]	; (8001220 <MX_GPIO_Init+0x118>)
 8001184:	f001 f98e 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_GPIO_Init+0x11c>)
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4822      	ldr	r0, [pc, #136]	; (8001228 <MX_GPIO_Init+0x120>)
 800119e:	f000 ffc1 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 80011a2:	2330      	movs	r3, #48	; 0x30
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f000 ffb2 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_GPIO_Init+0x124>)
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	4813      	ldr	r0, [pc, #76]	; (8001220 <MX_GPIO_Init+0x118>)
 80011d4:	f000 ffa6 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80011d8:	2302      	movs	r3, #2
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_GPIO_Init+0x118>)
 80011f0:	f000 ff98 	bl	8002124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2006      	movs	r0, #6
 80011fa:	f000 ff5c 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011fe:	2006      	movs	r0, #6
 8001200:	f000 ff75 	bl	80020ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2028      	movs	r0, #40	; 0x28
 800120a:	f000 ff54 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f000 ff6d 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400
 8001224:	10210000 	.word	0x10210000
 8001228:	48000800 	.word	0x48000800
 800122c:	10110000 	.word	0x10110000

08001230 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001238:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800123c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001248:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800124c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001250:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001258:	e000      	b.n	800125c <ITM_SendChar+0x2c>
    {
      __NOP();
 800125a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800125c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001266:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	b29a      	uxth	r2, r3
 8001290:	2332      	movs	r3, #50	; 0x32
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <_write+0x48>)
 8001296:	f004 f831 	bl	80052fc <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x34>
		ITM_SendChar(*ptr++);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffc1 	bl	8001230 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x20>
	}
	return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000a48 	.word	0x20000a48
 80012cc:	00000000 	.word	0x00000000

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fd75 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f935 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f7ff ff13 	bl	8001108 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012e2:	f000 fcd3 	bl	8001c8c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80012e6:	f000 f9dd 	bl	80016a4 <MX_RTC_Init>
  MX_SPI2_Init();
 80012ea:	f000 fa63 	bl	80017b4 <MX_SPI2_Init>
  MX_TIM16_Init();
 80012ee:	f000 fc3b 	bl	8001b68 <MX_TIM16_Init>
  MX_TIM17_Init();
 80012f2:	f000 fc61 	bl	8001bb8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80012f6:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <main+0x228>)
 80012f8:	4a80      	ldr	r2, [pc, #512]	; (80014fc <main+0x22c>)
 80012fa:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 80012fc:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <main+0x228>)
 80012fe:	2201      	movs	r2, #1
 8001300:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8001302:	4b7d      	ldr	r3, [pc, #500]	; (80014f8 <main+0x228>)
 8001304:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
  SX1278_hw.nss.pin = NSS_Pin;
 800130a:	4b7b      	ldr	r3, [pc, #492]	; (80014f8 <main+0x228>)
 800130c:	2210      	movs	r2, #16
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8001310:	4b79      	ldr	r3, [pc, #484]	; (80014f8 <main+0x228>)
 8001312:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <main+0x22c>)
 8001314:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8001316:	4b78      	ldr	r3, [pc, #480]	; (80014f8 <main+0x228>)
 8001318:	2202      	movs	r2, #2
 800131a:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi2;
 800131c:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <main+0x228>)
 800131e:	4a78      	ldr	r2, [pc, #480]	; (8001500 <main+0x230>)
 8001320:	631a      	str	r2, [r3, #48]	; 0x30

  SX1278.hw = &SX1278_hw;
 8001322:	4b78      	ldr	r3, [pc, #480]	; (8001504 <main+0x234>)
 8001324:	4a74      	ldr	r2, [pc, #464]	; (80014f8 <main+0x228>)
 8001326:	601a      	str	r2, [r3, #0]
  printf("Configuring LoRa module\r\n");
 8001328:	4877      	ldr	r0, [pc, #476]	; (8001508 <main+0x238>)
 800132a:	f004 fcf5 	bl	8005d18 <puts>
  //node addr is 1
  SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM,120, SX1278_LORA_SF_7,
 800132e:	230a      	movs	r3, #10
 8001330:	9307      	str	r3, [sp, #28]
 8001332:	2301      	movs	r3, #1
 8001334:	9306      	str	r3, [sp, #24]
 8001336:	2301      	movs	r3, #1
 8001338:	9305      	str	r3, [sp, #20]
 800133a:	2300      	movs	r3, #0
 800133c:	9304      	str	r3, [sp, #16]
 800133e:	2308      	movs	r3, #8
 8001340:	9303      	str	r3, [sp, #12]
 8001342:	2301      	movs	r3, #1
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2378      	movs	r3, #120	; 0x78
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2301      	movs	r3, #1
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	a368      	add	r3, pc, #416	; (adr r3, 80014f0 <main+0x220>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	486b      	ldr	r0, [pc, #428]	; (8001504 <main+0x234>)
 8001356:	f7ff fbcb 	bl	8000af0 <SX1278_init>
		  SX1278_LORA_BW_250KHZ, SX1278_LORA_CR_4_5,1, SX1278_LORA_CRC_DIS, 10);
  printf("Done configuring LoRaModule\r\n");
 800135a:	486c      	ldr	r0, [pc, #432]	; (800150c <main+0x23c>)
 800135c:	f004 fcdc 	bl	8005d18 <puts>
  ret = SX1278_LoRaEntryTx(&SX1278, 255, 2000);
 8001360:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001364:	21ff      	movs	r1, #255	; 0xff
 8001366:	4867      	ldr	r0, [pc, #412]	; (8001504 <main+0x234>)
 8001368:	f7ff fb2c 	bl	80009c4 <SX1278_LoRaEntryTx>
 800136c:	4602      	mov	r2, r0
 800136e:	4b68      	ldr	r3, [pc, #416]	; (8001510 <main+0x240>)
 8001370:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  switch(state)
 8001372:	4b68      	ldr	r3, [pc, #416]	; (8001514 <main+0x244>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d041      	beq.n	80013fe <main+0x12e>
 800137a:	2b02      	cmp	r3, #2
 800137c:	d07a      	beq.n	8001474 <main+0x1a4>
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f7      	bne.n	8001372 <main+0xa2>
		  {
		  case 0:
			  packet_sent.packnum = message;
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <main+0x248>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4b64      	ldr	r3, [pc, #400]	; (800151c <main+0x24c>)
 800138a:	605a      	str	r2, [r3, #4]
			  message_length = sprintf(buffer,"Hello D");
 800138c:	4a64      	ldr	r2, [pc, #400]	; (8001520 <main+0x250>)
 800138e:	4b65      	ldr	r3, [pc, #404]	; (8001524 <main+0x254>)
 8001390:	cb03      	ldmia	r3!, {r0, r1}
 8001392:	6010      	str	r0, [r2, #0]
 8001394:	6051      	str	r1, [r2, #4]
 8001396:	2207      	movs	r2, #7
 8001398:	4b63      	ldr	r3, [pc, #396]	; (8001528 <main+0x258>)
 800139a:	601a      	str	r2, [r3, #0]
//			  HAL_Delay(1000);
			  ret = SX1278_LoRaEntryTx(&SX1278, 255, 2000);
 800139c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013a0:	21ff      	movs	r1, #255	; 0xff
 80013a2:	4858      	ldr	r0, [pc, #352]	; (8001504 <main+0x234>)
 80013a4:	f7ff fb0e 	bl	80009c4 <SX1278_LoRaEntryTx>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b59      	ldr	r3, [pc, #356]	; (8001510 <main+0x240>)
 80013ac:	601a      	str	r2, [r3, #0]
			  ret = SX1278_LoRaTxPacket(&SX1278, &packet_sent, (uint8_t*)buffer, 255, 2000, 2);
 80013ae:	2302      	movs	r3, #2
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	23ff      	movs	r3, #255	; 0xff
 80013ba:	4a59      	ldr	r2, [pc, #356]	; (8001520 <main+0x250>)
 80013bc:	4957      	ldr	r1, [pc, #348]	; (800151c <main+0x24c>)
 80013be:	4851      	ldr	r0, [pc, #324]	; (8001504 <main+0x234>)
 80013c0:	f7ff fb58 	bl	8000a74 <SX1278_LoRaTxPacket>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <main+0x240>)
 80013c8:	601a      	str	r2, [r3, #0]
			  if (ret == 1){
 80013ca:	4b51      	ldr	r3, [pc, #324]	; (8001510 <main+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d111      	bne.n	80013f6 <main+0x126>
				  SX1278_copypacket(&previous_pack, &packet_sent);
 80013d2:	4952      	ldr	r1, [pc, #328]	; (800151c <main+0x24c>)
 80013d4:	4855      	ldr	r0, [pc, #340]	; (800152c <main+0x25c>)
 80013d6:	f7ff fd22 	bl	8000e1e <SX1278_copypacket>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013da:	2120      	movs	r1, #32
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f001 f878 	bl	80024d4 <HAL_GPIO_TogglePin>
				  state = 1 ; message++;
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <main+0x244>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <main+0x248>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <main+0x248>)
 80013f2:	6013      	str	r3, [r2, #0]
			  }
			  else state = 0;
			  break;
 80013f4:	e07b      	b.n	80014ee <main+0x21e>
			  else state = 0;
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <main+0x244>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
			  break;
 80013fc:	e077      	b.n	80014ee <main+0x21e>

		  case 1:
			  //wait for ack
//			  HAL_Delay(200);
			  retack = SX1278_LoRaEntryRx(&SX1278, 255, 2000);
 80013fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001402:	21ff      	movs	r1, #255	; 0xff
 8001404:	483f      	ldr	r0, [pc, #252]	; (8001504 <main+0x234>)
 8001406:	f7ff fa4e 	bl	80008a6 <SX1278_LoRaEntryRx>
 800140a:	4602      	mov	r2, r0
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <main+0x260>)
 800140e:	601a      	str	r2, [r3, #0]
			  HAL_Delay(800);
 8001410:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001414:	f000 fd52 	bl	8001ebc <HAL_Delay>
			  retack = SX1278_LoRaRxPacketACK(&SX1278, &ack, &packet_sent);
 8001418:	4a40      	ldr	r2, [pc, #256]	; (800151c <main+0x24c>)
 800141a:	4946      	ldr	r1, [pc, #280]	; (8001534 <main+0x264>)
 800141c:	4839      	ldr	r0, [pc, #228]	; (8001504 <main+0x234>)
 800141e:	f7ff faa7 	bl	8000970 <SX1278_LoRaRxPacketACK>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <main+0x260>)
 8001428:	601a      	str	r2, [r3, #0]
			  comp = SX1278_Compare(&SX1278, &ack, &packet_sent);
 800142a:	4a3c      	ldr	r2, [pc, #240]	; (800151c <main+0x24c>)
 800142c:	4941      	ldr	r1, [pc, #260]	; (8001534 <main+0x264>)
 800142e:	4835      	ldr	r0, [pc, #212]	; (8001504 <main+0x234>)
 8001430:	f7ff fcc4 	bl	8000dbc <SX1278_Compare>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <main+0x268>)
 800143a:	701a      	strb	r2, [r3, #0]
			  if (retack > 0)state = 0;
 800143c:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <main+0x260>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	dd09      	ble.n	8001458 <main+0x188>
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <main+0x244>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
				  }
				  HAL_TIM_Base_Stop(&htim16);
				  state = 2;
				  ack_retrying = 1;
			  }
			  break;
 800144a:	e050      	b.n	80014ee <main+0x21e>
					  HAL_TIM_Base_Start_IT(&htim16);
 800144c:	483b      	ldr	r0, [pc, #236]	; (800153c <main+0x26c>)
 800144e:	f003 fc97 	bl	8004d80 <HAL_TIM_Base_Start_IT>
					  state = 1;
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <main+0x244>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
				  while(ack_retrying) {
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <main+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f5      	bne.n	800144c <main+0x17c>
				  HAL_TIM_Base_Stop(&htim16);
 8001460:	4836      	ldr	r0, [pc, #216]	; (800153c <main+0x26c>)
 8001462:	f003 fc66 	bl	8004d32 <HAL_TIM_Base_Stop>
				  state = 2;
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <main+0x244>)
 8001468:	2202      	movs	r2, #2
 800146a:	601a      	str	r2, [r3, #0]
				  ack_retrying = 1;
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <main+0x270>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
			  break;
 8001472:	e03c      	b.n	80014ee <main+0x21e>

		  case 2:

			  if (retry <= 3){
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <main+0x274>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b03      	cmp	r3, #3
 800147a:	dc27      	bgt.n	80014cc <main+0x1fc>
//				  message_length = sprintf(buffer,"Hello D");
//				  HAL_Delay(1000);
				  ret = SX1278_LoRaEntryTx(&SX1278, 255, 2000);
 800147c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001480:	21ff      	movs	r1, #255	; 0xff
 8001482:	4820      	ldr	r0, [pc, #128]	; (8001504 <main+0x234>)
 8001484:	f7ff fa9e 	bl	80009c4 <SX1278_LoRaEntryTx>
 8001488:	4602      	mov	r2, r0
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <main+0x240>)
 800148c:	601a      	str	r2, [r3, #0]
				  ret = SX1278_LoRaTxPacketRetry(&SX1278, &previous_pack, 2,2000);
 800148e:	23d0      	movs	r3, #208	; 0xd0
 8001490:	2202      	movs	r2, #2
 8001492:	4926      	ldr	r1, [pc, #152]	; (800152c <main+0x25c>)
 8001494:	481b      	ldr	r0, [pc, #108]	; (8001504 <main+0x234>)
 8001496:	f7ff fcfb 	bl	8000e90 <SX1278_LoRaTxPacketRetry>
 800149a:	4602      	mov	r2, r0
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <main+0x240>)
 800149e:	601a      	str	r2, [r3, #0]
				  if (ret == 1){
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <main+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d10e      	bne.n	80014c6 <main+0x1f6>
					  state = 1;retry ++;packet_sent.retry = retry;}
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <main+0x244>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <main+0x274>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a23      	ldr	r2, [pc, #140]	; (8001544 <main+0x274>)
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <main+0x274>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <main+0x24c>)
 80014c0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 80014c4:	e002      	b.n	80014cc <main+0x1fc>
				  else state = 2;}
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <main+0x244>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
			  if (retry > 3){
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <main+0x274>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	f77f af4e 	ble.w	8001372 <main+0xa2>
				  state = 0;retry = 0;packet_sent.retry = retry;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <main+0x244>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <main+0x274>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <main+0x274>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <main+0x24c>)
 80014ea:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	  switch(state)
 80014ee:	e740      	b.n	8001372 <main+0xa2>
 80014f0:	19cf0e40 	.word	0x19cf0e40
 80014f4:	00000000 	.word	0x00000000
 80014f8:	200008f4 	.word	0x200008f4
 80014fc:	48000400 	.word	0x48000400
 8001500:	2000094c 	.word	0x2000094c
 8001504:	200007d0 	.word	0x200007d0
 8001508:	08006548 	.word	0x08006548
 800150c:	08006564 	.word	0x08006564
 8001510:	200008f0 	.word	0x200008f0
 8001514:	2000009c 	.word	0x2000009c
 8001518:	20000098 	.word	0x20000098
 800151c:	200000b0 	.word	0x200000b0
 8001520:	200003cc 	.word	0x200003cc
 8001524:	08006584 	.word	0x08006584
 8001528:	200002c0 	.word	0x200002c0
 800152c:	200001b8 	.word	0x200001b8
 8001530:	200005cc 	.word	0x200005cc
 8001534:	200002c4 	.word	0x200002c4
 8001538:	200000a0 	.word	0x200000a0
 800153c:	200009fc 	.word	0x200009fc
 8001540:	20000000 	.word	0x20000000
 8001544:	20000094 	.word	0x20000094

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0b8      	sub	sp, #224	; 0xe0
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001552:	2244      	movs	r2, #68	; 0x44
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 fb7a 	bl	8005c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2288      	movs	r2, #136	; 0x88
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fb6c 	bl	8005c50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001578:	230a      	movs	r3, #10
 800157a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001586:	2310      	movs	r3, #16
 8001588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015a4:	230a      	movs	r3, #10
 80015a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015aa:	2307      	movs	r3, #7
 80015ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 f81d 	bl	8002600 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80015cc:	f000 f862 	bl	8001694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015f2:	2104      	movs	r1, #4
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fbe9 	bl	8002dcc <HAL_RCC_ClockConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001600:	f000 f848 	bl	8001694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8001604:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8001608:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800160a:	2300      	movs	r3, #0
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800160e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fddb 	bl	80031d4 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001624:	f000 f836 	bl	8001694 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001628:	f44f 7000 	mov.w	r0, #512	; 0x200
 800162c:	f000 ff92 	bl	8002554 <HAL_PWREx_ControlVoltageScaling>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001636:	f000 f82d 	bl	8001694 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	37e0      	adds	r7, #224	; 0xe0
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d102      	bne.n	800165a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ack_retrying = 0;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
	}
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200009fc 	.word	0x200009fc
 800166c:	20000000 	.word	0x20000000

08001670 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DIO0_Pin){
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <HAL_GPIO_EXTI_Callback+0x16>

	printf("interrupt occured\r\n");
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <HAL_GPIO_EXTI_Callback+0x20>)
 8001682:	f004 fb49 	bl	8005d18 <puts>
	}
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	0800658c 	.word	0x0800658c

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <MX_RTC_Init+0xc4>)
 80016be:	4a2b      	ldr	r2, [pc, #172]	; (800176c <MX_RTC_Init+0xc8>)
 80016c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <MX_RTC_Init+0xc4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MX_RTC_Init+0xc4>)
 80016ca:	227f      	movs	r2, #127	; 0x7f
 80016cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <MX_RTC_Init+0xc4>)
 80016d0:	22ff      	movs	r2, #255	; 0xff
 80016d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <MX_RTC_Init+0xc4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <MX_RTC_Init+0xc4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_RTC_Init+0xc4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MX_RTC_Init+0xc4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ec:	481e      	ldr	r0, [pc, #120]	; (8001768 <MX_RTC_Init+0xc4>)
 80016ee:	f002 fa21 	bl	8003b34 <HAL_RTC_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80016f8:	f7ff ffcc 	bl	8001694 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001700:	2300      	movs	r3, #0
 8001702:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001704:	2300      	movs	r3, #0
 8001706:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2201      	movs	r2, #1
 8001714:	4619      	mov	r1, r3
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <MX_RTC_Init+0xc4>)
 8001718:	f002 fa87 	bl	8003c2a <HAL_RTC_SetTime>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001722:	f7ff ffb7 	bl	8001694 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001726:	2301      	movs	r3, #1
 8001728:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800172a:	2301      	movs	r3, #1
 800172c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800172e:	2301      	movs	r3, #1
 8001730:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001732:	2300      	movs	r3, #0
 8001734:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	2201      	movs	r2, #1
 800173a:	4619      	mov	r1, r3
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <MX_RTC_Init+0xc4>)
 800173e:	f002 fb11 	bl	8003d64 <HAL_RTC_SetDate>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001748:	f7ff ffa4 	bl	8001694 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_RTC_Init+0xc4>)
 8001752:	f002 fc45 	bl	8003fe0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800175c:	f7ff ff9a 	bl	8001694 <Error_Handler>
  }

}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000928 	.word	0x20000928
 800176c:	40002800 	.word	0x40002800

08001770 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_RTC_MspInit+0x3c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10f      	bne.n	80017a2 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RTC_MspInit+0x40>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RTC_MspInit+0x40>)
 800178a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2003      	movs	r0, #3
 8001798:	f000 fc8d 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 fca6 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40002800 	.word	0x40002800
 80017b0:	40021000 	.word	0x40021000

080017b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_SPI2_Init+0x74>)
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <MX_SPI2_Init+0x78>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_SPI2_Init+0x74>)
 80017c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_SPI2_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_SPI2_Init+0x74>)
 80017ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_SPI2_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_SPI2_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_SPI2_Init+0x74>)
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_SPI2_Init+0x74>)
 80017ea:	2218      	movs	r2, #24
 80017ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_SPI2_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_SPI2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_SPI2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_SPI2_Init+0x74>)
 8001802:	2207      	movs	r2, #7
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_SPI2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_SPI2_Init+0x74>)
 800180e:	2208      	movs	r2, #8
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_SPI2_Init+0x74>)
 8001814:	f002 fca8 	bl	8004168 <HAL_SPI_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800181e:	f7ff ff39 	bl	8001694 <Error_Handler>
  }

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000094c 	.word	0x2000094c
 800182c:	40003800 	.word	0x40003800

08001830 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <HAL_SPI_MspInit+0xb4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d144      	bne.n	80018dc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_SPI_MspInit+0xb8>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800189a:	230c      	movs	r3, #12
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018aa:	2305      	movs	r3, #5
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <HAL_SPI_MspInit+0xbc>)
 80018b6:	f000 fc35 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018cc:	2305      	movs	r3, #5
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <HAL_SPI_MspInit+0xc0>)
 80018d8:	f000 fc24 	bl	8002124 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40003800 	.word	0x40003800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000800 	.word	0x48000800
 80018f0:	48000400 	.word	0x48000400

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x44>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_MspInit+0x44>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6613      	str	r3, [r2, #96]	; 0x60
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x44>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x44>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 fa78 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <RTC_WKUP_IRQHandler+0x10>)
 8001996:	f002 fbb7 	bl	8004108 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000928 	.word	0x20000928

080019a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f000 fdad 	bl	8002508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019ba:	f003 fa51 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200009fc 	.word	0x200009fc

080019c8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80019ce:	f003 fa47 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200009b0 	.word	0x200009b0

080019dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019e4:	f000 fd90 	bl	8002508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e00a      	b.n	8001a14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019fe:	f3af 8000 	nop.w
 8001a02:	4601      	mov	r1, r0
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf0      	blt.n	80019fe <_read+0x12>
	}

return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f004 f89c 	bl	8005bfc <__errno>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20018000 	.word	0x20018000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	200000a4 	.word	0x200000a4
 8001af8:	20000ad0 	.word	0x20000ad0

08001afc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <SystemInit+0x64>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <SystemInit+0x64>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <SystemInit+0x68>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <SystemInit+0x68>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <SystemInit+0x68>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <SystemInit+0x68>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <SystemInit+0x68>)
 8001b28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <SystemInit+0x68>)
 8001b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <SystemInit+0x68>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <SystemInit+0x68>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <SystemInit+0x68>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SystemInit+0x64>)
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	609a      	str	r2, [r3, #8]
#endif
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00
 8001b64:	40021000 	.word	0x40021000

08001b68 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b6e:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <MX_TIM16_Init+0x4c>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 10000-1;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b74:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000-1;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b82:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001b86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b9c:	f003 f872 	bl	8004c84 <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001ba6:	f7ff fd75 	bl	8001694 <Error_Handler>
  }

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200009fc 	.word	0x200009fc
 8001bb4:	40014400 	.word	0x40014400

08001bb8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001bbe:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <MX_TIM17_Init+0x4c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001bc4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bc8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 6000-1;
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001bd2:	f241 726f 	movw	r2, #5999	; 0x176f
 8001bd6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_TIM17_Init+0x48>)
 8001bec:	f003 f84a 	bl	8004c84 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001bf6:	f7ff fd4d 	bl	8001694 <Error_Handler>
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200009b0 	.word	0x200009b0
 8001c04:	40014800 	.word	0x40014800

08001c08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_TIM_Base_MspInit+0x78>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d114      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_TIM_Base_MspInit+0x7c>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_TIM_Base_MspInit+0x7c>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6613      	str	r3, [r2, #96]	; 0x60
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_TIM_Base_MspInit+0x7c>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2019      	movs	r0, #25
 8001c38:	f000 fa3d 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c3c:	2019      	movs	r0, #25
 8001c3e:	f000 fa56 	bl	80020ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001c42:	e018      	b.n	8001c76 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM17)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <HAL_TIM_Base_MspInit+0x80>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d113      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_Base_MspInit+0x7c>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_TIM_Base_MspInit+0x7c>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_TIM_Base_MspInit+0x7c>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	201a      	movs	r0, #26
 8001c6c:	f000 fa23 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c70:	201a      	movs	r0, #26
 8001c72:	f000 fa3c 	bl	80020ee <HAL_NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40014400 	.word	0x40014400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40014800 	.word	0x40014800

08001c8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001c92:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <MX_USART2_UART_Init+0x5c>)
 8001c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cd0:	f003 fac6 	bl	8005260 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cda:	f7ff fcdb 	bl	8001694 <Error_Handler>
  }

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000a48 	.word	0x20000a48
 8001ce8:	40004400 	.word	0x40004400

08001cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_UART_MspInit+0x7c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d128      	bne.n	8001d60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0x80>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_UART_MspInit+0x80>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_UART_MspInit+0x80>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0x80>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_UART_MspInit+0x80>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_UART_MspInit+0x80>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5c:	f000 f9e2 	bl	8002124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40021000 	.word	0x40021000

08001d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d74:	f7ff fec2 	bl	8001afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d7a:	e003      	b.n	8001d84 <LoopCopyDataInit>

08001d7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d82:	3104      	adds	r1, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d84:	480a      	ldr	r0, [pc, #40]	; (8001db0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d8c:	d3f6      	bcc.n	8001d7c <CopyDataInit>
	ldr	r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d90:	e002      	b.n	8001d98 <LoopFillZerobss>

08001d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d94:	f842 3b04 	str.w	r3, [r2], #4

08001d98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <LoopForever+0x16>)
	cmp	r2, r3
 8001d9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d9c:	d3f9      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f003 ff33 	bl	8005c08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da2:	f7ff fa95 	bl	80012d0 <main>

08001da6 <LoopForever>:

LoopForever:
    b LoopForever
 8001da6:	e7fe      	b.n	8001da6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001da8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001dac:	0800667c 	.word	0x0800667c
	ldr	r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001db4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001db8:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001dbc:	20000ad0 	.word	0x20000ad0

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_Init+0x3c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <HAL_Init+0x3c>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f000 f960 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 f80f 	bl	8001e04 <HAL_InitTick>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	e001      	b.n	8001df6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df2:	f7ff fd7f 	bl	80018f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40022000 	.word	0x40022000

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_InitTick+0x6c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d023      	beq.n	8001e60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_InitTick+0x70>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_InitTick+0x6c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f96b 	bl	800210a <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d809      	bhi.n	8001e54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 f935 	bl	80020b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_InitTick+0x74>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e007      	b.n	8001e64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e004      	b.n	8001e64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e001      	b.n	8001e64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	20000004 	.word	0x20000004
 8001e78:	20000008 	.word	0x20000008

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c
 8001ea0:	20000ac8 	.word	0x20000ac8

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000ac8 	.word	0x20000ac8

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_Delay+0x40>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	2000000c 	.word	0x2000000c

08001f00 <__NVIC_SetPriorityGrouping>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Config>:
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff8e 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff29 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff3e 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff8e 	bl	8001ff4 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff31 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	e17f      	b.n	8002434 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8171 	beq.w	800242e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d00b      	beq.n	800216c <HAL_GPIO_Init+0x48>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002160:	2b11      	cmp	r3, #17
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b12      	cmp	r3, #18
 800216a:	d130      	bne.n	80021ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a2:	2201      	movs	r2, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 0201 	and.w	r2, r3, #1
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d118      	bne.n	800220c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x128>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b12      	cmp	r3, #18
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	6939      	ldr	r1, [r7, #16]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80ac 	beq.w	800242e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b5e      	ldr	r3, [pc, #376]	; (8002450 <HAL_GPIO_Init+0x32c>)
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	4a5d      	ldr	r2, [pc, #372]	; (8002450 <HAL_GPIO_Init+0x32c>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6613      	str	r3, [r2, #96]	; 0x60
 80022e2:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <HAL_GPIO_Init+0x32c>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022ee:	4a59      	ldr	r2, [pc, #356]	; (8002454 <HAL_GPIO_Init+0x330>)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002318:	d025      	beq.n	8002366 <HAL_GPIO_Init+0x242>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4e      	ldr	r2, [pc, #312]	; (8002458 <HAL_GPIO_Init+0x334>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01f      	beq.n	8002362 <HAL_GPIO_Init+0x23e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_GPIO_Init+0x338>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d019      	beq.n	800235e <HAL_GPIO_Init+0x23a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_GPIO_Init+0x33c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_GPIO_Init+0x236>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <HAL_GPIO_Init+0x340>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00d      	beq.n	8002356 <HAL_GPIO_Init+0x232>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_GPIO_Init+0x344>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x22e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a49      	ldr	r2, [pc, #292]	; (800246c <HAL_GPIO_Init+0x348>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_GPIO_Init+0x22a>
 800234a:	2306      	movs	r3, #6
 800234c:	e00c      	b.n	8002368 <HAL_GPIO_Init+0x244>
 800234e:	2307      	movs	r3, #7
 8002350:	e00a      	b.n	8002368 <HAL_GPIO_Init+0x244>
 8002352:	2305      	movs	r3, #5
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x244>
 8002356:	2304      	movs	r3, #4
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x244>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x244>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x244>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x244>
 8002366:	2300      	movs	r3, #0
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002378:	4936      	ldr	r1, [pc, #216]	; (8002454 <HAL_GPIO_Init+0x330>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_GPIO_Init+0x34c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <HAL_GPIO_Init+0x34c>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x34c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_GPIO_Init+0x34c>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_GPIO_Init+0x34c>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_GPIO_Init+0x34c>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_GPIO_Init+0x34c>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	43db      	mvns	r3, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_GPIO_Init+0x34c>)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	f47f ae78 	bne.w	8002134 <HAL_GPIO_Init+0x10>
  }
}
 8002444:	bf00      	nop
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000
 8002458:	48000400 	.word	0x48000400
 800245c:	48000800 	.word	0x48000800
 8002460:	48000c00 	.word	0x48000c00
 8002464:	48001000 	.word	0x48001000
 8002468:	48001400 	.word	0x48001400
 800246c:	48001800 	.word	0x48001800
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4013      	ands	r3, r2
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43d9      	mvns	r1, r3
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	400b      	ands	r3, r1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f8a2 	bl	8001670 <HAL_GPIO_EXTI_Callback>
  }
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_PWREx_GetVoltageRange+0x18>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40007000 	.word	0x40007000

08002554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002562:	d130      	bne.n	80025c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002570:	d038      	beq.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002598:	e002      	b.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3b01      	subs	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d102      	bne.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f2      	bne.n	800259a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c0:	d110      	bne.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e00f      	b.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d007      	beq.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40007000 	.word	0x40007000
 80025f8:	20000004 	.word	0x20000004
 80025fc:	431bde83 	.word	0x431bde83

08002600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e3d4      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4ba1      	ldr	r3, [pc, #644]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261c:	4b9e      	ldr	r3, [pc, #632]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80e4 	beq.w	80027fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_RCC_OscConfig+0x4a>
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b0c      	cmp	r3, #12
 800263e:	f040 808b 	bne.w	8002758 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b01      	cmp	r3, #1
 8002646:	f040 8087 	bne.w	8002758 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264a:	4b93      	ldr	r3, [pc, #588]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e3ac      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_RCC_OscConfig+0x7c>
 8002672:	4b89      	ldr	r3, [pc, #548]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267a:	e005      	b.n	8002688 <HAL_RCC_OscConfig+0x88>
 800267c:	4b86      	ldr	r3, [pc, #536]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002688:	4293      	cmp	r3, r2
 800268a:	d223      	bcs.n	80026d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fd3f 	bl	8003114 <RCC_SetFlashLatencyFromMSIRange>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e38d      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a0:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4977      	ldr	r1, [pc, #476]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026be:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	4972      	ldr	r1, [pc, #456]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
 80026d2:	e025      	b.n	8002720 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d4:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6f      	ldr	r2, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	496a      	ldr	r1, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f2:	4b69      	ldr	r3, [pc, #420]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	4965      	ldr	r1, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fcff 	bl	8003114 <RCC_SetFlashLatencyFromMSIRange>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e34d      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002720:	f000 fc36 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002724:	4601      	mov	r1, r0
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	4a5a      	ldr	r2, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x29c>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa21 f303 	lsr.w	r3, r1, r3
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_OscConfig+0x2a0>)
 800273e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002740:	4b58      	ldr	r3, [pc, #352]	; (80028a4 <HAL_RCC_OscConfig+0x2a4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fb5d 	bl	8001e04 <HAL_InitTick>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d052      	beq.n	80027fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	e331      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d032      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002760:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800276c:	f7ff fb9a 	bl	8001ea4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002774:	f7ff fb96 	bl	8001ea4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e31a      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002786:	4b44      	ldr	r3, [pc, #272]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a40      	ldr	r2, [pc, #256]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	493b      	ldr	r1, [pc, #236]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	4936      	ldr	r1, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
 80027c4:	e01a      	b.n	80027fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d2:	f7ff fb67 	bl	8001ea4 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027da:	f7ff fb63 	bl	8001ea4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e2e7      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x1da>
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d074      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x21a>
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d10e      	bne.n	8002832 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d10b      	bne.n	8002832 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d064      	beq.n	80028f0 <HAL_RCC_OscConfig+0x2f0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d160      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e2c4      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x24a>
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a15      	ldr	r2, [pc, #84]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e01d      	b.n	8002886 <HAL_RCC_OscConfig+0x286>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x26e>
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 800285a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0x286>
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x298>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7ff fb09 	bl	8001ea4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002894:	e011      	b.n	80028ba <HAL_RCC_OscConfig+0x2ba>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	080065c0 	.word	0x080065c0
 80028a0:	20000004 	.word	0x20000004
 80028a4:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff fafc 	bl	8001ea4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e280      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ba:	4baf      	ldr	r3, [pc, #700]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2a8>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff faec 	bl	8001ea4 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff fae8 	bl	8001ea4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e26c      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e2:	4ba5      	ldr	r3, [pc, #660]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2d0>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d060      	beq.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x310>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d119      	bne.n	800293e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d116      	bne.n	800293e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002910:	4b99      	ldr	r3, [pc, #612]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x328>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e249      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b93      	ldr	r3, [pc, #588]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	4990      	ldr	r1, [pc, #576]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293c:	e040      	b.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d023      	beq.n	800298e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002946:	4b8c      	ldr	r3, [pc, #560]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a8b      	ldr	r2, [pc, #556]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff faa7 	bl	8001ea4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295a:	f7ff faa3 	bl	8001ea4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e227      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	497c      	ldr	r1, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	e018      	b.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a79      	ldr	r2, [pc, #484]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7ff fa83 	bl	8001ea4 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7ff fa7f 	bl	8001ea4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e203      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b4:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d03c      	beq.n	8002a46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	4a67      	ldr	r2, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff fa5e 	bl	8001ea4 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7ff fa5a 	bl	8001ea4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1de      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fe:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ef      	beq.n	80029ec <HAL_RCC_OscConfig+0x3ec>
 8002a0c:	e01b      	b.n	8002a46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7ff fa41 	bl	8001ea4 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a26:	f7ff fa3d 	bl	8001ea4 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1c1      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a38:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ef      	bne.n	8002a26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80a6 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a58:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	4a43      	ldr	r2, [pc, #268]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a70:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <HAL_RCC_OscConfig+0x57c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d118      	bne.n	8002abe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8c:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_OscConfig+0x57c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3a      	ldr	r2, [pc, #232]	; (8002b7c <HAL_RCC_OscConfig+0x57c>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a98:	f7ff fa04 	bl	8001ea4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7ff fa00 	bl	8001ea4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e184      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCC_OscConfig+0x57c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4d8>
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad6:	e024      	b.n	8002b22 <HAL_RCC_OscConfig+0x522>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d110      	bne.n	8002b02 <HAL_RCC_OscConfig+0x502>
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af0:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b00:	e00f      	b.n	8002b22 <HAL_RCC_OscConfig+0x522>
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002b1a:	f023 0304 	bic.w	r3, r3, #4
 8002b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7ff f9bb 	bl	8001ea4 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7ff f9b7 	bl	8001ea4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e139      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ed      	beq.n	8002b32 <HAL_RCC_OscConfig+0x532>
 8002b56:	e01a      	b.n	8002b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff f9a4 	bl	8001ea4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5e:	e00f      	b.n	8002b80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7ff f9a0 	bl	8001ea4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d906      	bls.n	8002b80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e122      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b80:	4b90      	ldr	r3, [pc, #576]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e8      	bne.n	8002b60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7ffb      	ldrb	r3, [r7, #31]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b8b      	ldr	r3, [pc, #556]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a8a      	ldr	r2, [pc, #552]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8108 	beq.w	8002dba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	f040 80d0 	bne.w	8002d54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bb4:	4b83      	ldr	r3, [pc, #524]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d130      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d127      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d11f      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf4:	2a07      	cmp	r2, #7
 8002bf6:	bf14      	ite	ne
 8002bf8:	2201      	movne	r2, #1
 8002bfa:	2200      	moveq	r2, #0
 8002bfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d113      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d06e      	beq.n	8002d08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d069      	beq.n	8002d04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b7      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a5c      	ldr	r2, [pc, #368]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c58:	f7ff f924 	bl	8001ea4 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7ff f920 	bl	8001ea4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0a4      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c72:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7e:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_RCC_OscConfig+0x7c8>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c98:	0212      	lsls	r2, r2, #8
 8002c9a:	4311      	orrs	r1, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ca0:	0852      	lsrs	r2, r2, #1
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	0552      	lsls	r2, r2, #21
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cac:	0852      	lsrs	r2, r2, #1
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	0652      	lsls	r2, r2, #25
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb8:	0912      	lsrs	r2, r2, #4
 8002cba:	0452      	lsls	r2, r2, #17
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	4941      	ldr	r1, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3e      	ldr	r2, [pc, #248]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd0:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cdc:	f7ff f8e2 	bl	8001ea4 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7ff f8de 	bl	8001ea4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e062      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf6:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d02:	e05a      	b.n	8002dba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e059      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d08:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d152      	bne.n	8002dba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d2c:	f7ff f8ba 	bl	8001ea4 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7ff f8b6 	bl	8001ea4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e03a      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x734>
 8002d52:	e032      	b.n	8002dba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d02d      	beq.n	8002db6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d78:	f023 0303 	bic.w	r3, r3, #3
 8002d7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002d84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7ff f889 	bl	8001ea4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7ff f885 	bl	8001ea4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e009      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_OscConfig+0x7c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x796>
 8002db4:	e001      	b.n	8002dba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	f99d808c 	.word	0xf99d808c

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0c8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d910      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4961      	ldr	r1, [pc, #388]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b0      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d04c      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d121      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e09e      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d115      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e092      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e54:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e086      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e07e      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e74:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 0203 	bic.w	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	493f      	ldr	r1, [pc, #252]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e86:	f7ff f80d 	bl	8001ea4 <HAL_GetTick>
 8002e8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8e:	f7ff f809 	bl	8001ea4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e066      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 020c 	and.w	r2, r3, #12
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d1eb      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	492c      	ldr	r1, [pc, #176]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d210      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	4924      	ldr	r1, [pc, #144]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e036      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4918      	ldr	r1, [pc, #96]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4910      	ldr	r1, [pc, #64]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f42:	f000 f825 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f46:	4601      	mov	r1, r0
 8002f48:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	5cd3      	ldrb	r3, [r2, r3]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe ff4c 	bl	8001e04 <HAL_InitTick>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40021000 	.word	0x40021000
 8002f84:	080065c0 	.word	0x080065c0
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	20000008 	.word	0x20000008

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d121      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d11e      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc4:	4b33      	ldr	r3, [pc, #204]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e005      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fec:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10d      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d102      	bne.n	800300e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003008:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_GetSysClockFreq+0x10c>)
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e004      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d101      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003014:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d133      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0xa4>
 800302e:	2b03      	cmp	r3, #3
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0xaa>
 8003032:	e005      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003036:	617b      	str	r3, [r7, #20]
      break;
 8003038:	e005      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800303c:	617b      	str	r3, [r7, #20]
      break;
 800303e:	e002      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	617b      	str	r3, [r7, #20]
      break;
 8003044:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	3301      	adds	r3, #1
 8003052:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	fb02 f203 	mul.w	r2, r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_GetSysClockFreq+0x104>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0e5b      	lsrs	r3, r3, #25
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	3301      	adds	r3, #1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003086:	69bb      	ldr	r3, [r7, #24]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3724      	adds	r7, #36	; 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000
 8003098:	080065d8 	.word	0x080065d8
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200

080030a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030c0:	f7ff fff0 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030c4:	4601      	mov	r1, r0
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	080065d0 	.word	0x080065d0

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030ec:	f7ff ffda 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030f0:	4601      	mov	r1, r0
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0adb      	lsrs	r3, r3, #11
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	080065d0 	.word	0x080065d0

08003114 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003120:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800312c:	f7ff fa04 	bl	8002538 <HAL_PWREx_GetVoltageRange>
 8003130:	6178      	str	r0, [r7, #20]
 8003132:	e014      	b.n	800315e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4a24      	ldr	r2, [pc, #144]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6593      	str	r3, [r2, #88]	; 0x58
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800314c:	f7ff f9f4 	bl	8002538 <HAL_PWREx_GetVoltageRange>
 8003150:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003164:	d10b      	bne.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d919      	bls.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2ba0      	cmp	r3, #160	; 0xa0
 8003170:	d902      	bls.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003172:	2302      	movs	r3, #2
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e013      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003178:	2301      	movs	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e010      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d902      	bls.n	800318a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003184:	2303      	movs	r3, #3
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e00a      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d102      	bne.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003190:	2302      	movs	r3, #2
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e004      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d101      	bne.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800319c:	2301      	movs	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 0207 	bic.w	r2, r3, #7
 80031a8:	4909      	ldr	r1, [pc, #36]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40022000 	.word	0x40022000

080031d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031dc:	2300      	movs	r3, #0
 80031de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e0:	2300      	movs	r3, #0
 80031e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d03f      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f8:	d01c      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fe:	d802      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003204:	e01f      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003206:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320a:	d003      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800320c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003210:	d01c      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003212:	e018      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003214:	4b85      	ldr	r3, [pc, #532]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a84      	ldr	r2, [pc, #528]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003220:	e015      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fab9 	bl	80037a0 <RCCEx_PLLSAI1_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003232:	e00c      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3320      	adds	r3, #32
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fba0 	bl	8003980 <RCCEx_PLLSAI2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003244:	e003      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	74fb      	strb	r3, [r7, #19]
      break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800324c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003254:	4b75      	ldr	r3, [pc, #468]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003262:	4972      	ldr	r1, [pc, #456]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03f      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003284:	d01c      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003286:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328a:	d802      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003290:	e01f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003296:	d003      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800329c:	d01c      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800329e:	e018      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a0:	4b62      	ldr	r3, [pc, #392]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a61      	ldr	r2, [pc, #388]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ac:	e015      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fa73 	bl	80037a0 <RCCEx_PLLSAI1_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032be:	e00c      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3320      	adds	r3, #32
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb5a 	bl	8003980 <RCCEx_PLLSAI2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	74fb      	strb	r3, [r7, #19]
      break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e0:	4b52      	ldr	r3, [pc, #328]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ee:	494f      	ldr	r1, [pc, #316]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032f6:	e001      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a0 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	4a40      	ldr	r2, [pc, #256]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	; 0x58
 8003330:	4b3e      	ldr	r3, [pc, #248]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333c:	2301      	movs	r3, #1
 800333e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334c:	f7fe fdaa 	bl	8001ea4 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003352:	e009      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe fda6 	bl	8001ea4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	74fb      	strb	r3, [r7, #19]
        break;
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003368:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d15c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003384:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01f      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d019      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	4a20      	ldr	r2, [pc, #128]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe fd65 	bl	8001ea4 <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033dc:	e00b      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fd61 	bl	8001ea4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d902      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	74fb      	strb	r3, [r7, #19]
            break;
 80033f4:	e006      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ec      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341a:	4904      	ldr	r1, [pc, #16]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003422:	e009      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
 8003428:	e006      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003438:	7c7b      	ldrb	r3, [r7, #17]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b9e      	ldr	r3, [pc, #632]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	4a9d      	ldr	r2, [pc, #628]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003456:	4b98      	ldr	r3, [pc, #608]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 0203 	bic.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	4994      	ldr	r1, [pc, #592]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003478:	4b8f      	ldr	r3, [pc, #572]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 020c 	bic.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	498c      	ldr	r1, [pc, #560]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349a:	4b87      	ldr	r3, [pc, #540]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	4983      	ldr	r1, [pc, #524]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034bc:	4b7e      	ldr	r3, [pc, #504]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	497b      	ldr	r1, [pc, #492]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034de:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	4972      	ldr	r1, [pc, #456]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003500:	4b6d      	ldr	r3, [pc, #436]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	496a      	ldr	r1, [pc, #424]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	4961      	ldr	r1, [pc, #388]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003544:	4b5c      	ldr	r3, [pc, #368]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003552:	4959      	ldr	r1, [pc, #356]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003566:	4b54      	ldr	r3, [pc, #336]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	4950      	ldr	r1, [pc, #320]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003588:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	4948      	ldr	r1, [pc, #288]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	493f      	ldr	r1, [pc, #252]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d028      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035da:	4937      	ldr	r1, [pc, #220]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ea:	d106      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ec:	4b32      	ldr	r3, [pc, #200]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a31      	ldr	r2, [pc, #196]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f6:	60d3      	str	r3, [r2, #12]
 80035f8:	e011      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003602:	d10c      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f8c8 	bl	80037a0 <RCCEx_PLLSAI1_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d028      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	491f      	ldr	r1, [pc, #124]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003648:	d106      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003654:	60d3      	str	r3, [r2, #12]
 8003656:	e011      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003660:	d10c      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2101      	movs	r1, #1
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f899 	bl	80037a0 <RCCEx_PLLSAI1_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d02b      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	4908      	ldr	r1, [pc, #32]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a6:	d109      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a02      	ldr	r2, [pc, #8]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b2:	60d3      	str	r3, [r2, #12]
 80036b4:	e014      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f867 	bl	80037a0 <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02f      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fa:	4928      	ldr	r1, [pc, #160]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f844 	bl	80037a0 <RCCEx_PLLSAI1_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d014      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
 8003726:	e011      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003730:	d10c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3320      	adds	r3, #32
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f921 	bl	8003980 <RCCEx_PLLSAI2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003766:	490d      	ldr	r1, [pc, #52]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378a:	4904      	ldr	r1, [pc, #16]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003792:	7cbb      	ldrb	r3, [r7, #18]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000

080037a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ae:	4b73      	ldr	r3, [pc, #460]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d10d      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
       ||
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037d2:	4b6a      	ldr	r3, [pc, #424]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
       ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d044      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e041      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d00c      	beq.n	800380e <RCCEx_PLLSAI1_Config+0x6e>
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d013      	beq.n	8003820 <RCCEx_PLLSAI1_Config+0x80>
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d120      	bne.n	800383e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037fc:	4b5f      	ldr	r3, [pc, #380]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d11d      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380c:	e01a      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800380e:	4b5b      	ldr	r3, [pc, #364]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381e:	e013      	b.n	8003848 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003820:	4b56      	ldr	r3, [pc, #344]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10f      	bne.n	800384c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800383c:	e006      	b.n	800384c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      break;
 8003842:	e004      	b.n	800384e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003844:	bf00      	nop
 8003846:	e002      	b.n	800384e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800384c:	bf00      	nop
    }

    if(status == HAL_OK)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10d      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003854:	4b49      	ldr	r3, [pc, #292]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	3b01      	subs	r3, #1
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	430b      	orrs	r3, r1
 800386a:	4944      	ldr	r1, [pc, #272]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d17d      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a40      	ldr	r2, [pc, #256]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 800387c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003882:	f7fe fb0f 	bl	8001ea4 <HAL_GetTick>
 8003886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003888:	e009      	b.n	800389e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800388a:	f7fe fb0b 	bl	8001ea4 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d902      	bls.n	800389e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	73fb      	strb	r3, [r7, #15]
        break;
 800389c:	e005      	b.n	80038aa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800389e:	4b37      	ldr	r3, [pc, #220]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ef      	bne.n	800388a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d160      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d111      	bne.n	80038da <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b6:	4b31      	ldr	r3, [pc, #196]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6892      	ldr	r2, [r2, #8]
 80038c6:	0211      	lsls	r1, r2, #8
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68d2      	ldr	r2, [r2, #12]
 80038cc:	0912      	lsrs	r2, r2, #4
 80038ce:	0452      	lsls	r2, r2, #17
 80038d0:	430a      	orrs	r2, r1
 80038d2:	492a      	ldr	r1, [pc, #168]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	610b      	str	r3, [r1, #16]
 80038d8:	e027      	b.n	800392a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d112      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e0:	4b26      	ldr	r3, [pc, #152]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	0211      	lsls	r1, r2, #8
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6912      	ldr	r2, [r2, #16]
 80038f6:	0852      	lsrs	r2, r2, #1
 80038f8:	3a01      	subs	r2, #1
 80038fa:	0552      	lsls	r2, r2, #21
 80038fc:	430a      	orrs	r2, r1
 80038fe:	491f      	ldr	r1, [pc, #124]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]
 8003904:	e011      	b.n	800392a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800390e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6892      	ldr	r2, [r2, #8]
 8003916:	0211      	lsls	r1, r2, #8
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6952      	ldr	r2, [r2, #20]
 800391c:	0852      	lsrs	r2, r2, #1
 800391e:	3a01      	subs	r2, #1
 8003920:	0652      	lsls	r2, r2, #25
 8003922:	430a      	orrs	r2, r1
 8003924:	4915      	ldr	r1, [pc, #84]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003934:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7fe fab5 	bl	8001ea4 <HAL_GetTick>
 800393a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800393c:	e009      	b.n	8003952 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800393e:	f7fe fab1 	bl	8001ea4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d902      	bls.n	8003952 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	73fb      	strb	r3, [r7, #15]
          break;
 8003950:	e005      	b.n	800395e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ef      	beq.n	800393e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <RCCEx_PLLSAI1_Config+0x1dc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000

08003980 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800398e:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800399a:	4b65      	ldr	r3, [pc, #404]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d10d      	bne.n	80039c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
       ||
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039b2:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
       ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d044      	beq.n	8003a50 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	e041      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d00c      	beq.n	80039ee <RCCEx_PLLSAI2_Config+0x6e>
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d013      	beq.n	8003a00 <RCCEx_PLLSAI2_Config+0x80>
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d120      	bne.n	8003a1e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039dc:	4b54      	ldr	r3, [pc, #336]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11d      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ec:	e01a      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ee:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d116      	bne.n	8003a28 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fe:	e013      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a00:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10f      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0c:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1c:	e006      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
      break;
 8003a22:	e004      	b.n	8003a2e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a2c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	4939      	ldr	r1, [pc, #228]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d167      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a56:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a62:	f7fe fa1f 	bl	8001ea4 <HAL_GetTick>
 8003a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a68:	e009      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a6a:	f7fe fa1b 	bl	8001ea4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d902      	bls.n	8003a7e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7c:	e005      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1ef      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d14a      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d111      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a96:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6892      	ldr	r2, [r2, #8]
 8003aa6:	0211      	lsls	r1, r2, #8
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68d2      	ldr	r2, [r2, #12]
 8003aac:	0912      	lsrs	r2, r2, #4
 8003aae:	0452      	lsls	r2, r2, #17
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	491f      	ldr	r1, [pc, #124]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	614b      	str	r3, [r1, #20]
 8003ab8:	e011      	b.n	8003ade <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003aba:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	0211      	lsls	r1, r2, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6912      	ldr	r2, [r2, #16]
 8003ad0:	0852      	lsrs	r2, r2, #1
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	0652      	lsls	r2, r2, #25
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	4915      	ldr	r1, [pc, #84]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fe f9db 	bl	8001ea4 <HAL_GetTick>
 8003aee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003af0:	e009      	b.n	8003b06 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af2:	f7fe f9d7 	bl	8001ea4 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d902      	bls.n	8003b06 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	73fb      	strb	r3, [r7, #15]
          break;
 8003b04:	e005      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ef      	beq.n	8003af2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	4903      	ldr	r1, [pc, #12]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d06c      	beq.n	8003c20 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fe08 	bl	8001770 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	22ca      	movs	r2, #202	; 0xca
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2253      	movs	r2, #83	; 0x53
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f9a0 	bl	8003ebe <RTC_EnterInitMode>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d14b      	bne.n	8003c20 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68d2      	ldr	r2, [r2, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	041a      	lsls	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f9a3 	bl	8003f24 <RTC_ExitInitMode>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11b      	bne.n	8003c20 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0203 	bic.w	r2, r2, #3
 8003bf6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c2a:	b590      	push	{r4, r7, lr}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_RTC_SetTime+0x1a>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e08b      	b.n	8003d5c <HAL_RTC_SetTime+0x132>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	22ca      	movs	r2, #202	; 0xca
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2253      	movs	r2, #83	; 0x53
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f92a 	bl	8003ebe <RTC_EnterInitMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d163      	bne.n	8003d3c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d126      	bne.n	8003cc8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f984 	bl	8003fa0 <RTC_ByteToBcd2>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f97d 	bl	8003fa0 <RTC_ByteToBcd2>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003caa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	789b      	ldrb	r3, [r3, #2]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f975 	bl	8003fa0 <RTC_ByteToBcd2>
 8003cb6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cb8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	78db      	ldrb	r3, [r3, #3]
 8003cc0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e018      	b.n	8003cfa <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ce8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cee:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	78db      	ldrb	r3, [r3, #3]
 8003cf4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6899      	ldr	r1, [r3, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8f6 	bl	8003f24 <RTC_ExitInitMode>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	22ff      	movs	r2, #255	; 0xff
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd90      	pop	{r4, r7, pc}

08003d64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_RTC_SetDate+0x1a>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e075      	b.n	8003e6a <HAL_RTC_SetDate+0x106>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10e      	bne.n	8003db2 <HAL_RTC_SetDate+0x4e>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	f023 0310 	bic.w	r3, r3, #16
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	330a      	adds	r3, #10
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11c      	bne.n	8003df2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	78db      	ldrb	r3, [r3, #3]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f8ef 	bl	8003fa0 <RTC_ByteToBcd2>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f8e8 	bl	8003fa0 <RTC_ByteToBcd2>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003dd4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	789b      	ldrb	r3, [r3, #2]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f8e0 	bl	8003fa0 <RTC_ByteToBcd2>
 8003de0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003de2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e00e      	b.n	8003e10 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	78db      	ldrb	r3, [r3, #3]
 8003df6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003dfe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	22ca      	movs	r2, #202	; 0xca
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2253      	movs	r2, #83	; 0x53
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f84c 	bl	8003ebe <RTC_EnterInitMode>
 8003e26:	4603      	mov	r3, r0
 8003e28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e3e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f86f 	bl	8003f24 <RTC_ExitInitMode>
 8003e46:	4603      	mov	r3, r0
 8003e48:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	22ff      	movs	r2, #255	; 0xff
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd90      	pop	{r4, r7, pc}

08003e72 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e88:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003e8a:	f7fe f80b 	bl	8001ea4 <HAL_GetTick>
 8003e8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e90:	e009      	b.n	8003ea6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e92:	f7fe f807 	bl	8001ea4 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e007      	b.n	8003eb6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ee      	beq.n	8003e92 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d120      	bne.n	8003f1a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ee2:	f7fd ffdf 	bl	8001ea4 <HAL_GetTick>
 8003ee6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ee8:	e00d      	b.n	8003f06 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003eea:	f7fd ffdb 	bl	8001ea4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef8:	d905      	bls.n	8003f06 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2203      	movs	r2, #3
 8003f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <RTC_EnterInitMode+0x5c>
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d1e7      	bne.n	8003eea <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <RTC_ExitInitMode+0x78>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <RTC_ExitInitMode+0x78>)
 8003f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003f3c:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <RTC_ExitInitMode+0x78>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10c      	bne.n	8003f62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff92 	bl	8003e72 <HAL_RTC_WaitForSynchro>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01e      	beq.n	8003f92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2203      	movs	r2, #3
 8003f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	73fb      	strb	r3, [r7, #15]
 8003f60:	e017      	b.n	8003f92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <RTC_ExitInitMode+0x78>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <RTC_ExitInitMode+0x78>)
 8003f68:	f023 0320 	bic.w	r3, r3, #32
 8003f6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ff7f 	bl	8003e72 <HAL_RTC_WaitForSynchro>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <RTC_ExitInitMode+0x78>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <RTC_ExitInitMode+0x78>)
 8003f8c:	f043 0320 	orr.w	r3, r3, #32
 8003f90:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40002800 	.word	0x40002800

08003fa0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003fb2:	e005      	b.n	8003fc0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003fba:	7afb      	ldrb	r3, [r7, #11]
 8003fbc:	3b0a      	subs	r3, #10
 8003fbe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	d8f6      	bhi.n	8003fb4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e07f      	b.n	80040fa <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	22ca      	movs	r2, #202	; 0xca
 8004010:	625a      	str	r2, [r3, #36]	; 0x24
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2253      	movs	r2, #83	; 0x53
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004028:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800403a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d120      	bne.n	800408c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800404a:	f7fd ff2b 	bl	8001ea4 <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004050:	e015      	b.n	800407e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004052:	f7fd ff27 	bl	8001ea4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004060:	d90d      	bls.n	800407e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	22ff      	movs	r2, #255	; 0xff
 8004068:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2203      	movs	r2, #3
 800406e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e03d      	b.n	80040fa <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0e2      	beq.n	8004052 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0107 	bic.w	r1, r3, #7
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a15      	ldr	r2, [pc, #84]	; (8004104 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80040ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b2:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a12      	ldr	r2, [pc, #72]	; (8004104 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040be:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ce:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040de:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	22ff      	movs	r2, #255	; 0xff
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40010400 	.word	0x40010400

08004108 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004112:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004116:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004136:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f80b 	bl	8004154 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40010400 	.word	0x40010400

08004154 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e095      	b.n	80042a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d108      	bne.n	8004194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418a:	d009      	beq.n	80041a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	61da      	str	r2, [r3, #28]
 8004192:	e005      	b.n	80041a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fb38 	bl	8001830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e0:	d902      	bls.n	80041e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e002      	b.n	80041ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041f6:	d007      	beq.n	8004208 <HAL_SPI_Init+0xa0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424a:	ea42 0103 	orr.w	r1, r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	0c1b      	lsrs	r3, r3, #16
 8004264:	f003 0204 	and.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004284:	ea42 0103 	orr.w	r1, r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b088      	sub	sp, #32
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_SPI_Transmit+0x22>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e158      	b.n	8004582 <HAL_SPI_Transmit+0x2d4>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d8:	f7fd fde4 	bl	8001ea4 <HAL_GetTick>
 80042dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042f2:	e13d      	b.n	8004570 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Transmit+0x52>
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004304:	e134      	b.n	8004570 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2203      	movs	r2, #3
 800430a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	88fa      	ldrh	r2, [r7, #6]
 8004324:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	d10f      	bne.n	8004372 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004360:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004370:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d007      	beq.n	8004390 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004398:	d94b      	bls.n	8004432 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_SPI_Transmit+0xfa>
 80043a2:	8afb      	ldrh	r3, [r7, #22]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d13e      	bne.n	8004426 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043cc:	e02b      	b.n	8004426 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d112      	bne.n	8004402 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004400:	e011      	b.n	8004426 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004402:	f7fd fd4f 	bl	8001ea4 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d803      	bhi.n	800441a <HAL_SPI_Transmit+0x16c>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d102      	bne.n	8004420 <HAL_SPI_Transmit+0x172>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004424:	e0a4      	b.n	8004570 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ce      	bne.n	80043ce <HAL_SPI_Transmit+0x120>
 8004430:	e07c      	b.n	800452c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_Transmit+0x192>
 800443a:	8afb      	ldrh	r3, [r7, #22]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d170      	bne.n	8004522 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d912      	bls.n	8004470 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	1c9a      	adds	r2, r3, #2
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b02      	subs	r3, #2
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800446e:	e058      	b.n	8004522 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004496:	e044      	b.n	8004522 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d12b      	bne.n	80044fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d912      	bls.n	80044d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	881a      	ldrh	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	1c9a      	adds	r2, r3, #2
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b02      	subs	r3, #2
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044d4:	e025      	b.n	8004522 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fc:	e011      	b.n	8004522 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fe:	f7fd fcd1 	bl	8001ea4 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d803      	bhi.n	8004516 <HAL_SPI_Transmit+0x268>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d102      	bne.n	800451c <HAL_SPI_Transmit+0x26e>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004520:	e026      	b.n	8004570 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1b5      	bne.n	8004498 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fb61 	bl	8004bf8 <SPI_EndRxTxTransaction>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e000      	b.n	8004570 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800456e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004580:	7ffb      	ldrb	r3, [r7, #31]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b08a      	sub	sp, #40	; 0x28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004598:	2301      	movs	r3, #1
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x26>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e1fb      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x41e>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b8:	f7fd fc74 	bl	8001ea4 <HAL_GetTick>
 80045bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045d0:	887b      	ldrh	r3, [r7, #2]
 80045d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045d4:	7efb      	ldrb	r3, [r7, #27]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d00e      	beq.n	80045f8 <HAL_SPI_TransmitReceive+0x6e>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e0:	d106      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x66>
 80045ea:	7efb      	ldrb	r3, [r7, #27]
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d003      	beq.n	80045f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045f6:	e1cd      	b.n	8004994 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_SPI_TransmitReceive+0x80>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_TransmitReceive+0x80>
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004610:	e1c0      	b.n	8004994 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b04      	cmp	r3, #4
 800461c:	d003      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2205      	movs	r2, #5
 8004622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	887a      	ldrh	r2, [r7, #2]
 8004636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	887a      	ldrh	r2, [r7, #2]
 800463e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004668:	d802      	bhi.n	8004670 <HAL_SPI_TransmitReceive+0xe6>
 800466a:	8a3b      	ldrh	r3, [r7, #16]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d908      	bls.n	8004682 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	e007      	b.n	8004692 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004690:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d007      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046b8:	d97c      	bls.n	80047b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x13e>
 80046c2:	8a7b      	ldrh	r3, [r7, #18]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d169      	bne.n	800479c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	881a      	ldrh	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	1c9a      	adds	r2, r3, #2
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ec:	e056      	b.n	800479c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d11b      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x1aa>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_SPI_TransmitReceive+0x1aa>
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	2b01      	cmp	r3, #1
 800470a:	d113      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d11c      	bne.n	800477c <HAL_SPI_TransmitReceive+0x1f2>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	b292      	uxth	r2, r2
 800475a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	1c9a      	adds	r2, r3, #2
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004778:	2301      	movs	r3, #1
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800477c:	f7fd fb92 	bl	8001ea4 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004788:	429a      	cmp	r2, r3
 800478a:	d807      	bhi.n	800479c <HAL_SPI_TransmitReceive+0x212>
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d003      	beq.n	800479c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800479a:	e0fb      	b.n	8004994 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1a3      	bne.n	80046ee <HAL_SPI_TransmitReceive+0x164>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d19d      	bne.n	80046ee <HAL_SPI_TransmitReceive+0x164>
 80047b2:	e0df      	b.n	8004974 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x23a>
 80047bc:	8a7b      	ldrh	r3, [r7, #18]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f040 80cb 	bne.w	800495a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d912      	bls.n	80047f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	881a      	ldrh	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	1c9a      	adds	r2, r3, #2
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b02      	subs	r3, #2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047f2:	e0b2      	b.n	800495a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	7812      	ldrb	r2, [r2, #0]
 8004800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481a:	e09e      	b.n	800495a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d134      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x30a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02f      	beq.n	8004894 <HAL_SPI_TransmitReceive+0x30a>
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	2b01      	cmp	r3, #1
 8004838:	d12c      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d912      	bls.n	800486a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	1c9a      	adds	r2, r3, #2
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b02      	subs	r3, #2
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004868:	e012      	b.n	8004890 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d148      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x3aa>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d042      	beq.n	8004934 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d923      	bls.n	8004902 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	b292      	uxth	r2, r2
 80048c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b02      	subs	r3, #2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d81f      	bhi.n	8004930 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	e016      	b.n	8004930 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f103 020c 	add.w	r2, r3, #12
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004930:	2301      	movs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004934:	f7fd fab6 	bl	8001ea4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004940:	429a      	cmp	r2, r3
 8004942:	d803      	bhi.n	800494c <HAL_SPI_TransmitReceive+0x3c2>
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d102      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x3c8>
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004958:	e01c      	b.n	8004994 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f af5b 	bne.w	800481c <HAL_SPI_TransmitReceive+0x292>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	f47f af54 	bne.w	800481c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f93d 	bl	8004bf8 <SPI_EndRxTxTransaction>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d006      	beq.n	8004992 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	661a      	str	r2, [r3, #96]	; 0x60
 8004990:	e000      	b.n	8004994 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004992:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3728      	adds	r7, #40	; 0x28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049be:	b2db      	uxtb	r3, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049dc:	f7fd fa62 	bl	8001ea4 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ec:	f7fd fa5a 	bl	8001ea4 <HAL_GetTick>
 80049f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a02:	e054      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d050      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a0c:	f7fd fa4a 	bl	8001ea4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d902      	bls.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d13d      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3a:	d111      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d004      	beq.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4e:	d107      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a68:	d10f      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e017      	b.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d19b      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000004 	.word	0x20000004

08004adc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004aea:	f7fd f9db 	bl	8001ea4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	4413      	add	r3, r2
 8004af8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004afa:	f7fd f9d3 	bl	8001ea4 <HAL_GetTick>
 8004afe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b00:	4b3c      	ldr	r3, [pc, #240]	; (8004bf4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	00da      	lsls	r2, r3, #3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	0d1b      	lsrs	r3, r3, #20
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b18:	e05f      	b.n	8004bda <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b20:	d106      	bne.n	8004b30 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d050      	beq.n	8004bda <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b38:	f7fd f9b4 	bl	8001ea4 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d902      	bls.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x72>
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d13d      	bne.n	8004bca <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b66:	d111      	bne.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b70:	d004      	beq.n	8004b7c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d107      	bne.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b94:	d10f      	bne.n	8004bb6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e010      	b.n	8004bec <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d197      	bne.n	8004b1a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff ff63 	bl	8004adc <SPI_WaitFifoStateUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e027      	b.n	8004c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fec8 	bl	80049cc <SPI_WaitFlagStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e014      	b.n	8004c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff ff3c 	bl	8004adc <SPI_WaitFifoStateUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e000      	b.n	8004c7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e049      	b.n	8004d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc ffac 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f000 fa14 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_TIM_Base_Stop+0x38>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	f240 4344 	movw	r3, #1092	; 0x444
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_Base_Stop+0x38>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d001      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e04f      	b.n	8004e38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01d      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc2:	d018      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d115      	bne.n	8004e22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b06      	cmp	r3, #6
 8004e06:	d015      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d011      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e20:	e008      	b.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	e000      	b.n	8004e36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40000c00 	.word	0x40000c00
 8004e54:	40013400 	.word	0x40013400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	00010007 	.word	0x00010007

08004e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0202 	mvn.w	r2, #2
 8004e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f905 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8f7 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f908 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0204 	mvn.w	r2, #4
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8db 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f8cd 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8de 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0208 	mvn.w	r2, #8
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f8b1 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8a3 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8b4 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0210 	mvn.w	r2, #16
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f887 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f879 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f88a 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0201 	mvn.w	r2, #1
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc fb30 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d10e      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f914 	bl	8005238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d10e      	bne.n	800503e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d107      	bne.n	800503e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f907 	bl	800524c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d10e      	bne.n	800506a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d107      	bne.n	800506a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f838 	bl	80050da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b20      	cmp	r3, #32
 8005076:	d10e      	bne.n	8005096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d107      	bne.n	8005096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0220 	mvn.w	r2, #32
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f8c7 	bl	8005224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a40      	ldr	r2, [pc, #256]	; (8005204 <TIM_Base_SetConfig+0x114>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510e:	d00f      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3d      	ldr	r2, [pc, #244]	; (8005208 <TIM_Base_SetConfig+0x118>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3c      	ldr	r2, [pc, #240]	; (800520c <TIM_Base_SetConfig+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3b      	ldr	r2, [pc, #236]	; (8005210 <TIM_Base_SetConfig+0x120>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3a      	ldr	r2, [pc, #232]	; (8005214 <TIM_Base_SetConfig+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d108      	bne.n	8005142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2f      	ldr	r2, [pc, #188]	; (8005204 <TIM_Base_SetConfig+0x114>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01f      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d01b      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2c      	ldr	r2, [pc, #176]	; (8005208 <TIM_Base_SetConfig+0x118>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d017      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2b      	ldr	r2, [pc, #172]	; (800520c <TIM_Base_SetConfig+0x11c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <TIM_Base_SetConfig+0x120>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <TIM_Base_SetConfig+0x124>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a28      	ldr	r2, [pc, #160]	; (8005218 <TIM_Base_SetConfig+0x128>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a27      	ldr	r2, [pc, #156]	; (800521c <TIM_Base_SetConfig+0x12c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0x9a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a26      	ldr	r2, [pc, #152]	; (8005220 <TIM_Base_SetConfig+0x130>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <TIM_Base_SetConfig+0x114>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00f      	beq.n	80051e8 <TIM_Base_SetConfig+0xf8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a12      	ldr	r2, [pc, #72]	; (8005214 <TIM_Base_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <TIM_Base_SetConfig+0xf8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a11      	ldr	r2, [pc, #68]	; (8005218 <TIM_Base_SetConfig+0x128>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d007      	beq.n	80051e8 <TIM_Base_SetConfig+0xf8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a10      	ldr	r2, [pc, #64]	; (800521c <TIM_Base_SetConfig+0x12c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_Base_SetConfig+0xf8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a0f      	ldr	r2, [pc, #60]	; (8005220 <TIM_Base_SetConfig+0x130>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d103      	bne.n	80051f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	615a      	str	r2, [r3, #20]
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e040      	b.n	80052f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc fd32 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8c0 	bl	8005424 <UART_SetConfig>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e022      	b.n	80052f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fb3e 	bl	8005938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fbc5 	bl	8005a7c <UART_CheckIdleState>
 80052f2:	4603      	mov	r3, r0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	4613      	mov	r3, r2
 800530a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005310:	2b20      	cmp	r3, #32
 8005312:	f040 8081 	bne.w	8005418 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_UART_Transmit+0x26>
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e079      	b.n	800541a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_UART_Transmit+0x38>
 8005330:	2302      	movs	r3, #2
 8005332:	e072      	b.n	800541a <HAL_UART_Transmit+0x11e>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2221      	movs	r2, #33	; 0x21
 8005346:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005348:	f7fc fdac 	bl	8001ea4 <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005366:	d108      	bne.n	800537a <HAL_UART_Transmit+0x7e>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e003      	b.n	8005382 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800538a:	e02d      	b.n	80053e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2200      	movs	r2, #0
 8005394:	2180      	movs	r1, #128	; 0x80
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fbb5 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e039      	b.n	800541a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	881a      	ldrh	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b8:	b292      	uxth	r2, r2
 80053ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	3302      	adds	r3, #2
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	e008      	b.n	80053d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	b292      	uxth	r2, r2
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1cb      	bne.n	800538c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fb81 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e005      	b.n	800541a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e000      	b.n	800541a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005418:	2302      	movs	r3, #2
  }
}
 800541a:	4618      	mov	r0, r3
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005424:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005428:	b088      	sub	sp, #32
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4313      	orrs	r3, r2
 8005448:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4bac      	ldr	r3, [pc, #688]	; (8005704 <UART_SetConfig+0x2e0>)
 8005452:	4013      	ands	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	69f9      	ldr	r1, [r7, #28]
 800545a:	430b      	orrs	r3, r1
 800545c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4aa2      	ldr	r2, [pc, #648]	; (8005708 <UART_SetConfig+0x2e4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	4313      	orrs	r3, r2
 800548c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a99      	ldr	r2, [pc, #612]	; (800570c <UART_SetConfig+0x2e8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d121      	bne.n	80054f0 <UART_SetConfig+0xcc>
 80054ac:	4b98      	ldr	r3, [pc, #608]	; (8005710 <UART_SetConfig+0x2ec>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d816      	bhi.n	80054e8 <UART_SetConfig+0xc4>
 80054ba:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <UART_SetConfig+0x9c>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054dd 	.word	0x080054dd
 80054c8:	080054d7 	.word	0x080054d7
 80054cc:	080054e3 	.word	0x080054e3
 80054d0:	2301      	movs	r3, #1
 80054d2:	76fb      	strb	r3, [r7, #27]
 80054d4:	e0e8      	b.n	80056a8 <UART_SetConfig+0x284>
 80054d6:	2302      	movs	r3, #2
 80054d8:	76fb      	strb	r3, [r7, #27]
 80054da:	e0e5      	b.n	80056a8 <UART_SetConfig+0x284>
 80054dc:	2304      	movs	r3, #4
 80054de:	76fb      	strb	r3, [r7, #27]
 80054e0:	e0e2      	b.n	80056a8 <UART_SetConfig+0x284>
 80054e2:	2308      	movs	r3, #8
 80054e4:	76fb      	strb	r3, [r7, #27]
 80054e6:	e0df      	b.n	80056a8 <UART_SetConfig+0x284>
 80054e8:	2310      	movs	r3, #16
 80054ea:	76fb      	strb	r3, [r7, #27]
 80054ec:	bf00      	nop
 80054ee:	e0db      	b.n	80056a8 <UART_SetConfig+0x284>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a87      	ldr	r2, [pc, #540]	; (8005714 <UART_SetConfig+0x2f0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d134      	bne.n	8005564 <UART_SetConfig+0x140>
 80054fa:	4b85      	ldr	r3, [pc, #532]	; (8005710 <UART_SetConfig+0x2ec>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f003 030c 	and.w	r3, r3, #12
 8005504:	2b0c      	cmp	r3, #12
 8005506:	d829      	bhi.n	800555c <UART_SetConfig+0x138>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0xec>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005545 	.word	0x08005545
 8005514:	0800555d 	.word	0x0800555d
 8005518:	0800555d 	.word	0x0800555d
 800551c:	0800555d 	.word	0x0800555d
 8005520:	08005551 	.word	0x08005551
 8005524:	0800555d 	.word	0x0800555d
 8005528:	0800555d 	.word	0x0800555d
 800552c:	0800555d 	.word	0x0800555d
 8005530:	0800554b 	.word	0x0800554b
 8005534:	0800555d 	.word	0x0800555d
 8005538:	0800555d 	.word	0x0800555d
 800553c:	0800555d 	.word	0x0800555d
 8005540:	08005557 	.word	0x08005557
 8005544:	2300      	movs	r3, #0
 8005546:	76fb      	strb	r3, [r7, #27]
 8005548:	e0ae      	b.n	80056a8 <UART_SetConfig+0x284>
 800554a:	2302      	movs	r3, #2
 800554c:	76fb      	strb	r3, [r7, #27]
 800554e:	e0ab      	b.n	80056a8 <UART_SetConfig+0x284>
 8005550:	2304      	movs	r3, #4
 8005552:	76fb      	strb	r3, [r7, #27]
 8005554:	e0a8      	b.n	80056a8 <UART_SetConfig+0x284>
 8005556:	2308      	movs	r3, #8
 8005558:	76fb      	strb	r3, [r7, #27]
 800555a:	e0a5      	b.n	80056a8 <UART_SetConfig+0x284>
 800555c:	2310      	movs	r3, #16
 800555e:	76fb      	strb	r3, [r7, #27]
 8005560:	bf00      	nop
 8005562:	e0a1      	b.n	80056a8 <UART_SetConfig+0x284>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a6b      	ldr	r2, [pc, #428]	; (8005718 <UART_SetConfig+0x2f4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d120      	bne.n	80055b0 <UART_SetConfig+0x18c>
 800556e:	4b68      	ldr	r3, [pc, #416]	; (8005710 <UART_SetConfig+0x2ec>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005578:	2b10      	cmp	r3, #16
 800557a:	d00f      	beq.n	800559c <UART_SetConfig+0x178>
 800557c:	2b10      	cmp	r3, #16
 800557e:	d802      	bhi.n	8005586 <UART_SetConfig+0x162>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <UART_SetConfig+0x16c>
 8005584:	e010      	b.n	80055a8 <UART_SetConfig+0x184>
 8005586:	2b20      	cmp	r3, #32
 8005588:	d005      	beq.n	8005596 <UART_SetConfig+0x172>
 800558a:	2b30      	cmp	r3, #48	; 0x30
 800558c:	d009      	beq.n	80055a2 <UART_SetConfig+0x17e>
 800558e:	e00b      	b.n	80055a8 <UART_SetConfig+0x184>
 8005590:	2300      	movs	r3, #0
 8005592:	76fb      	strb	r3, [r7, #27]
 8005594:	e088      	b.n	80056a8 <UART_SetConfig+0x284>
 8005596:	2302      	movs	r3, #2
 8005598:	76fb      	strb	r3, [r7, #27]
 800559a:	e085      	b.n	80056a8 <UART_SetConfig+0x284>
 800559c:	2304      	movs	r3, #4
 800559e:	76fb      	strb	r3, [r7, #27]
 80055a0:	e082      	b.n	80056a8 <UART_SetConfig+0x284>
 80055a2:	2308      	movs	r3, #8
 80055a4:	76fb      	strb	r3, [r7, #27]
 80055a6:	e07f      	b.n	80056a8 <UART_SetConfig+0x284>
 80055a8:	2310      	movs	r3, #16
 80055aa:	76fb      	strb	r3, [r7, #27]
 80055ac:	bf00      	nop
 80055ae:	e07b      	b.n	80056a8 <UART_SetConfig+0x284>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a59      	ldr	r2, [pc, #356]	; (800571c <UART_SetConfig+0x2f8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d120      	bne.n	80055fc <UART_SetConfig+0x1d8>
 80055ba:	4b55      	ldr	r3, [pc, #340]	; (8005710 <UART_SetConfig+0x2ec>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d00f      	beq.n	80055e8 <UART_SetConfig+0x1c4>
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d802      	bhi.n	80055d2 <UART_SetConfig+0x1ae>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <UART_SetConfig+0x1b8>
 80055d0:	e010      	b.n	80055f4 <UART_SetConfig+0x1d0>
 80055d2:	2b80      	cmp	r3, #128	; 0x80
 80055d4:	d005      	beq.n	80055e2 <UART_SetConfig+0x1be>
 80055d6:	2bc0      	cmp	r3, #192	; 0xc0
 80055d8:	d009      	beq.n	80055ee <UART_SetConfig+0x1ca>
 80055da:	e00b      	b.n	80055f4 <UART_SetConfig+0x1d0>
 80055dc:	2300      	movs	r3, #0
 80055de:	76fb      	strb	r3, [r7, #27]
 80055e0:	e062      	b.n	80056a8 <UART_SetConfig+0x284>
 80055e2:	2302      	movs	r3, #2
 80055e4:	76fb      	strb	r3, [r7, #27]
 80055e6:	e05f      	b.n	80056a8 <UART_SetConfig+0x284>
 80055e8:	2304      	movs	r3, #4
 80055ea:	76fb      	strb	r3, [r7, #27]
 80055ec:	e05c      	b.n	80056a8 <UART_SetConfig+0x284>
 80055ee:	2308      	movs	r3, #8
 80055f0:	76fb      	strb	r3, [r7, #27]
 80055f2:	e059      	b.n	80056a8 <UART_SetConfig+0x284>
 80055f4:	2310      	movs	r3, #16
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	bf00      	nop
 80055fa:	e055      	b.n	80056a8 <UART_SetConfig+0x284>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a47      	ldr	r2, [pc, #284]	; (8005720 <UART_SetConfig+0x2fc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d124      	bne.n	8005650 <UART_SetConfig+0x22c>
 8005606:	4b42      	ldr	r3, [pc, #264]	; (8005710 <UART_SetConfig+0x2ec>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005614:	d012      	beq.n	800563c <UART_SetConfig+0x218>
 8005616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561a:	d802      	bhi.n	8005622 <UART_SetConfig+0x1fe>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <UART_SetConfig+0x20c>
 8005620:	e012      	b.n	8005648 <UART_SetConfig+0x224>
 8005622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005626:	d006      	beq.n	8005636 <UART_SetConfig+0x212>
 8005628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562c:	d009      	beq.n	8005642 <UART_SetConfig+0x21e>
 800562e:	e00b      	b.n	8005648 <UART_SetConfig+0x224>
 8005630:	2300      	movs	r3, #0
 8005632:	76fb      	strb	r3, [r7, #27]
 8005634:	e038      	b.n	80056a8 <UART_SetConfig+0x284>
 8005636:	2302      	movs	r3, #2
 8005638:	76fb      	strb	r3, [r7, #27]
 800563a:	e035      	b.n	80056a8 <UART_SetConfig+0x284>
 800563c:	2304      	movs	r3, #4
 800563e:	76fb      	strb	r3, [r7, #27]
 8005640:	e032      	b.n	80056a8 <UART_SetConfig+0x284>
 8005642:	2308      	movs	r3, #8
 8005644:	76fb      	strb	r3, [r7, #27]
 8005646:	e02f      	b.n	80056a8 <UART_SetConfig+0x284>
 8005648:	2310      	movs	r3, #16
 800564a:	76fb      	strb	r3, [r7, #27]
 800564c:	bf00      	nop
 800564e:	e02b      	b.n	80056a8 <UART_SetConfig+0x284>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <UART_SetConfig+0x2e4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d124      	bne.n	80056a4 <UART_SetConfig+0x280>
 800565a:	4b2d      	ldr	r3, [pc, #180]	; (8005710 <UART_SetConfig+0x2ec>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005668:	d012      	beq.n	8005690 <UART_SetConfig+0x26c>
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566e:	d802      	bhi.n	8005676 <UART_SetConfig+0x252>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <UART_SetConfig+0x260>
 8005674:	e012      	b.n	800569c <UART_SetConfig+0x278>
 8005676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567a:	d006      	beq.n	800568a <UART_SetConfig+0x266>
 800567c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005680:	d009      	beq.n	8005696 <UART_SetConfig+0x272>
 8005682:	e00b      	b.n	800569c <UART_SetConfig+0x278>
 8005684:	2300      	movs	r3, #0
 8005686:	76fb      	strb	r3, [r7, #27]
 8005688:	e00e      	b.n	80056a8 <UART_SetConfig+0x284>
 800568a:	2302      	movs	r3, #2
 800568c:	76fb      	strb	r3, [r7, #27]
 800568e:	e00b      	b.n	80056a8 <UART_SetConfig+0x284>
 8005690:	2304      	movs	r3, #4
 8005692:	76fb      	strb	r3, [r7, #27]
 8005694:	e008      	b.n	80056a8 <UART_SetConfig+0x284>
 8005696:	2308      	movs	r3, #8
 8005698:	76fb      	strb	r3, [r7, #27]
 800569a:	e005      	b.n	80056a8 <UART_SetConfig+0x284>
 800569c:	2310      	movs	r3, #16
 800569e:	76fb      	strb	r3, [r7, #27]
 80056a0:	bf00      	nop
 80056a2:	e001      	b.n	80056a8 <UART_SetConfig+0x284>
 80056a4:	2310      	movs	r3, #16
 80056a6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <UART_SetConfig+0x2e4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	f040 8087 	bne.w	80057c2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056b4:	7efb      	ldrb	r3, [r7, #27]
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d836      	bhi.n	8005728 <UART_SetConfig+0x304>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <UART_SetConfig+0x29c>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	08005729 	.word	0x08005729
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	08005729 	.word	0x08005729
 80056d0:	080056f3 	.word	0x080056f3
 80056d4:	08005729 	.word	0x08005729
 80056d8:	08005729 	.word	0x08005729
 80056dc:	08005729 	.word	0x08005729
 80056e0:	080056fb 	.word	0x080056fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e4:	f7fd fcea 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80056e8:	6178      	str	r0, [r7, #20]
        break;
 80056ea:	e022      	b.n	8005732 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <UART_SetConfig+0x300>)
 80056ee:	617b      	str	r3, [r7, #20]
        break;
 80056f0:	e01f      	b.n	8005732 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f2:	f7fd fc4d 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80056f6:	6178      	str	r0, [r7, #20]
        break;
 80056f8:	e01b      	b.n	8005732 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	617b      	str	r3, [r7, #20]
        break;
 8005700:	e017      	b.n	8005732 <UART_SetConfig+0x30e>
 8005702:	bf00      	nop
 8005704:	efff69f3 	.word	0xefff69f3
 8005708:	40008000 	.word	0x40008000
 800570c:	40013800 	.word	0x40013800
 8005710:	40021000 	.word	0x40021000
 8005714:	40004400 	.word	0x40004400
 8005718:	40004800 	.word	0x40004800
 800571c:	40004c00 	.word	0x40004c00
 8005720:	40005000 	.word	0x40005000
 8005724:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	76bb      	strb	r3, [r7, #26]
        break;
 8005730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80f1 	beq.w	800591c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	429a      	cmp	r2, r3
 8005748:	d305      	bcc.n	8005756 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	429a      	cmp	r2, r3
 8005754:	d902      	bls.n	800575c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	76bb      	strb	r3, [r7, #26]
 800575a:	e0df      	b.n	800591c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4619      	mov	r1, r3
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	0214      	lsls	r4, r2, #8
 800576e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005772:	020b      	lsls	r3, r1, #8
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6852      	ldr	r2, [r2, #4]
 8005778:	0852      	lsrs	r2, r2, #1
 800577a:	4611      	mov	r1, r2
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	eb13 0b01 	adds.w	fp, r3, r1
 8005784:	eb44 0c02 	adc.w	ip, r4, r2
 8005788:	4658      	mov	r0, fp
 800578a:	4661      	mov	r1, ip
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	461a      	mov	r2, r3
 8005796:	4623      	mov	r3, r4
 8005798:	f7fa fd1e 	bl	80001d8 <__aeabi_uldivmod>
 800579c:	4603      	mov	r3, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a8:	d308      	bcc.n	80057bc <UART_SetConfig+0x398>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b0:	d204      	bcs.n	80057bc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	e0af      	b.n	800591c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	76bb      	strb	r3, [r7, #26]
 80057c0:	e0ac      	b.n	800591c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d15b      	bne.n	8005884 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80057cc:	7efb      	ldrb	r3, [r7, #27]
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d827      	bhi.n	8005822 <UART_SetConfig+0x3fe>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x3b4>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005805 	.word	0x08005805
 80057e0:	0800580d 	.word	0x0800580d
 80057e4:	08005823 	.word	0x08005823
 80057e8:	08005813 	.word	0x08005813
 80057ec:	08005823 	.word	0x08005823
 80057f0:	08005823 	.word	0x08005823
 80057f4:	08005823 	.word	0x08005823
 80057f8:	0800581b 	.word	0x0800581b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fc:	f7fd fc5e 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8005800:	6178      	str	r0, [r7, #20]
        break;
 8005802:	e013      	b.n	800582c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005804:	f7fd fc70 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8005808:	6178      	str	r0, [r7, #20]
        break;
 800580a:	e00f      	b.n	800582c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800580c:	4b49      	ldr	r3, [pc, #292]	; (8005934 <UART_SetConfig+0x510>)
 800580e:	617b      	str	r3, [r7, #20]
        break;
 8005810:	e00c      	b.n	800582c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005812:	f7fd fbbd 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8005816:	6178      	str	r0, [r7, #20]
        break;
 8005818:	e008      	b.n	800582c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581e:	617b      	str	r3, [r7, #20]
        break;
 8005820:	e004      	b.n	800582c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	76bb      	strb	r3, [r7, #26]
        break;
 800582a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d074      	beq.n	800591c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	005a      	lsls	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	b29b      	uxth	r3, r3
 8005848:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b0f      	cmp	r3, #15
 800584e:	d916      	bls.n	800587e <UART_SetConfig+0x45a>
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005856:	d212      	bcs.n	800587e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f023 030f 	bic.w	r3, r3, #15
 8005860:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	b29a      	uxth	r2, r3
 800586e:	89fb      	ldrh	r3, [r7, #14]
 8005870:	4313      	orrs	r3, r2
 8005872:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	89fa      	ldrh	r2, [r7, #14]
 800587a:	60da      	str	r2, [r3, #12]
 800587c:	e04e      	b.n	800591c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	76bb      	strb	r3, [r7, #26]
 8005882:	e04b      	b.n	800591c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005884:	7efb      	ldrb	r3, [r7, #27]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d827      	bhi.n	80058da <UART_SetConfig+0x4b6>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x46c>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058c5 	.word	0x080058c5
 800589c:	080058db 	.word	0x080058db
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058db 	.word	0x080058db
 80058a8:	080058db 	.word	0x080058db
 80058ac:	080058db 	.word	0x080058db
 80058b0:	080058d3 	.word	0x080058d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b4:	f7fd fc02 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80058b8:	6178      	str	r0, [r7, #20]
        break;
 80058ba:	e013      	b.n	80058e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7fd fc14 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 80058c0:	6178      	str	r0, [r7, #20]
        break;
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c4:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <UART_SetConfig+0x510>)
 80058c6:	617b      	str	r3, [r7, #20]
        break;
 80058c8:	e00c      	b.n	80058e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ca:	f7fd fb61 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80058ce:	6178      	str	r0, [r7, #20]
        break;
 80058d0:	e008      	b.n	80058e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	617b      	str	r3, [r7, #20]
        break;
 80058d8:	e004      	b.n	80058e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	76bb      	strb	r3, [r7, #26]
        break;
 80058e2:	bf00      	nop
    }

    if (pclk != 0U)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d018      	beq.n	800591c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	085a      	lsrs	r2, r3, #1
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	441a      	add	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	d908      	bls.n	8005918 <UART_SetConfig+0x4f4>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d204      	bcs.n	8005918 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e001      	b.n	800591c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005928:	7ebb      	ldrb	r3, [r7, #26]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005934:	00f42400 	.word	0x00f42400

08005938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01a      	beq.n	8005a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a36:	d10a      	bne.n	8005a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a8a:	f7fc fa0b 	bl	8001ea4 <HAL_GetTick>
 8005a8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d10e      	bne.n	8005abc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f82a 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e020      	b.n	8005afe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d10e      	bne.n	8005ae8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f814 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e00a      	b.n	8005afe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b16:	e05d      	b.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1e:	d059      	beq.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b20:	f7fc f9c0 	bl	8001ea4 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11b      	bne.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b44:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0201 	bic.w	r2, r2, #1
 8005b54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e042      	b.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d02b      	beq.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8a:	d123      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ba4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e00f      	b.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d092      	beq.n	8005b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <__errno>:
 8005bfc:	4b01      	ldr	r3, [pc, #4]	; (8005c04 <__errno+0x8>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000010 	.word	0x20000010

08005c08 <__libc_init_array>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4e0d      	ldr	r6, [pc, #52]	; (8005c40 <__libc_init_array+0x38>)
 8005c0c:	4c0d      	ldr	r4, [pc, #52]	; (8005c44 <__libc_init_array+0x3c>)
 8005c0e:	1ba4      	subs	r4, r4, r6
 8005c10:	10a4      	asrs	r4, r4, #2
 8005c12:	2500      	movs	r5, #0
 8005c14:	42a5      	cmp	r5, r4
 8005c16:	d109      	bne.n	8005c2c <__libc_init_array+0x24>
 8005c18:	4e0b      	ldr	r6, [pc, #44]	; (8005c48 <__libc_init_array+0x40>)
 8005c1a:	4c0c      	ldr	r4, [pc, #48]	; (8005c4c <__libc_init_array+0x44>)
 8005c1c:	f000 fc88 	bl	8006530 <_init>
 8005c20:	1ba4      	subs	r4, r4, r6
 8005c22:	10a4      	asrs	r4, r4, #2
 8005c24:	2500      	movs	r5, #0
 8005c26:	42a5      	cmp	r5, r4
 8005c28:	d105      	bne.n	8005c36 <__libc_init_array+0x2e>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c30:	4798      	blx	r3
 8005c32:	3501      	adds	r5, #1
 8005c34:	e7ee      	b.n	8005c14 <__libc_init_array+0xc>
 8005c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c3a:	4798      	blx	r3
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	e7f2      	b.n	8005c26 <__libc_init_array+0x1e>
 8005c40:	08006674 	.word	0x08006674
 8005c44:	08006674 	.word	0x08006674
 8005c48:	08006674 	.word	0x08006674
 8005c4c:	08006678 	.word	0x08006678

08005c50 <memset>:
 8005c50:	4402      	add	r2, r0
 8005c52:	4603      	mov	r3, r0
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d100      	bne.n	8005c5a <memset+0xa>
 8005c58:	4770      	bx	lr
 8005c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5e:	e7f9      	b.n	8005c54 <memset+0x4>

08005c60 <_puts_r>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	460e      	mov	r6, r1
 8005c64:	4605      	mov	r5, r0
 8005c66:	b118      	cbz	r0, 8005c70 <_puts_r+0x10>
 8005c68:	6983      	ldr	r3, [r0, #24]
 8005c6a:	b90b      	cbnz	r3, 8005c70 <_puts_r+0x10>
 8005c6c:	f000 fa0c 	bl	8006088 <__sinit>
 8005c70:	69ab      	ldr	r3, [r5, #24]
 8005c72:	68ac      	ldr	r4, [r5, #8]
 8005c74:	b913      	cbnz	r3, 8005c7c <_puts_r+0x1c>
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 fa06 	bl	8006088 <__sinit>
 8005c7c:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <_puts_r+0xac>)
 8005c7e:	429c      	cmp	r4, r3
 8005c80:	d117      	bne.n	8005cb2 <_puts_r+0x52>
 8005c82:	686c      	ldr	r4, [r5, #4]
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	071b      	lsls	r3, r3, #28
 8005c88:	d51d      	bpl.n	8005cc6 <_puts_r+0x66>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	b1db      	cbz	r3, 8005cc6 <_puts_r+0x66>
 8005c8e:	3e01      	subs	r6, #1
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c96:	3b01      	subs	r3, #1
 8005c98:	60a3      	str	r3, [r4, #8]
 8005c9a:	b9e9      	cbnz	r1, 8005cd8 <_puts_r+0x78>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da2e      	bge.n	8005cfe <_puts_r+0x9e>
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	210a      	movs	r1, #10
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 f83f 	bl	8005d28 <__swbuf_r>
 8005caa:	3001      	adds	r0, #1
 8005cac:	d011      	beq.n	8005cd2 <_puts_r+0x72>
 8005cae:	200a      	movs	r0, #10
 8005cb0:	e011      	b.n	8005cd6 <_puts_r+0x76>
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <_puts_r+0xb0>)
 8005cb4:	429c      	cmp	r4, r3
 8005cb6:	d101      	bne.n	8005cbc <_puts_r+0x5c>
 8005cb8:	68ac      	ldr	r4, [r5, #8]
 8005cba:	e7e3      	b.n	8005c84 <_puts_r+0x24>
 8005cbc:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <_puts_r+0xb4>)
 8005cbe:	429c      	cmp	r4, r3
 8005cc0:	bf08      	it	eq
 8005cc2:	68ec      	ldreq	r4, [r5, #12]
 8005cc4:	e7de      	b.n	8005c84 <_puts_r+0x24>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f000 f87f 	bl	8005dcc <__swsetup_r>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0dd      	beq.n	8005c8e <_puts_r+0x2e>
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da04      	bge.n	8005ce6 <_puts_r+0x86>
 8005cdc:	69a2      	ldr	r2, [r4, #24]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	dc06      	bgt.n	8005cf0 <_puts_r+0x90>
 8005ce2:	290a      	cmp	r1, #10
 8005ce4:	d004      	beq.n	8005cf0 <_puts_r+0x90>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	6022      	str	r2, [r4, #0]
 8005cec:	7019      	strb	r1, [r3, #0]
 8005cee:	e7cf      	b.n	8005c90 <_puts_r+0x30>
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 f818 	bl	8005d28 <__swbuf_r>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d1c9      	bne.n	8005c90 <_puts_r+0x30>
 8005cfc:	e7e9      	b.n	8005cd2 <_puts_r+0x72>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	200a      	movs	r0, #10
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	7018      	strb	r0, [r3, #0]
 8005d08:	e7e5      	b.n	8005cd6 <_puts_r+0x76>
 8005d0a:	bf00      	nop
 8005d0c:	0800662c 	.word	0x0800662c
 8005d10:	0800664c 	.word	0x0800664c
 8005d14:	0800660c 	.word	0x0800660c

08005d18 <puts>:
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <puts+0xc>)
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f7ff bf9f 	b.w	8005c60 <_puts_r>
 8005d22:	bf00      	nop
 8005d24:	20000010 	.word	0x20000010

08005d28 <__swbuf_r>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	460e      	mov	r6, r1
 8005d2c:	4614      	mov	r4, r2
 8005d2e:	4605      	mov	r5, r0
 8005d30:	b118      	cbz	r0, 8005d3a <__swbuf_r+0x12>
 8005d32:	6983      	ldr	r3, [r0, #24]
 8005d34:	b90b      	cbnz	r3, 8005d3a <__swbuf_r+0x12>
 8005d36:	f000 f9a7 	bl	8006088 <__sinit>
 8005d3a:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <__swbuf_r+0x98>)
 8005d3c:	429c      	cmp	r4, r3
 8005d3e:	d12a      	bne.n	8005d96 <__swbuf_r+0x6e>
 8005d40:	686c      	ldr	r4, [r5, #4]
 8005d42:	69a3      	ldr	r3, [r4, #24]
 8005d44:	60a3      	str	r3, [r4, #8]
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	071a      	lsls	r2, r3, #28
 8005d4a:	d52e      	bpl.n	8005daa <__swbuf_r+0x82>
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	b363      	cbz	r3, 8005daa <__swbuf_r+0x82>
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	1ac0      	subs	r0, r0, r3
 8005d56:	6963      	ldr	r3, [r4, #20]
 8005d58:	b2f6      	uxtb	r6, r6
 8005d5a:	4283      	cmp	r3, r0
 8005d5c:	4637      	mov	r7, r6
 8005d5e:	dc04      	bgt.n	8005d6a <__swbuf_r+0x42>
 8005d60:	4621      	mov	r1, r4
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f926 	bl	8005fb4 <_fflush_r>
 8005d68:	bb28      	cbnz	r0, 8005db6 <__swbuf_r+0x8e>
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60a3      	str	r3, [r4, #8]
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	6022      	str	r2, [r4, #0]
 8005d76:	701e      	strb	r6, [r3, #0]
 8005d78:	6963      	ldr	r3, [r4, #20]
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	4283      	cmp	r3, r0
 8005d7e:	d004      	beq.n	8005d8a <__swbuf_r+0x62>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	07db      	lsls	r3, r3, #31
 8005d84:	d519      	bpl.n	8005dba <__swbuf_r+0x92>
 8005d86:	2e0a      	cmp	r6, #10
 8005d88:	d117      	bne.n	8005dba <__swbuf_r+0x92>
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 f911 	bl	8005fb4 <_fflush_r>
 8005d92:	b190      	cbz	r0, 8005dba <__swbuf_r+0x92>
 8005d94:	e00f      	b.n	8005db6 <__swbuf_r+0x8e>
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <__swbuf_r+0x9c>)
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	d101      	bne.n	8005da0 <__swbuf_r+0x78>
 8005d9c:	68ac      	ldr	r4, [r5, #8]
 8005d9e:	e7d0      	b.n	8005d42 <__swbuf_r+0x1a>
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <__swbuf_r+0xa0>)
 8005da2:	429c      	cmp	r4, r3
 8005da4:	bf08      	it	eq
 8005da6:	68ec      	ldreq	r4, [r5, #12]
 8005da8:	e7cb      	b.n	8005d42 <__swbuf_r+0x1a>
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 f80d 	bl	8005dcc <__swsetup_r>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d0cc      	beq.n	8005d50 <__swbuf_r+0x28>
 8005db6:	f04f 37ff 	mov.w	r7, #4294967295
 8005dba:	4638      	mov	r0, r7
 8005dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	0800662c 	.word	0x0800662c
 8005dc4:	0800664c 	.word	0x0800664c
 8005dc8:	0800660c 	.word	0x0800660c

08005dcc <__swsetup_r>:
 8005dcc:	4b32      	ldr	r3, [pc, #200]	; (8005e98 <__swsetup_r+0xcc>)
 8005dce:	b570      	push	{r4, r5, r6, lr}
 8005dd0:	681d      	ldr	r5, [r3, #0]
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	b125      	cbz	r5, 8005de2 <__swsetup_r+0x16>
 8005dd8:	69ab      	ldr	r3, [r5, #24]
 8005dda:	b913      	cbnz	r3, 8005de2 <__swsetup_r+0x16>
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 f953 	bl	8006088 <__sinit>
 8005de2:	4b2e      	ldr	r3, [pc, #184]	; (8005e9c <__swsetup_r+0xd0>)
 8005de4:	429c      	cmp	r4, r3
 8005de6:	d10f      	bne.n	8005e08 <__swsetup_r+0x3c>
 8005de8:	686c      	ldr	r4, [r5, #4]
 8005dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	0715      	lsls	r5, r2, #28
 8005df2:	d42c      	bmi.n	8005e4e <__swsetup_r+0x82>
 8005df4:	06d0      	lsls	r0, r2, #27
 8005df6:	d411      	bmi.n	8005e1c <__swsetup_r+0x50>
 8005df8:	2209      	movs	r2, #9
 8005dfa:	6032      	str	r2, [r6, #0]
 8005dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	e03e      	b.n	8005e86 <__swsetup_r+0xba>
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <__swsetup_r+0xd4>)
 8005e0a:	429c      	cmp	r4, r3
 8005e0c:	d101      	bne.n	8005e12 <__swsetup_r+0x46>
 8005e0e:	68ac      	ldr	r4, [r5, #8]
 8005e10:	e7eb      	b.n	8005dea <__swsetup_r+0x1e>
 8005e12:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <__swsetup_r+0xd8>)
 8005e14:	429c      	cmp	r4, r3
 8005e16:	bf08      	it	eq
 8005e18:	68ec      	ldreq	r4, [r5, #12]
 8005e1a:	e7e6      	b.n	8005dea <__swsetup_r+0x1e>
 8005e1c:	0751      	lsls	r1, r2, #29
 8005e1e:	d512      	bpl.n	8005e46 <__swsetup_r+0x7a>
 8005e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e22:	b141      	cbz	r1, 8005e36 <__swsetup_r+0x6a>
 8005e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e28:	4299      	cmp	r1, r3
 8005e2a:	d002      	beq.n	8005e32 <__swsetup_r+0x66>
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f000 fa19 	bl	8006264 <_free_r>
 8005e32:	2300      	movs	r3, #0
 8005e34:	6363      	str	r3, [r4, #52]	; 0x34
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f043 0308 	orr.w	r3, r3, #8
 8005e4c:	81a3      	strh	r3, [r4, #12]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	b94b      	cbnz	r3, 8005e66 <__swsetup_r+0x9a>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5c:	d003      	beq.n	8005e66 <__swsetup_r+0x9a>
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 f9bf 	bl	80061e4 <__smakebuf_r>
 8005e66:	89a2      	ldrh	r2, [r4, #12]
 8005e68:	f012 0301 	ands.w	r3, r2, #1
 8005e6c:	d00c      	beq.n	8005e88 <__swsetup_r+0xbc>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	6963      	ldr	r3, [r4, #20]
 8005e74:	425b      	negs	r3, r3
 8005e76:	61a3      	str	r3, [r4, #24]
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	b953      	cbnz	r3, 8005e92 <__swsetup_r+0xc6>
 8005e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e80:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005e84:	d1ba      	bne.n	8005dfc <__swsetup_r+0x30>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	0792      	lsls	r2, r2, #30
 8005e8a:	bf58      	it	pl
 8005e8c:	6963      	ldrpl	r3, [r4, #20]
 8005e8e:	60a3      	str	r3, [r4, #8]
 8005e90:	e7f2      	b.n	8005e78 <__swsetup_r+0xac>
 8005e92:	2000      	movs	r0, #0
 8005e94:	e7f7      	b.n	8005e86 <__swsetup_r+0xba>
 8005e96:	bf00      	nop
 8005e98:	20000010 	.word	0x20000010
 8005e9c:	0800662c 	.word	0x0800662c
 8005ea0:	0800664c 	.word	0x0800664c
 8005ea4:	0800660c 	.word	0x0800660c

08005ea8 <__sflush_r>:
 8005ea8:	898a      	ldrh	r2, [r1, #12]
 8005eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eae:	4605      	mov	r5, r0
 8005eb0:	0710      	lsls	r0, r2, #28
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	d458      	bmi.n	8005f68 <__sflush_r+0xc0>
 8005eb6:	684b      	ldr	r3, [r1, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	dc05      	bgt.n	8005ec8 <__sflush_r+0x20>
 8005ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	dc02      	bgt.n	8005ec8 <__sflush_r+0x20>
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	d0f9      	beq.n	8005ec2 <__sflush_r+0x1a>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ed4:	682f      	ldr	r7, [r5, #0]
 8005ed6:	6a21      	ldr	r1, [r4, #32]
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	d032      	beq.n	8005f42 <__sflush_r+0x9a>
 8005edc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	075a      	lsls	r2, r3, #29
 8005ee2:	d505      	bpl.n	8005ef0 <__sflush_r+0x48>
 8005ee4:	6863      	ldr	r3, [r4, #4]
 8005ee6:	1ac0      	subs	r0, r0, r3
 8005ee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eea:	b10b      	cbz	r3, 8005ef0 <__sflush_r+0x48>
 8005eec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005eee:	1ac0      	subs	r0, r0, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ef6:	6a21      	ldr	r1, [r4, #32]
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b0      	blx	r6
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	d106      	bne.n	8005f10 <__sflush_r+0x68>
 8005f02:	6829      	ldr	r1, [r5, #0]
 8005f04:	291d      	cmp	r1, #29
 8005f06:	d848      	bhi.n	8005f9a <__sflush_r+0xf2>
 8005f08:	4a29      	ldr	r2, [pc, #164]	; (8005fb0 <__sflush_r+0x108>)
 8005f0a:	40ca      	lsrs	r2, r1
 8005f0c:	07d6      	lsls	r6, r2, #31
 8005f0e:	d544      	bpl.n	8005f9a <__sflush_r+0xf2>
 8005f10:	2200      	movs	r2, #0
 8005f12:	6062      	str	r2, [r4, #4]
 8005f14:	04d9      	lsls	r1, r3, #19
 8005f16:	6922      	ldr	r2, [r4, #16]
 8005f18:	6022      	str	r2, [r4, #0]
 8005f1a:	d504      	bpl.n	8005f26 <__sflush_r+0x7e>
 8005f1c:	1c42      	adds	r2, r0, #1
 8005f1e:	d101      	bne.n	8005f24 <__sflush_r+0x7c>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	b903      	cbnz	r3, 8005f26 <__sflush_r+0x7e>
 8005f24:	6560      	str	r0, [r4, #84]	; 0x54
 8005f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f28:	602f      	str	r7, [r5, #0]
 8005f2a:	2900      	cmp	r1, #0
 8005f2c:	d0c9      	beq.n	8005ec2 <__sflush_r+0x1a>
 8005f2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f32:	4299      	cmp	r1, r3
 8005f34:	d002      	beq.n	8005f3c <__sflush_r+0x94>
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f994 	bl	8006264 <_free_r>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	6360      	str	r0, [r4, #52]	; 0x34
 8005f40:	e7c0      	b.n	8005ec4 <__sflush_r+0x1c>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b0      	blx	r6
 8005f48:	1c41      	adds	r1, r0, #1
 8005f4a:	d1c8      	bne.n	8005ede <__sflush_r+0x36>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0c5      	beq.n	8005ede <__sflush_r+0x36>
 8005f52:	2b1d      	cmp	r3, #29
 8005f54:	d001      	beq.n	8005f5a <__sflush_r+0xb2>
 8005f56:	2b16      	cmp	r3, #22
 8005f58:	d101      	bne.n	8005f5e <__sflush_r+0xb6>
 8005f5a:	602f      	str	r7, [r5, #0]
 8005f5c:	e7b1      	b.n	8005ec2 <__sflush_r+0x1a>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	e7ad      	b.n	8005ec4 <__sflush_r+0x1c>
 8005f68:	690f      	ldr	r7, [r1, #16]
 8005f6a:	2f00      	cmp	r7, #0
 8005f6c:	d0a9      	beq.n	8005ec2 <__sflush_r+0x1a>
 8005f6e:	0793      	lsls	r3, r2, #30
 8005f70:	680e      	ldr	r6, [r1, #0]
 8005f72:	bf08      	it	eq
 8005f74:	694b      	ldreq	r3, [r1, #20]
 8005f76:	600f      	str	r7, [r1, #0]
 8005f78:	bf18      	it	ne
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	eba6 0807 	sub.w	r8, r6, r7
 8005f80:	608b      	str	r3, [r1, #8]
 8005f82:	f1b8 0f00 	cmp.w	r8, #0
 8005f86:	dd9c      	ble.n	8005ec2 <__sflush_r+0x1a>
 8005f88:	4643      	mov	r3, r8
 8005f8a:	463a      	mov	r2, r7
 8005f8c:	6a21      	ldr	r1, [r4, #32]
 8005f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b0      	blx	r6
 8005f94:	2800      	cmp	r0, #0
 8005f96:	dc06      	bgt.n	8005fa6 <__sflush_r+0xfe>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	e78e      	b.n	8005ec4 <__sflush_r+0x1c>
 8005fa6:	4407      	add	r7, r0
 8005fa8:	eba8 0800 	sub.w	r8, r8, r0
 8005fac:	e7e9      	b.n	8005f82 <__sflush_r+0xda>
 8005fae:	bf00      	nop
 8005fb0:	20400001 	.word	0x20400001

08005fb4 <_fflush_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	690b      	ldr	r3, [r1, #16]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	b1db      	cbz	r3, 8005ff6 <_fflush_r+0x42>
 8005fbe:	b118      	cbz	r0, 8005fc8 <_fflush_r+0x14>
 8005fc0:	6983      	ldr	r3, [r0, #24]
 8005fc2:	b90b      	cbnz	r3, 8005fc8 <_fflush_r+0x14>
 8005fc4:	f000 f860 	bl	8006088 <__sinit>
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <_fflush_r+0x48>)
 8005fca:	429c      	cmp	r4, r3
 8005fcc:	d109      	bne.n	8005fe2 <_fflush_r+0x2e>
 8005fce:	686c      	ldr	r4, [r5, #4]
 8005fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd4:	b17b      	cbz	r3, 8005ff6 <_fflush_r+0x42>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4628      	mov	r0, r5
 8005fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fde:	f7ff bf63 	b.w	8005ea8 <__sflush_r>
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <_fflush_r+0x4c>)
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	d101      	bne.n	8005fec <_fflush_r+0x38>
 8005fe8:	68ac      	ldr	r4, [r5, #8]
 8005fea:	e7f1      	b.n	8005fd0 <_fflush_r+0x1c>
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <_fflush_r+0x50>)
 8005fee:	429c      	cmp	r4, r3
 8005ff0:	bf08      	it	eq
 8005ff2:	68ec      	ldreq	r4, [r5, #12]
 8005ff4:	e7ec      	b.n	8005fd0 <_fflush_r+0x1c>
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
 8005ffa:	bf00      	nop
 8005ffc:	0800662c 	.word	0x0800662c
 8006000:	0800664c 	.word	0x0800664c
 8006004:	0800660c 	.word	0x0800660c

08006008 <std>:
 8006008:	2300      	movs	r3, #0
 800600a:	b510      	push	{r4, lr}
 800600c:	4604      	mov	r4, r0
 800600e:	e9c0 3300 	strd	r3, r3, [r0]
 8006012:	6083      	str	r3, [r0, #8]
 8006014:	8181      	strh	r1, [r0, #12]
 8006016:	6643      	str	r3, [r0, #100]	; 0x64
 8006018:	81c2      	strh	r2, [r0, #14]
 800601a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601e:	6183      	str	r3, [r0, #24]
 8006020:	4619      	mov	r1, r3
 8006022:	2208      	movs	r2, #8
 8006024:	305c      	adds	r0, #92	; 0x5c
 8006026:	f7ff fe13 	bl	8005c50 <memset>
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <std+0x38>)
 800602c:	6263      	str	r3, [r4, #36]	; 0x24
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <std+0x3c>)
 8006030:	62a3      	str	r3, [r4, #40]	; 0x28
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <std+0x40>)
 8006034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <std+0x44>)
 8006038:	6224      	str	r4, [r4, #32]
 800603a:	6323      	str	r3, [r4, #48]	; 0x30
 800603c:	bd10      	pop	{r4, pc}
 800603e:	bf00      	nop
 8006040:	080063d5 	.word	0x080063d5
 8006044:	080063f7 	.word	0x080063f7
 8006048:	0800642f 	.word	0x0800642f
 800604c:	08006453 	.word	0x08006453

08006050 <_cleanup_r>:
 8006050:	4901      	ldr	r1, [pc, #4]	; (8006058 <_cleanup_r+0x8>)
 8006052:	f000 b885 	b.w	8006160 <_fwalk_reent>
 8006056:	bf00      	nop
 8006058:	08005fb5 	.word	0x08005fb5

0800605c <__sfmoreglue>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	1e4a      	subs	r2, r1, #1
 8006060:	2568      	movs	r5, #104	; 0x68
 8006062:	4355      	muls	r5, r2
 8006064:	460e      	mov	r6, r1
 8006066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800606a:	f000 f949 	bl	8006300 <_malloc_r>
 800606e:	4604      	mov	r4, r0
 8006070:	b140      	cbz	r0, 8006084 <__sfmoreglue+0x28>
 8006072:	2100      	movs	r1, #0
 8006074:	e9c0 1600 	strd	r1, r6, [r0]
 8006078:	300c      	adds	r0, #12
 800607a:	60a0      	str	r0, [r4, #8]
 800607c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006080:	f7ff fde6 	bl	8005c50 <memset>
 8006084:	4620      	mov	r0, r4
 8006086:	bd70      	pop	{r4, r5, r6, pc}

08006088 <__sinit>:
 8006088:	6983      	ldr	r3, [r0, #24]
 800608a:	b510      	push	{r4, lr}
 800608c:	4604      	mov	r4, r0
 800608e:	bb33      	cbnz	r3, 80060de <__sinit+0x56>
 8006090:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006094:	6503      	str	r3, [r0, #80]	; 0x50
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <__sinit+0x58>)
 8006098:	4a12      	ldr	r2, [pc, #72]	; (80060e4 <__sinit+0x5c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6282      	str	r2, [r0, #40]	; 0x28
 800609e:	4298      	cmp	r0, r3
 80060a0:	bf04      	itt	eq
 80060a2:	2301      	moveq	r3, #1
 80060a4:	6183      	streq	r3, [r0, #24]
 80060a6:	f000 f81f 	bl	80060e8 <__sfp>
 80060aa:	6060      	str	r0, [r4, #4]
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 f81b 	bl	80060e8 <__sfp>
 80060b2:	60a0      	str	r0, [r4, #8]
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 f817 	bl	80060e8 <__sfp>
 80060ba:	2200      	movs	r2, #0
 80060bc:	60e0      	str	r0, [r4, #12]
 80060be:	2104      	movs	r1, #4
 80060c0:	6860      	ldr	r0, [r4, #4]
 80060c2:	f7ff ffa1 	bl	8006008 <std>
 80060c6:	2201      	movs	r2, #1
 80060c8:	2109      	movs	r1, #9
 80060ca:	68a0      	ldr	r0, [r4, #8]
 80060cc:	f7ff ff9c 	bl	8006008 <std>
 80060d0:	2202      	movs	r2, #2
 80060d2:	2112      	movs	r1, #18
 80060d4:	68e0      	ldr	r0, [r4, #12]
 80060d6:	f7ff ff97 	bl	8006008 <std>
 80060da:	2301      	movs	r3, #1
 80060dc:	61a3      	str	r3, [r4, #24]
 80060de:	bd10      	pop	{r4, pc}
 80060e0:	08006608 	.word	0x08006608
 80060e4:	08006051 	.word	0x08006051

080060e8 <__sfp>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <__sfp+0x70>)
 80060ec:	681e      	ldr	r6, [r3, #0]
 80060ee:	69b3      	ldr	r3, [r6, #24]
 80060f0:	4607      	mov	r7, r0
 80060f2:	b913      	cbnz	r3, 80060fa <__sfp+0x12>
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff ffc7 	bl	8006088 <__sinit>
 80060fa:	3648      	adds	r6, #72	; 0x48
 80060fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006100:	3b01      	subs	r3, #1
 8006102:	d503      	bpl.n	800610c <__sfp+0x24>
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	b133      	cbz	r3, 8006116 <__sfp+0x2e>
 8006108:	6836      	ldr	r6, [r6, #0]
 800610a:	e7f7      	b.n	80060fc <__sfp+0x14>
 800610c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006110:	b16d      	cbz	r5, 800612e <__sfp+0x46>
 8006112:	3468      	adds	r4, #104	; 0x68
 8006114:	e7f4      	b.n	8006100 <__sfp+0x18>
 8006116:	2104      	movs	r1, #4
 8006118:	4638      	mov	r0, r7
 800611a:	f7ff ff9f 	bl	800605c <__sfmoreglue>
 800611e:	6030      	str	r0, [r6, #0]
 8006120:	2800      	cmp	r0, #0
 8006122:	d1f1      	bne.n	8006108 <__sfp+0x20>
 8006124:	230c      	movs	r3, #12
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4604      	mov	r4, r0
 800612a:	4620      	mov	r0, r4
 800612c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <__sfp+0x74>)
 8006130:	6665      	str	r5, [r4, #100]	; 0x64
 8006132:	e9c4 5500 	strd	r5, r5, [r4]
 8006136:	60a5      	str	r5, [r4, #8]
 8006138:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800613c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006140:	2208      	movs	r2, #8
 8006142:	4629      	mov	r1, r5
 8006144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006148:	f7ff fd82 	bl	8005c50 <memset>
 800614c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006154:	e7e9      	b.n	800612a <__sfp+0x42>
 8006156:	bf00      	nop
 8006158:	08006608 	.word	0x08006608
 800615c:	ffff0001 	.word	0xffff0001

08006160 <_fwalk_reent>:
 8006160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006164:	4680      	mov	r8, r0
 8006166:	4689      	mov	r9, r1
 8006168:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800616c:	2600      	movs	r6, #0
 800616e:	b914      	cbnz	r4, 8006176 <_fwalk_reent+0x16>
 8006170:	4630      	mov	r0, r6
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800617a:	3f01      	subs	r7, #1
 800617c:	d501      	bpl.n	8006182 <_fwalk_reent+0x22>
 800617e:	6824      	ldr	r4, [r4, #0]
 8006180:	e7f5      	b.n	800616e <_fwalk_reent+0xe>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d907      	bls.n	8006198 <_fwalk_reent+0x38>
 8006188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800618c:	3301      	adds	r3, #1
 800618e:	d003      	beq.n	8006198 <_fwalk_reent+0x38>
 8006190:	4629      	mov	r1, r5
 8006192:	4640      	mov	r0, r8
 8006194:	47c8      	blx	r9
 8006196:	4306      	orrs	r6, r0
 8006198:	3568      	adds	r5, #104	; 0x68
 800619a:	e7ee      	b.n	800617a <_fwalk_reent+0x1a>

0800619c <__swhatbuf_r>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	460e      	mov	r6, r1
 80061a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a4:	2900      	cmp	r1, #0
 80061a6:	b096      	sub	sp, #88	; 0x58
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	da07      	bge.n	80061be <__swhatbuf_r+0x22>
 80061ae:	2300      	movs	r3, #0
 80061b0:	602b      	str	r3, [r5, #0]
 80061b2:	89b3      	ldrh	r3, [r6, #12]
 80061b4:	061a      	lsls	r2, r3, #24
 80061b6:	d410      	bmi.n	80061da <__swhatbuf_r+0x3e>
 80061b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061bc:	e00e      	b.n	80061dc <__swhatbuf_r+0x40>
 80061be:	466a      	mov	r2, sp
 80061c0:	f000 f96e 	bl	80064a0 <_fstat_r>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	dbf2      	blt.n	80061ae <__swhatbuf_r+0x12>
 80061c8:	9a01      	ldr	r2, [sp, #4]
 80061ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061d2:	425a      	negs	r2, r3
 80061d4:	415a      	adcs	r2, r3
 80061d6:	602a      	str	r2, [r5, #0]
 80061d8:	e7ee      	b.n	80061b8 <__swhatbuf_r+0x1c>
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	2000      	movs	r0, #0
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	b016      	add	sp, #88	; 0x58
 80061e2:	bd70      	pop	{r4, r5, r6, pc}

080061e4 <__smakebuf_r>:
 80061e4:	898b      	ldrh	r3, [r1, #12]
 80061e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061e8:	079d      	lsls	r5, r3, #30
 80061ea:	4606      	mov	r6, r0
 80061ec:	460c      	mov	r4, r1
 80061ee:	d507      	bpl.n	8006200 <__smakebuf_r+0x1c>
 80061f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	6123      	str	r3, [r4, #16]
 80061f8:	2301      	movs	r3, #1
 80061fa:	6163      	str	r3, [r4, #20]
 80061fc:	b002      	add	sp, #8
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	ab01      	add	r3, sp, #4
 8006202:	466a      	mov	r2, sp
 8006204:	f7ff ffca 	bl	800619c <__swhatbuf_r>
 8006208:	9900      	ldr	r1, [sp, #0]
 800620a:	4605      	mov	r5, r0
 800620c:	4630      	mov	r0, r6
 800620e:	f000 f877 	bl	8006300 <_malloc_r>
 8006212:	b948      	cbnz	r0, 8006228 <__smakebuf_r+0x44>
 8006214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006218:	059a      	lsls	r2, r3, #22
 800621a:	d4ef      	bmi.n	80061fc <__smakebuf_r+0x18>
 800621c:	f023 0303 	bic.w	r3, r3, #3
 8006220:	f043 0302 	orr.w	r3, r3, #2
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	e7e3      	b.n	80061f0 <__smakebuf_r+0xc>
 8006228:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <__smakebuf_r+0x7c>)
 800622a:	62b3      	str	r3, [r6, #40]	; 0x28
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	6020      	str	r0, [r4, #0]
 8006230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	9b00      	ldr	r3, [sp, #0]
 8006238:	6163      	str	r3, [r4, #20]
 800623a:	9b01      	ldr	r3, [sp, #4]
 800623c:	6120      	str	r0, [r4, #16]
 800623e:	b15b      	cbz	r3, 8006258 <__smakebuf_r+0x74>
 8006240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006244:	4630      	mov	r0, r6
 8006246:	f000 f93d 	bl	80064c4 <_isatty_r>
 800624a:	b128      	cbz	r0, 8006258 <__smakebuf_r+0x74>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	431d      	orrs	r5, r3
 800625c:	81a5      	strh	r5, [r4, #12]
 800625e:	e7cd      	b.n	80061fc <__smakebuf_r+0x18>
 8006260:	08006051 	.word	0x08006051

08006264 <_free_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4605      	mov	r5, r0
 8006268:	2900      	cmp	r1, #0
 800626a:	d045      	beq.n	80062f8 <_free_r+0x94>
 800626c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006270:	1f0c      	subs	r4, r1, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfb8      	it	lt
 8006276:	18e4      	addlt	r4, r4, r3
 8006278:	f000 f946 	bl	8006508 <__malloc_lock>
 800627c:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <_free_r+0x98>)
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	4610      	mov	r0, r2
 8006282:	b933      	cbnz	r3, 8006292 <_free_r+0x2e>
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	6014      	str	r4, [r2, #0]
 8006288:	4628      	mov	r0, r5
 800628a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800628e:	f000 b93c 	b.w	800650a <__malloc_unlock>
 8006292:	42a3      	cmp	r3, r4
 8006294:	d90c      	bls.n	80062b0 <_free_r+0x4c>
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	1862      	adds	r2, r4, r1
 800629a:	4293      	cmp	r3, r2
 800629c:	bf04      	itt	eq
 800629e:	681a      	ldreq	r2, [r3, #0]
 80062a0:	685b      	ldreq	r3, [r3, #4]
 80062a2:	6063      	str	r3, [r4, #4]
 80062a4:	bf04      	itt	eq
 80062a6:	1852      	addeq	r2, r2, r1
 80062a8:	6022      	streq	r2, [r4, #0]
 80062aa:	6004      	str	r4, [r0, #0]
 80062ac:	e7ec      	b.n	8006288 <_free_r+0x24>
 80062ae:	4613      	mov	r3, r2
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	b10a      	cbz	r2, 80062b8 <_free_r+0x54>
 80062b4:	42a2      	cmp	r2, r4
 80062b6:	d9fa      	bls.n	80062ae <_free_r+0x4a>
 80062b8:	6819      	ldr	r1, [r3, #0]
 80062ba:	1858      	adds	r0, r3, r1
 80062bc:	42a0      	cmp	r0, r4
 80062be:	d10b      	bne.n	80062d8 <_free_r+0x74>
 80062c0:	6820      	ldr	r0, [r4, #0]
 80062c2:	4401      	add	r1, r0
 80062c4:	1858      	adds	r0, r3, r1
 80062c6:	4282      	cmp	r2, r0
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	d1dd      	bne.n	8006288 <_free_r+0x24>
 80062cc:	6810      	ldr	r0, [r2, #0]
 80062ce:	6852      	ldr	r2, [r2, #4]
 80062d0:	605a      	str	r2, [r3, #4]
 80062d2:	4401      	add	r1, r0
 80062d4:	6019      	str	r1, [r3, #0]
 80062d6:	e7d7      	b.n	8006288 <_free_r+0x24>
 80062d8:	d902      	bls.n	80062e0 <_free_r+0x7c>
 80062da:	230c      	movs	r3, #12
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	e7d3      	b.n	8006288 <_free_r+0x24>
 80062e0:	6820      	ldr	r0, [r4, #0]
 80062e2:	1821      	adds	r1, r4, r0
 80062e4:	428a      	cmp	r2, r1
 80062e6:	bf04      	itt	eq
 80062e8:	6811      	ldreq	r1, [r2, #0]
 80062ea:	6852      	ldreq	r2, [r2, #4]
 80062ec:	6062      	str	r2, [r4, #4]
 80062ee:	bf04      	itt	eq
 80062f0:	1809      	addeq	r1, r1, r0
 80062f2:	6021      	streq	r1, [r4, #0]
 80062f4:	605c      	str	r4, [r3, #4]
 80062f6:	e7c7      	b.n	8006288 <_free_r+0x24>
 80062f8:	bd38      	pop	{r3, r4, r5, pc}
 80062fa:	bf00      	nop
 80062fc:	200000a8 	.word	0x200000a8

08006300 <_malloc_r>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	1ccd      	adds	r5, r1, #3
 8006304:	f025 0503 	bic.w	r5, r5, #3
 8006308:	3508      	adds	r5, #8
 800630a:	2d0c      	cmp	r5, #12
 800630c:	bf38      	it	cc
 800630e:	250c      	movcc	r5, #12
 8006310:	2d00      	cmp	r5, #0
 8006312:	4606      	mov	r6, r0
 8006314:	db01      	blt.n	800631a <_malloc_r+0x1a>
 8006316:	42a9      	cmp	r1, r5
 8006318:	d903      	bls.n	8006322 <_malloc_r+0x22>
 800631a:	230c      	movs	r3, #12
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	2000      	movs	r0, #0
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	f000 f8f1 	bl	8006508 <__malloc_lock>
 8006326:	4a21      	ldr	r2, [pc, #132]	; (80063ac <_malloc_r+0xac>)
 8006328:	6814      	ldr	r4, [r2, #0]
 800632a:	4621      	mov	r1, r4
 800632c:	b991      	cbnz	r1, 8006354 <_malloc_r+0x54>
 800632e:	4c20      	ldr	r4, [pc, #128]	; (80063b0 <_malloc_r+0xb0>)
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	b91b      	cbnz	r3, 800633c <_malloc_r+0x3c>
 8006334:	4630      	mov	r0, r6
 8006336:	f000 f83d 	bl	80063b4 <_sbrk_r>
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	4629      	mov	r1, r5
 800633e:	4630      	mov	r0, r6
 8006340:	f000 f838 	bl	80063b4 <_sbrk_r>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d124      	bne.n	8006392 <_malloc_r+0x92>
 8006348:	230c      	movs	r3, #12
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	4630      	mov	r0, r6
 800634e:	f000 f8dc 	bl	800650a <__malloc_unlock>
 8006352:	e7e4      	b.n	800631e <_malloc_r+0x1e>
 8006354:	680b      	ldr	r3, [r1, #0]
 8006356:	1b5b      	subs	r3, r3, r5
 8006358:	d418      	bmi.n	800638c <_malloc_r+0x8c>
 800635a:	2b0b      	cmp	r3, #11
 800635c:	d90f      	bls.n	800637e <_malloc_r+0x7e>
 800635e:	600b      	str	r3, [r1, #0]
 8006360:	50cd      	str	r5, [r1, r3]
 8006362:	18cc      	adds	r4, r1, r3
 8006364:	4630      	mov	r0, r6
 8006366:	f000 f8d0 	bl	800650a <__malloc_unlock>
 800636a:	f104 000b 	add.w	r0, r4, #11
 800636e:	1d23      	adds	r3, r4, #4
 8006370:	f020 0007 	bic.w	r0, r0, #7
 8006374:	1ac3      	subs	r3, r0, r3
 8006376:	d0d3      	beq.n	8006320 <_malloc_r+0x20>
 8006378:	425a      	negs	r2, r3
 800637a:	50e2      	str	r2, [r4, r3]
 800637c:	e7d0      	b.n	8006320 <_malloc_r+0x20>
 800637e:	428c      	cmp	r4, r1
 8006380:	684b      	ldr	r3, [r1, #4]
 8006382:	bf16      	itet	ne
 8006384:	6063      	strne	r3, [r4, #4]
 8006386:	6013      	streq	r3, [r2, #0]
 8006388:	460c      	movne	r4, r1
 800638a:	e7eb      	b.n	8006364 <_malloc_r+0x64>
 800638c:	460c      	mov	r4, r1
 800638e:	6849      	ldr	r1, [r1, #4]
 8006390:	e7cc      	b.n	800632c <_malloc_r+0x2c>
 8006392:	1cc4      	adds	r4, r0, #3
 8006394:	f024 0403 	bic.w	r4, r4, #3
 8006398:	42a0      	cmp	r0, r4
 800639a:	d005      	beq.n	80063a8 <_malloc_r+0xa8>
 800639c:	1a21      	subs	r1, r4, r0
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f808 	bl	80063b4 <_sbrk_r>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d0cf      	beq.n	8006348 <_malloc_r+0x48>
 80063a8:	6025      	str	r5, [r4, #0]
 80063aa:	e7db      	b.n	8006364 <_malloc_r+0x64>
 80063ac:	200000a8 	.word	0x200000a8
 80063b0:	200000ac 	.word	0x200000ac

080063b4 <_sbrk_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4c06      	ldr	r4, [pc, #24]	; (80063d0 <_sbrk_r+0x1c>)
 80063b8:	2300      	movs	r3, #0
 80063ba:	4605      	mov	r5, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	f7fb fb66 	bl	8001a90 <_sbrk>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_sbrk_r+0x1a>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_sbrk_r+0x1a>
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	20000acc 	.word	0x20000acc

080063d4 <__sread>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	460c      	mov	r4, r1
 80063d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063dc:	f000 f896 	bl	800650c <_read_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	bfab      	itete	ge
 80063e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063e6:	89a3      	ldrhlt	r3, [r4, #12]
 80063e8:	181b      	addge	r3, r3, r0
 80063ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ee:	bfac      	ite	ge
 80063f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063f2:	81a3      	strhlt	r3, [r4, #12]
 80063f4:	bd10      	pop	{r4, pc}

080063f6 <__swrite>:
 80063f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	461f      	mov	r7, r3
 80063fc:	898b      	ldrh	r3, [r1, #12]
 80063fe:	05db      	lsls	r3, r3, #23
 8006400:	4605      	mov	r5, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4616      	mov	r6, r2
 8006406:	d505      	bpl.n	8006414 <__swrite+0x1e>
 8006408:	2302      	movs	r3, #2
 800640a:	2200      	movs	r2, #0
 800640c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006410:	f000 f868 	bl	80064e4 <_lseek_r>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800641a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	4632      	mov	r2, r6
 8006422:	463b      	mov	r3, r7
 8006424:	4628      	mov	r0, r5
 8006426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800642a:	f000 b817 	b.w	800645c <_write_r>

0800642e <__sseek>:
 800642e:	b510      	push	{r4, lr}
 8006430:	460c      	mov	r4, r1
 8006432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006436:	f000 f855 	bl	80064e4 <_lseek_r>
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	bf15      	itete	ne
 8006440:	6560      	strne	r0, [r4, #84]	; 0x54
 8006442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800644a:	81a3      	strheq	r3, [r4, #12]
 800644c:	bf18      	it	ne
 800644e:	81a3      	strhne	r3, [r4, #12]
 8006450:	bd10      	pop	{r4, pc}

08006452 <__sclose>:
 8006452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006456:	f000 b813 	b.w	8006480 <_close_r>
	...

0800645c <_write_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4c07      	ldr	r4, [pc, #28]	; (800647c <_write_r+0x20>)
 8006460:	4605      	mov	r5, r0
 8006462:	4608      	mov	r0, r1
 8006464:	4611      	mov	r1, r2
 8006466:	2200      	movs	r2, #0
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	f7fa ff08 	bl	8001280 <_write>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_write_r+0x1e>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	b103      	cbz	r3, 800647a <_write_r+0x1e>
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	20000acc 	.word	0x20000acc

08006480 <_close_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4c06      	ldr	r4, [pc, #24]	; (800649c <_close_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4605      	mov	r5, r0
 8006488:	4608      	mov	r0, r1
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	f7fb facb 	bl	8001a26 <_close>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_close_r+0x1a>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	b103      	cbz	r3, 800649a <_close_r+0x1a>
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20000acc 	.word	0x20000acc

080064a0 <_fstat_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4c07      	ldr	r4, [pc, #28]	; (80064c0 <_fstat_r+0x20>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4605      	mov	r5, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	f7fb fac6 	bl	8001a3e <_fstat>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d102      	bne.n	80064bc <_fstat_r+0x1c>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	b103      	cbz	r3, 80064bc <_fstat_r+0x1c>
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	bd38      	pop	{r3, r4, r5, pc}
 80064be:	bf00      	nop
 80064c0:	20000acc 	.word	0x20000acc

080064c4 <_isatty_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4c06      	ldr	r4, [pc, #24]	; (80064e0 <_isatty_r+0x1c>)
 80064c8:	2300      	movs	r3, #0
 80064ca:	4605      	mov	r5, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	f7fb fac5 	bl	8001a5e <_isatty>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_isatty_r+0x1a>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	b103      	cbz	r3, 80064de <_isatty_r+0x1a>
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	20000acc 	.word	0x20000acc

080064e4 <_lseek_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4c07      	ldr	r4, [pc, #28]	; (8006504 <_lseek_r+0x20>)
 80064e8:	4605      	mov	r5, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	4611      	mov	r1, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	6022      	str	r2, [r4, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fb fabe 	bl	8001a74 <_lseek>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_lseek_r+0x1e>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_lseek_r+0x1e>
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000acc 	.word	0x20000acc

08006508 <__malloc_lock>:
 8006508:	4770      	bx	lr

0800650a <__malloc_unlock>:
 800650a:	4770      	bx	lr

0800650c <_read_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4c07      	ldr	r4, [pc, #28]	; (800652c <_read_r+0x20>)
 8006510:	4605      	mov	r5, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	6022      	str	r2, [r4, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fb fa66 	bl	80019ec <_read>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_read_r+0x1e>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	b103      	cbz	r3, 800652a <_read_r+0x1e>
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000acc 	.word	0x20000acc

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
